[2023-07-11 12:35:15.101] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 12:35:15.987] [info]  { response: 1 }
[2023-07-11 12:35:24.407] [info]  From Badge factory manager {
  enabled: true,
  properties: {
    height: 50,
    width: 130,
    logo: '',
    backgroundColor: '#7B97B2',
    textColor: '#fff',
    x: 66,
    y: 66
  }
}
[2023-07-11 12:35:25.101] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 12:35:25.858] [info]  { response: 1 }
[2023-07-11 12:35:34.407] [info]  From Badge factory manager {
  enabled: true,
  properties: {
    height: 50,
    width: 130,
    logo: '',
    backgroundColor: '#7B97B2',
    textColor: '#fff',
    x: 66,
    y: 66
  }
}
[2023-07-11 12:35:35.101] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 12:35:35.958] [info]  { response: 1 }
[2023-07-11 12:35:44.343] [info]  BOTH ARE NOT SAME 
[2023-07-11 12:35:44.407] [info]  From Badge factory manager {
  enabled: true,
  properties: {
    height: 35,
    width: 130,
    logo: '',
    backgroundColor: '#7B97B2',
    textColor: '#fff',
    x: 66,
    y: 66
  }
}
[2023-07-11 12:35:45.101] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 12:35:45.799] [info]  { response: 1 }
[2023-07-11 12:35:54.408] [info]  From Badge factory manager {
  enabled: true,
  properties: {
    height: 35,
    width: 130,
    logo: '',
    backgroundColor: '#7B97B2',
    textColor: '#fff',
    x: 66,
    y: 66
  }
}
[2023-07-11 12:35:54.734] [info]  BOTH ARE NOT SAME 
[2023-07-11 12:35:55.101] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 12:35:56.047] [info]  { response: 1 }
[2023-07-11 12:36:04.409] [info]  From Badge factory manager {
  enabled: true,
  properties: {
    height: 40,
    width: 130,
    logo: '',
    backgroundColor: '#7B97B2',
    textColor: '#fff',
    x: 66,
    y: 66
  }
}
[2023-07-11 12:36:05.101] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 12:36:06.069] [info]  { response: 1 }
[2023-07-11 12:36:14.409] [info]  From Badge factory manager {
  enabled: true,
  properties: {
    height: 40,
    width: 130,
    logo: '',
    backgroundColor: '#7B97B2',
    textColor: '#fff',
    x: 66,
    y: 66
  }
}
[2023-07-11 12:36:15.101] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 12:36:16.418] [info]  { response: 1 }
[2023-07-11 12:36:24.409] [info]  From Badge factory manager {
  enabled: true,
  properties: {
    height: 40,
    width: 130,
    logo: '',
    backgroundColor: '#7B97B2',
    textColor: '#fff',
    x: 66,
    y: 66
  }
}
[2023-07-11 12:36:25.101] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 12:36:25.927] [info]  { response: 1 }
[2023-07-11 12:36:29.817] [info]  BOTH ARE NOT SAME 
[2023-07-11 12:36:34.411] [info]  From Badge factory manager {
  enabled: true,
  properties: {
    height: 35,
    width: 130,
    logo: '',
    backgroundColor: '#7B97B2',
    textColor: '#fff',
    x: 66,
    y: 66
  }
}
[2023-07-11 12:36:35.101] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 12:36:36.067] [info]  { response: 1 }
[2023-07-11 12:36:44.412] [info]  From Badge factory manager {
  enabled: true,
  properties: {
    height: 35,
    width: 130,
    logo: '',
    backgroundColor: '#7B97B2',
    textColor: '#fff',
    x: 66,
    y: 66
  }
}
[2023-07-11 12:36:45.101] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 12:36:45.904] [info]  { response: 1 }
[2023-07-11 12:36:54.413] [info]  From Badge factory manager {
  enabled: true,
  properties: {
    height: 35,
    width: 130,
    logo: '',
    backgroundColor: '#7B97B2',
    textColor: '#fff',
    x: 66,
    y: 66
  }
}
[2023-07-11 12:36:55.101] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 12:36:57.499] [info]  { response: 1 }
[2023-07-11 12:37:04.413] [info]  From Badge factory manager {
  enabled: true,
  properties: {
    height: 35,
    width: 130,
    logo: '',
    backgroundColor: '#7B97B2',
    textColor: '#fff',
    x: 66,
    y: 66
  }
}
[2023-07-11 12:37:05.101] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 12:37:05.961] [info]  { response: 1 }
[2023-07-11 12:37:14.414] [info]  From Badge factory manager {
  enabled: true,
  properties: {
    height: 35,
    width: 130,
    logo: '',
    backgroundColor: '#7B97B2',
    textColor: '#fff',
    x: 66,
    y: 66
  }
}
[2023-07-11 12:37:15.102] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 12:37:16.206] [info]  { response: 1 }
[2023-07-11 12:37:24.414] [info]  From Badge factory manager {
  enabled: true,
  properties: {
    height: 35,
    width: 130,
    logo: '',
    backgroundColor: '#7B97B2',
    textColor: '#fff',
    x: 66,
    y: 66
  }
}
[2023-07-11 12:37:25.101] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 12:37:26.176] [info]  { response: 1 }
[2023-07-11 12:37:34.415] [info]  From Badge factory manager {
  enabled: true,
  properties: {
    height: 35,
    width: 130,
    logo: '',
    backgroundColor: '#7B97B2',
    textColor: '#fff',
    x: 66,
    y: 66
  }
}
[2023-07-11 12:37:35.101] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 12:37:35.828] [info]  { response: 1 }
[2023-07-11 12:37:44.417] [info]  From Badge factory manager {
  enabled: true,
  properties: {
    height: 35,
    width: 130,
    logo: '',
    backgroundColor: '#7B97B2',
    textColor: '#fff',
    x: 66,
    y: 66
  }
}
[2023-07-11 12:37:45.101] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 12:37:45.894] [info]  { response: 1 }
[2023-07-11 12:37:54.417] [info]  From Badge factory manager {
  enabled: true,
  properties: {
    height: 35,
    width: 130,
    logo: '',
    backgroundColor: '#7B97B2',
    textColor: '#fff',
    x: 66,
    y: 66
  }
}
[2023-07-11 12:37:55.101] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 12:37:55.925] [info]  { response: 1 }
[2023-07-11 12:38:04.418] [info]  From Badge factory manager {
  enabled: true,
  properties: {
    height: 35,
    width: 130,
    logo: '',
    backgroundColor: '#7B97B2',
    textColor: '#fff',
    x: 66,
    y: 66
  }
}
[2023-07-11 12:38:05.101] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 12:38:06.065] [info]  { response: 1 }
[2023-07-11 12:38:14.419] [info]  From Badge factory manager {
  enabled: true,
  properties: {
    height: 35,
    width: 130,
    logo: '',
    backgroundColor: '#7B97B2',
    textColor: '#fff',
    x: 66,
    y: 66
  }
}
[2023-07-11 12:38:15.100] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 12:38:16.101] [info]  { response: 1 }
[2023-07-11 12:38:24.420] [info]  From Badge factory manager {
  enabled: true,
  properties: {
    height: 35,
    width: 130,
    logo: '',
    backgroundColor: '#7B97B2',
    textColor: '#fff',
    x: 66,
    y: 66
  }
}
[2023-07-11 12:38:25.101] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 12:38:26.333] [info]  { response: 1 }
[2023-07-11 12:38:34.422] [info]  From Badge factory manager {
  enabled: true,
  properties: {
    height: 35,
    width: 130,
    logo: '',
    backgroundColor: '#7B97B2',
    textColor: '#fff',
    x: 66,
    y: 66
  }
}
[2023-07-11 12:38:35.101] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 12:38:36.438] [info]  { response: 1 }
[2023-07-11 12:38:44.423] [info]  From Badge factory manager {
  enabled: true,
  properties: {
    height: 35,
    width: 130,
    logo: '',
    backgroundColor: '#7B97B2',
    textColor: '#fff',
    x: 66,
    y: 66
  }
}
[2023-07-11 12:38:45.100] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 12:38:46.052] [info]  { response: 1 }
[2023-07-11 12:38:54.423] [info]  From Badge factory manager {
  enabled: true,
  properties: {
    height: 35,
    width: 130,
    logo: '',
    backgroundColor: '#7B97B2',
    textColor: '#fff',
    x: 66,
    y: 66
  }
}
[2023-07-11 12:38:55.101] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 12:38:55.781] [info]  { response: 1 }
[2023-07-11 12:39:04.426] [info]  From Badge factory manager {
  enabled: true,
  properties: {
    height: 35,
    width: 130,
    logo: '',
    backgroundColor: '#7B97B2',
    textColor: '#fff',
    x: 66,
    y: 66
  }
}
[2023-07-11 12:39:05.103] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 12:39:06.218] [info]  { response: 1 }
[2023-07-11 12:39:14.427] [info]  From Badge factory manager {
  enabled: true,
  properties: {
    height: 35,
    width: 130,
    logo: '',
    backgroundColor: '#7B97B2',
    textColor: '#fff',
    x: 66,
    y: 66
  }
}
[2023-07-11 12:39:15.101] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 12:39:16.041] [info]  { response: 1 }
[2023-07-11 12:39:24.427] [info]  From Badge factory manager {
  enabled: true,
  properties: {
    height: 35,
    width: 130,
    logo: '',
    backgroundColor: '#7B97B2',
    textColor: '#fff',
    x: 66,
    y: 66
  }
}
[2023-07-11 12:39:25.101] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 12:39:26.078] [info]  { response: 1 }
[2023-07-11 12:39:34.428] [info]  From Badge factory manager {
  enabled: true,
  properties: {
    height: 35,
    width: 130,
    logo: '',
    backgroundColor: '#7B97B2',
    textColor: '#fff',
    x: 66,
    y: 66
  }
}
[2023-07-11 12:39:35.101] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 12:39:36.323] [info]  { response: 1 }
[2023-07-11 12:39:44.428] [info]  From Badge factory manager {
  enabled: true,
  properties: {
    height: 35,
    width: 130,
    logo: '',
    backgroundColor: '#7B97B2',
    textColor: '#fff',
    x: 66,
    y: 66
  }
}
[2023-07-11 12:39:45.101] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 12:39:46.353] [info]  { response: 1 }
[2023-07-11 12:39:54.429] [info]  From Badge factory manager {
  enabled: true,
  properties: {
    height: 35,
    width: 130,
    logo: '',
    backgroundColor: '#7B97B2',
    textColor: '#fff',
    x: 66,
    y: 66
  }
}
[2023-07-11 12:39:55.101] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 12:39:55.985] [info]  { response: 1 }
[2023-07-11 12:40:04.430] [info]  From Badge factory manager {
  enabled: true,
  properties: {
    height: 35,
    width: 130,
    logo: '',
    backgroundColor: '#7B97B2',
    textColor: '#fff',
    x: 66,
    y: 66
  }
}
[2023-07-11 12:40:05.109] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 12:40:05.804] [info]  { response: 1 }
[2023-07-11 12:40:14.431] [info]  From Badge factory manager {
  enabled: true,
  properties: {
    height: 35,
    width: 130,
    logo: '',
    backgroundColor: '#7B97B2',
    textColor: '#fff',
    x: 66,
    y: 66
  }
}
[2023-07-11 12:40:15.101] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 12:40:16.056] [info]  { response: 1 }
[2023-07-11 12:40:24.432] [info]  From Badge factory manager {
  enabled: true,
  properties: {
    height: 35,
    width: 130,
    logo: '',
    backgroundColor: '#7B97B2',
    textColor: '#fff',
    x: 66,
    y: 66
  }
}
[2023-07-11 12:40:25.101] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 12:40:25.986] [info]  { response: 1 }
[2023-07-11 12:40:34.431] [info]  From Badge factory manager {
  enabled: true,
  properties: {
    height: 35,
    width: 130,
    logo: '',
    backgroundColor: '#7B97B2',
    textColor: '#fff',
    x: 66,
    y: 66
  }
}
[2023-07-11 12:40:35.100] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 12:40:36.128] [info]  { response: 1 }
[2023-07-11 12:40:44.432] [info]  From Badge factory manager {
  enabled: true,
  properties: {
    height: 35,
    width: 130,
    logo: '',
    backgroundColor: '#7B97B2',
    textColor: '#fff',
    x: 66,
    y: 66
  }
}
[2023-07-11 12:40:45.101] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 12:40:46.069] [info]  { response: 1 }
[2023-07-11 12:40:54.433] [info]  From Badge factory manager {
  enabled: true,
  properties: {
    height: 35,
    width: 130,
    logo: '',
    backgroundColor: '#7B97B2',
    textColor: '#fff',
    x: 66,
    y: 66
  }
}
[2023-07-11 12:40:55.101] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 12:40:56.300] [info]  { response: 1 }
[2023-07-11 12:41:04.434] [info]  From Badge factory manager {
  enabled: true,
  properties: {
    height: 35,
    width: 130,
    logo: '',
    backgroundColor: '#7B97B2',
    textColor: '#fff',
    x: 66,
    y: 66
  }
}
[2023-07-11 12:41:05.101] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 12:41:05.978] [info]  { response: 1 }
[2023-07-11 12:41:14.434] [info]  From Badge factory manager {
  enabled: true,
  properties: {
    height: 35,
    width: 130,
    logo: '',
    backgroundColor: '#7B97B2',
    textColor: '#fff',
    x: 66,
    y: 66
  }
}
[2023-07-11 12:41:15.104] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 12:41:16.060] [info]  { response: 1 }
[2023-07-11 12:41:24.435] [info]  From Badge factory manager {
  enabled: true,
  properties: {
    height: 35,
    width: 130,
    logo: '',
    backgroundColor: '#7B97B2',
    textColor: '#fff',
    x: 66,
    y: 66
  }
}
[2023-07-11 12:41:25.101] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 12:41:25.997] [info]  { response: 1 }
[2023-07-11 12:41:34.437] [info]  From Badge factory manager {
  enabled: true,
  properties: {
    height: 35,
    width: 130,
    logo: '',
    backgroundColor: '#7B97B2',
    textColor: '#fff',
    x: 66,
    y: 66
  }
}
[2023-07-11 12:41:35.101] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 12:41:36.337] [info]  { response: 1 }
[2023-07-11 12:41:44.438] [info]  From Badge factory manager {
  enabled: true,
  properties: {
    height: 35,
    width: 130,
    logo: '',
    backgroundColor: '#7B97B2',
    textColor: '#fff',
    x: 66,
    y: 66
  }
}
[2023-07-11 12:41:45.101] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 12:41:46.258] [info]  { response: 1 }
[2023-07-11 12:41:54.437] [info]  From Badge factory manager {
  enabled: true,
  properties: {
    height: 35,
    width: 130,
    logo: '',
    backgroundColor: '#7B97B2',
    textColor: '#fff',
    x: 66,
    y: 66
  }
}
[2023-07-11 12:41:55.101] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 12:41:56.092] [info]  { response: 1 }
[2023-07-11 12:42:04.436] [info]  From Badge factory manager {
  enabled: true,
  properties: {
    height: 35,
    width: 130,
    logo: '',
    backgroundColor: '#7B97B2',
    textColor: '#fff',
    x: 66,
    y: 66
  }
}
[2023-07-11 12:42:05.101] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 12:42:06.275] [info]  { response: 1 }
[2023-07-11 12:42:35.613] [info]  Started /home/lnv-75/Documents/insiteFlow/desktop-app-container/test/out AES-128
[2023-07-11 12:43:07.947] [info]  Found XML file: /home/lnv-75/Documents/insiteFlow/desktop-app-container/test/out/queries_manual_login_test_key.xml... Decrypting and processing.
[2023-07-11 12:43:07.951] [info]  Processing authentication data...
[2023-07-11 12:43:07.952] [info]  Processing auth data string: /INFIRMARY.DOCTOR//1671058352000/
[2023-07-11 12:43:07.953] [info]  Initializing badge for user...
[2023-07-11 12:43:07.953] [info]  get-config {
  message: { practitionerId: 'INFIRMARY.DOCTOR', type: 'Login', patient: {} }
} Publish notification
[2023-07-11 12:43:07.956] [info]  Checking for config file: /home/lnv-75/config.json
[2023-07-11 12:43:07.957] [info]  Checking for config file: /home/lnv-75/Documents/config.json
[2023-07-11 12:43:07.957] [info]  Checking for config file: /home/lnv-75/Documents/insiteFlow/config.json
[2023-07-11 12:43:07.958] [info]  Checking for config file: /home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/native_modules/config.json
[2023-07-11 12:43:07.958] [info]  Config file found at path: /home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/native_modules/config.json
[2023-07-11 12:43:07.958] [info]  Version:  1.0.32
[2023-07-11 12:43:09.164] [info]  {
  access_token: 'eyJhbGciOiJSU0EtT0FFUCIsImVuYyI6IkEyNTZDQkMtSFM1MTIiLCJraWQiOiJBRkFENDNBMTNCRUFFRDA1QUVGQjNGMzA1MzczOEVBMDkyRTVEQjM0IiwidHlwIjoiYXQrand0IiwiY3R5IjoiSldUIn0.hXqm6-Nd7nJJoS9ymsJnxEnRIhnYpw4wvsTkyWL_h1mblEdHWR7ZOwp-ODwZ_5334baOsEIIKZ91GBKuu8iFAfzxST9sY5vYYabL5UKCzoTUV-_l_vd8aKEqRUPQFOKKWq3GnLbmHVj7wMSPUl46qU9ijQA2Gfmi2tWV089ZuVNbIWCVNqEteMiIxlHj830iIYxu0NKG3ag33p1LATviaBSyZxRVy0tnVNXJaVQkdvH4ulJN5_1eOhdlruLl9xp7T7b0bLTuIJM5VHe-l2tEqLEAqIzhTNXc9LRA7oCi-ovWD1NzN47rKlAenAH_dGeW7yWwjW1C4wb_gBRr6I-ykA.hdVHLS7pzqwjnH84CIaK_g.eZSp49RPWwL_eupIuW_i0BoH9LjqsrtMNm6vAEti8pM1_POGHM9zi_C0oOBhre4Xboy3IfZYA9CG78lKPbmbujJKQuMRZMllAFyZnjc9RSrIO4YWzSJH5xjdS93EMUUQdsw_waFXrFvo656B3F3Hs471I1iHSQzDNhrwmL8FEupxJFvSEoo0xOlm2vo20xAr-HytbfpoJRSSQjy01lEsdtdstU_rkS1LUP8Iw1mN6gssRevamr1-G9uuuzHZpRKEEPLj4Hw-e0mRXnOdFQ62zzxNDzB6RjdBixjz1eyV6Sm1INtr5A19eHeyd0jLB7W9w7Q0VSQjj354HEjOCtsiJ_37ps1EVjaxb_9nhg_2xVfXGTlpMQA_chMWlWs7TVPAdPB1Aoi24eg7qzdb3TriYpLy1NVaLQPqKWNxZDZFC8P22MJCCZy-Um6ymy6h__o5sLEJNoqix2dG9HLgUoCRA6jqUe9pyHc_VOXTWhaE9RTtesNwQo2uMhv6JPTrMRJ1qxZpovuVRVx2ag6IKio5h03UZZKwZIS6uBhCDgy7db_uUjBC_XwOH1CujzntHtHTvn7RdvobVhwOSvDxuODWKfKhlV3lfGfX0pdjG9ZUdUtbEka1zYO2RZLUlkwSpIrYepz9VW0Xj9V7K5-4bjIGjJCGadmGE309NZQfXYFLc3u3DgChSrVENmDTHRph08iLteUOS80KrJSEks_DQPQvEP8h-vuiIBqBMaew3yz32QYN5brd8-JGvY-hs2VZ3zd9c6COK_StMPKcE9icOae9Sz7LQvYE5OZeKoD6_tayt8gDpr_fJ9MMdd5kFSN2ciLS0xMYcP_k1eU-XL3ZAdAZWfWovbVSwE4XvVE-iL5YN7yfGnsRoeZtvQtGcGIu-NqDPACKm58Bl5BfzmGYfNcGLbqVn2Ag3Jhp77ZPaXI3WpqbRA1eT8EYuHszG7EdcnJQ6wee264QnOaHAPF64yTKbS1woej8kkI37_H945_0F9oL2Yu_8UATeIabRaeE9cllZCVXhkGrJEfw_JpPgPfOcGSw1F0fwuuKAoK2IbulgzJCIELfAcsJBeI4aAiek5EUHN8RSY3nBr1LuwhNigD8RNbojpBIs67cLONtH1S_XE2JCvg6lCKVy77JHxNQIiUcl1G-gqjBoq3TEknZa-PrJY6QPjJFaRgvZYbbPN7-OMVhfi2-j1D3MzaSR0XaI4BAxHKsjLssbE7LQvvhmdbHTR2vRb_5S9LnRHSsNcHGvEQNLTy_NvzbV31wvwFrUzLpxjzZLAClrOrQTelcF4VOxQ37SNfAWQb6WOfTRDUVdO0.aEjP28K7poOQtD1AsH1xTkyKnyybazBLyL-WgobKVRc',
  token_type: 'Bearer',
  expires_in: 604800
} OAuth Connect
[2023-07-11 12:43:09.165] [info]  Base: Fetching facility clients...
[2023-07-11 12:43:10.158] [info]  [
  {
    id: '49d84548-8786-4f33-8274-58f4a1e08ce6',
    name: 'artifact',
    iconURL: '',
    appPluginURL: '',
    authMethod: 'OAuth',
    patientContext: false,
    roleConstraints: false
  }
] Facility clients
[2023-07-11 12:43:10.173] [info]  Checking for config file: /home/lnv-75/config.json
[2023-07-11 12:43:10.174] [info]  Checking for config file: /home/lnv-75/Documents/config.json
[2023-07-11 12:43:10.174] [info]  Checking for config file: /home/lnv-75/Documents/insiteFlow/config.json
[2023-07-11 12:43:10.174] [info]  Checking for config file: /home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/native_modules/config.json
[2023-07-11 12:43:10.174] [info]  Config file found at path: /home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/native_modules/config.json
[2023-07-11 12:43:10.175] [info]  Checking for config file: /home/lnv-75/config.json
[2023-07-11 12:43:10.175] [info]  Checking for config file: /home/lnv-75/Documents/config.json
[2023-07-11 12:43:10.176] [info]  Checking for config file: /home/lnv-75/Documents/insiteFlow/config.json
[2023-07-11 12:43:10.176] [info]  Checking for config file: /home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/native_modules/config.json
[2023-07-11 12:43:10.176] [info]  Config file found at path: /home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/native_modules/config.json
[2023-07-11 12:43:10.186] [info]  login { practitionerId: 'INFIRMARY.DOCTOR', type: 'Login', patient: {} } Publish notification
[2023-07-11 12:43:10.948] [info]  config>>> {
  token: 'eyJhbGciOiJSU0EtT0FFUCIsImVuYyI6IkEyNTZDQkMtSFM1MTIiLCJraWQiOiJBRkFENDNBMTNCRUFFRDA1QUVGQjNGMzA1MzczOEVBMDkyRTVEQjM0IiwidHlwIjoiYXQrand0IiwiY3R5IjoiSldUIn0.hXqm6-Nd7nJJoS9ymsJnxEnRIhnYpw4wvsTkyWL_h1mblEdHWR7ZOwp-ODwZ_5334baOsEIIKZ91GBKuu8iFAfzxST9sY5vYYabL5UKCzoTUV-_l_vd8aKEqRUPQFOKKWq3GnLbmHVj7wMSPUl46qU9ijQA2Gfmi2tWV089ZuVNbIWCVNqEteMiIxlHj830iIYxu0NKG3ag33p1LATviaBSyZxRVy0tnVNXJaVQkdvH4ulJN5_1eOhdlruLl9xp7T7b0bLTuIJM5VHe-l2tEqLEAqIzhTNXc9LRA7oCi-ovWD1NzN47rKlAenAH_dGeW7yWwjW1C4wb_gBRr6I-ykA.hdVHLS7pzqwjnH84CIaK_g.eZSp49RPWwL_eupIuW_i0BoH9LjqsrtMNm6vAEti8pM1_POGHM9zi_C0oOBhre4Xboy3IfZYA9CG78lKPbmbujJKQuMRZMllAFyZnjc9RSrIO4YWzSJH5xjdS93EMUUQdsw_waFXrFvo656B3F3Hs471I1iHSQzDNhrwmL8FEupxJFvSEoo0xOlm2vo20xAr-HytbfpoJRSSQjy01lEsdtdstU_rkS1LUP8Iw1mN6gssRevamr1-G9uuuzHZpRKEEPLj4Hw-e0mRXnOdFQ62zzxNDzB6RjdBixjz1eyV6Sm1INtr5A19eHeyd0jLB7W9w7Q0VSQjj354HEjOCtsiJ_37ps1EVjaxb_9nhg_2xVfXGTlpMQA_chMWlWs7TVPAdPB1Aoi24eg7qzdb3TriYpLy1NVaLQPqKWNxZDZFC8P22MJCCZy-Um6ymy6h__o5sLEJNoqix2dG9HLgUoCRA6jqUe9pyHc_VOXTWhaE9RTtesNwQo2uMhv6JPTrMRJ1qxZpovuVRVx2ag6IKio5h03UZZKwZIS6uBhCDgy7db_uUjBC_XwOH1CujzntHtHTvn7RdvobVhwOSvDxuODWKfKhlV3lfGfX0pdjG9ZUdUtbEka1zYO2RZLUlkwSpIrYepz9VW0Xj9V7K5-4bjIGjJCGadmGE309NZQfXYFLc3u3DgChSrVENmDTHRph08iLteUOS80KrJSEks_DQPQvEP8h-vuiIBqBMaew3yz32QYN5brd8-JGvY-hs2VZ3zd9c6COK_StMPKcE9icOae9Sz7LQvYE5OZeKoD6_tayt8gDpr_fJ9MMdd5kFSN2ciLS0xMYcP_k1eU-XL3ZAdAZWfWovbVSwE4XvVE-iL5YN7yfGnsRoeZtvQtGcGIu-NqDPACKm58Bl5BfzmGYfNcGLbqVn2Ag3Jhp77ZPaXI3WpqbRA1eT8EYuHszG7EdcnJQ6wee264QnOaHAPF64yTKbS1woej8kkI37_H945_0F9oL2Yu_8UATeIabRaeE9cllZCVXhkGrJEfw_JpPgPfOcGSw1F0fwuuKAoK2IbulgzJCIELfAcsJBeI4aAiek5EUHN8RSY3nBr1LuwhNigD8RNbojpBIs67cLONtH1S_XE2JCvg6lCKVy77JHxNQIiUcl1G-gqjBoq3TEknZa-PrJY6QPjJFaRgvZYbbPN7-OMVhfi2-j1D3MzaSR0XaI4BAxHKsjLssbE7LQvvhmdbHTR2vRb_5S9LnRHSsNcHGvEQNLTy_NvzbV31wvwFrUzLpxjzZLAClrOrQTelcF4VOxQ37SNfAWQb6WOfTRDUVdO0.aEjP28K7poOQtD1AsH1xTkyKnyybazBLyL-WgobKVRc',
  data: { practitionerId: 'INFIRMARY.DOCTOR' }
}
[2023-07-11 12:43:10.949] [info]  Artifact: Sending client authorization...
[2023-07-11 12:43:11.747] [info]  {
  baseUrl: 'https://staging-interact.iodinesoftware.com/context/6321ccab543c6404be58998d/1?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOiIxNjg5MDU5NTkxIiwic3ViIjoiSU5GSVJNQVJZLkRPQ1RPUiJ9.ugfmlWERXxll1U0HGvRJyhozs-wlSA3BeJQJsxg_Df8',
  redirectUrl: null,
  apiUrl: 'https://staging-interact.iodinesoftware.com/api/query',
  apiToken: '[redacted]',
  method: null,
  token: '[redacted]',
  patient: null,
  provider: {
    username: 'INFIRMARY.DOCTOR',
    email: 'INFIRMARY.DOCTOR@INFIRMARYHEALTH.org'
  },
  formParameters: {}
} Artifact provider context authorize
[2023-07-11 12:43:20.177] [info]  From Badge factory manager {
  enabled: true,
  properties: {
    height: 35,
    width: 130,
    logo: '',
    backgroundColor: '#7B97B2',
    textColor: '#fff',
    x: 66,
    y: 66
  }
}
[2023-07-11 12:43:20.178] [error] Unhandled Exception UnhandledRejection TypeError: Error processing argument at index 0, conversion failure from 
    at Timeout._onTimeout (/home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:88:12)
[2023-07-11 12:43:21.044] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 12:43:22.397] [info]  { response: 1 }
[2023-07-11 12:43:30.179] [info]  From Badge factory manager {
  enabled: true,
  properties: {
    height: 35,
    width: 130,
    logo: '',
    backgroundColor: '#7B97B2',
    textColor: '#fff',
    x: 66,
    y: 66
  }
}
[2023-07-11 12:43:30.180] [error] Unhandled Exception UnhandledRejection TypeError: Error processing argument at index 0, conversion failure from 
    at Timeout._onTimeout (/home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:88:12)
[2023-07-11 12:43:31.044] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 12:43:32.326] [info]  { response: 1 }
[2023-07-11 12:43:40.180] [info]  From Badge factory manager {
  enabled: true,
  properties: {
    height: 35,
    width: 130,
    logo: '',
    backgroundColor: '#7B97B2',
    textColor: '#fff',
    x: 66,
    y: 66
  }
}
[2023-07-11 12:43:40.181] [error] Unhandled Exception UnhandledRejection TypeError: Error processing argument at index 0, conversion failure from 
    at Timeout._onTimeout (/home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:88:12)
[2023-07-11 12:43:41.044] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 12:43:42.157] [info]  { response: 1 }
[2023-07-11 12:43:50.181] [info]  From Badge factory manager {
  enabled: true,
  properties: {
    height: 35,
    width: 130,
    logo: '',
    backgroundColor: '#7B97B2',
    textColor: '#fff',
    x: 66,
    y: 66
  }
}
[2023-07-11 12:43:50.182] [error] Unhandled Exception UnhandledRejection TypeError: Error processing argument at index 0, conversion failure from 
    at Timeout._onTimeout (/home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:88:12)
[2023-07-11 12:43:51.044] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 12:43:51.979] [info]  { response: 1 }
[2023-07-11 12:44:00.188] [info]  From Badge factory manager {
  enabled: true,
  properties: {
    height: 35,
    width: 130,
    logo: '',
    backgroundColor: '#7B97B2',
    textColor: '#fff',
    x: 66,
    y: 66
  }
}
[2023-07-11 12:44:00.190] [error] Unhandled Exception UnhandledRejection TypeError: Error processing argument at index 0, conversion failure from 
    at Timeout._onTimeout (/home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:88:12)
[2023-07-11 12:44:01.044] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 12:44:02.026] [info]  { response: 1 }
[2023-07-11 12:44:32.465] [info]  Started /home/lnv-75/Documents/insiteFlow/desktop-app-container/test/out AES-128
[2023-07-11 12:48:18.928] [info]  Started /home/lnv-75/Documents/insiteFlow/desktop-app-container/test/out AES-128
[2023-07-11 12:48:21.252] [info]  Found XML file: /home/lnv-75/Documents/insiteFlow/desktop-app-container/test/out/queries_manual_login_test_key.xml... Decrypting and processing.
[2023-07-11 12:48:21.255] [info]  Processing authentication data...
[2023-07-11 12:48:21.255] [info]  Processing auth data string: /INFIRMARY.DOCTOR//1671058352000/
[2023-07-11 12:48:21.256] [info]  Initializing badge for user...
[2023-07-11 12:48:21.256] [info]  get-config {
  message: { practitionerId: 'INFIRMARY.DOCTOR', type: 'Login', patient: {} }
} Publish notification
[2023-07-11 12:48:21.259] [info]  Checking for config file: /home/lnv-75/config.json
[2023-07-11 12:48:21.260] [info]  Checking for config file: /home/lnv-75/Documents/config.json
[2023-07-11 12:48:21.261] [info]  Checking for config file: /home/lnv-75/Documents/insiteFlow/config.json
[2023-07-11 12:48:21.261] [info]  Checking for config file: /home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/native_modules/config.json
[2023-07-11 12:48:21.262] [info]  Config file found at path: /home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/native_modules/config.json
[2023-07-11 12:48:21.262] [info]  Version:  1.0.32
[2023-07-11 12:48:22.578] [info]  {
  access_token: 'eyJhbGciOiJSU0EtT0FFUCIsImVuYyI6IkEyNTZDQkMtSFM1MTIiLCJraWQiOiJBRkFENDNBMTNCRUFFRDA1QUVGQjNGMzA1MzczOEVBMDkyRTVEQjM0IiwidHlwIjoiYXQrand0IiwiY3R5IjoiSldUIn0.A_2b432pdR07ggs8uQ2woE3xaPCLqllu0TRX32v0I_EV7v4aFHNectkKqihKHplXJtbLql0PAxtHuBx17Xi5Jy7K50elNa1vnIbEzAZkxQdAL-KO0QBmBVy1rkwrPTxwIPa-gJEnZXPivGJY8W_a3brFzl3egj_H2X_jojrkx3DzDdWt8mvMQZG6JN87b_jAaCL_qg5Za7i15eYv2FrQQa-EoZBIsnuuLoiOxNcPyYP_QRDQZm3ito6_hSjU-xPU1VAeU-PlI_oSQBITMjpuLLzv6TDMNpVxR39luyeaj-NbYJU4d-t29IlChDu0xR8WVhjD-9RtBunEviDUfpXzuA.jaXKv9ZnTUBL8j2K69D10Q.C-JdVYLMz9RhNaz6PG5C9x9LzXuygFThoNvoF65cGAtXP-DKj3KVmrDBKnw6tOu8NlZf7FnwQBB_yWgx9RXhMwyK9k57I8wYdC3x_-XIWUIa4Vlz-b232N0OZYucDj7Z7o7pJBfGNrmRRdWJAJKG2qtF-VdZk0vTDZhKyVNDCk-iSGdQv1HPv6hUh_ze47ugkZiM7tQ8y3rdt5UC3Nep1ybYIROgb64T7i9KccoP50ctXu6Rz8DF5x9VeB8caswuZOCK7o7tZ_UYObmlaEv7sJB-U-Y013aFQcSCB3vl7ihJTFZw6l8DjdnKKC9ei2m2qy3JBLmwi8czrNvDUMapol-9BXpfjV63bgnUOMj_6R2iKoqaaVjo-1MUbBT0BeOyGKagV1YQL-4xY-fs-c3cBd_e2gdKucapqJZHfV0vdI9L2s3cT5rbbBjQImDnuGKE9JxU1F3kDTKbnwddOgVydaK9qr5XiV3YgsEHVDY_7iYcWYef1rgvo9HlBemlE4gbZlJwtHbjoaa3Tfd6Yiip6cUm0WrTeeVS2C7f5a0MFgPbWUBd_BQ-wNs6aWh1N-yRetsw9Rzo5qrMY6bhpjpfd_uRwF3pkXXn9w1mchGlbUBYkXq47OuVZCJqbGqvh5Dvf3gCNNFGWpn6_lcy3eKSuq36a5FjgBsWIgDnxvFQ0BK4Xov3_Owz1nu_NMCEtC9mcpdYVlvN9ZMIm417HcDiBrikXjgzuAdzQtoKiCLyCRJA_TnLB4xHk5WHNeAQUf0Mq-BaXVTXTIupTnQWScp3hh9tcxpPVUAD6bw-a18FFsrQIPKACTmWihwSRIyP2azjqEFkSOkVLZcjMG2o-bWkRP9BpCcG31ociJ74smSMx4BAA6U6ENmpBG8IbX6EKz9J1cISjXp4oUXVWuGTToU5x46JAG_XF0jv-1jKgNwZTQxcMNVisqKte-8oo8XUstPDBWzYBDuWixvHtr8UV_Q-UUNZuP_VDfuaKLTvEtxYpVofXTybCny33O9e4RHTmmzt1f8OCuBF74Vw7IgmKk_YRdw52fWS7RdSGCWT-M84imRPC3JkD---8fxIQZLSl7Q2kt4m6nkJIUBimLNfwNtZFXXz7t741f5s6Cv4qqyF3sgDOdVeyN6qtg8ILG3GDO4OU_2BXF7eRXv4GC9i6c5SQhi89ueEbApFSlx_1_rQ1xONUFZc3BLVAleh6hOwC-6oTs8cyg3L2Yhp-npyRqVFqny0lRR-_gk40E4EkWzGe9Ot7eudXtdm8qMgfD0u3hmpzSvrLgUUSIQy9irWI7Ih2Ei7R3HJLFpBSwJe-RMJ5Rc.PJUhq_Dshi8Xvntz7QpcAWVBpxyrepTU3V0pieCze8w',
  token_type: 'Bearer',
  expires_in: 604800
} OAuth Connect
[2023-07-11 12:48:22.579] [info]  Base: Fetching facility clients...
[2023-07-11 12:48:23.758] [info]  [
  {
    id: '49d84548-8786-4f33-8274-58f4a1e08ce6',
    name: 'artifact',
    iconURL: '',
    appPluginURL: '',
    authMethod: 'OAuth',
    patientContext: false,
    roleConstraints: false
  }
] Facility clients
[2023-07-11 12:48:23.773] [info]  Checking for config file: /home/lnv-75/config.json
[2023-07-11 12:48:23.774] [info]  Checking for config file: /home/lnv-75/Documents/config.json
[2023-07-11 12:48:23.774] [info]  Checking for config file: /home/lnv-75/Documents/insiteFlow/config.json
[2023-07-11 12:48:23.774] [info]  Checking for config file: /home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/native_modules/config.json
[2023-07-11 12:48:23.775] [info]  Config file found at path: /home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/native_modules/config.json
[2023-07-11 12:48:23.775] [info]  Checking for config file: /home/lnv-75/config.json
[2023-07-11 12:48:23.776] [info]  Checking for config file: /home/lnv-75/Documents/config.json
[2023-07-11 12:48:23.776] [info]  Checking for config file: /home/lnv-75/Documents/insiteFlow/config.json
[2023-07-11 12:48:23.776] [info]  Checking for config file: /home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/native_modules/config.json
[2023-07-11 12:48:23.777] [info]  Config file found at path: /home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/native_modules/config.json
[2023-07-11 12:48:23.789] [info]  login { practitionerId: 'INFIRMARY.DOCTOR', type: 'Login', patient: {} } Publish notification
[2023-07-11 12:48:23.791] [error] Unhandled Exception UnhandledRejection TypeError: Cannot read properties of undefined (reading 'loadURL')
    at /home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1387:27
    at /home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:20780:23
    at /home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:21628:11
    at baseForOwn (/home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:20094:20)
    at /home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:21590:14
    at baseMap (/home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:20779:3)
    at map (/home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:40622:10)
    at EventEmitter.<anonymous> (/home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1383:21)
    at EventEmitter.emit (node:events:525:35)
    at NotificationServiceFactory.emitter.publish (/home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1865:24)
[2023-07-11 12:49:45.713] [info]  Started /home/lnv-75/Documents/insiteFlow/desktop-app-container/test/out AES-128
[2023-07-11 12:49:45.723] [info]  Found XML file: /home/lnv-75/Documents/insiteFlow/desktop-app-container/test/out/queries_manual_login_test_key.xml... Decrypting and processing.
[2023-07-11 12:49:45.727] [info]  Processing authentication data...
[2023-07-11 12:49:45.728] [info]  Processing auth data string: /INFIRMARY.DOCTOR//1671058352000/
[2023-07-11 12:49:45.728] [info]  Initializing badge for user...
[2023-07-11 12:49:45.729] [info]  get-config {
  message: { practitionerId: 'INFIRMARY.DOCTOR', type: 'Login', patient: {} }
} Publish notification
[2023-07-11 12:49:45.733] [info]  Checking for config file: /home/lnv-75/config.json
[2023-07-11 12:49:45.733] [info]  Checking for config file: /home/lnv-75/Documents/config.json
[2023-07-11 12:49:45.733] [info]  Checking for config file: /home/lnv-75/Documents/insiteFlow/config.json
[2023-07-11 12:49:45.734] [info]  Checking for config file: /home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/native_modules/config.json
[2023-07-11 12:49:45.734] [info]  Config file found at path: /home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/native_modules/config.json
[2023-07-11 12:49:45.735] [info]  Version:  1.0.32
[2023-07-11 12:49:47.065] [info]  {
  access_token: 'eyJhbGciOiJSU0EtT0FFUCIsImVuYyI6IkEyNTZDQkMtSFM1MTIiLCJraWQiOiJBRkFENDNBMTNCRUFFRDA1QUVGQjNGMzA1MzczOEVBMDkyRTVEQjM0IiwidHlwIjoiYXQrand0IiwiY3R5IjoiSldUIn0.XJCpzoVweHen3KxqoDXLhar-Zi4dxkCrnp7hQx5o2eAvu9lHg2gFFHUqUx_HZAC4kg8z8v5Yv_cZCPApTtZN_uyB7IcJFkF0_PtIHbEhXmwwYota-ve5Xtz_23TWHmYwXSndb_gLBZ9ZnnFFWNnPmGcMzrfgmtYJdSZMy4N58YpaWqFlytqhpxEDEddYUdurgA5dyJtC-pJQy3btJBGPHbODQsx0hZn0iMiezhlkwFuxXVRcjRYJLv5Bz2c1SmO-pQjdJssR0rzbPumBRrbz1ixYSNCjmYRRbk4i_Ves_wtKPv4QPfvcezqB1a8rZZSiea1b4w1PTIQGiYd7WBQ67w.BWrAUUZBiV3RGkZd3jpCiA.DRg1eQ66RoL8-3oznF9T1Uar_Nk7RShWMBGOXH_vAQMglhmBxEji6kVb44Ej_VvanNzNKV2dqBrSw5MlrceTBqlzckxVQ_5ybVivYAtMtVAaVvhSmXiOKMexequuRsyi-PFHgSL7Ql71atrfMEF6DP49YOx3INrJJS1GHuQoKTWrLhCv7Wx_mc-aaoyLKzOSTkJxqEj5RiOdhk1-dYcjdh1iibQwEMURkndXX2wsi-ZuNwz2BPwcLuzV7Hhn_mRNAmtWkWoKu0GwpR5SW73VTEsGI84aKEmdS0VatmMC8673YdI4TqFwydEBDIp_UqFiGe3paT2BlvqhQqi_UUdtBhyXNB8FKT4msAAE_D4VnqxShAmqKm9ZxFEye7T1Ixh6AYhylGZu24joiEnv8mQDU5HqCUZi_pDDu4jsXqdjy0dogfI7F3eV_bTrkPDbSlBoGh-WhtWAeJK8VscAxkvZSULSf-8P2DJev5_kAaGGtDSNkeyihxRwW2pjcp8yKrE1VerkvH4lCS2fVVn7C6Uq0pzf5OfF9-ON5MoQJV2uva0VSe58VTefCko605iYqQCbR14zWYmHxtOC-kD6Y3vFvqyJfRhC8fdg0NODrEyRSLaZ2NTPrlLRKPerfPcHEThzltV5aEgQxt3gJp6sEgnl5w0gVbfumto1-8tFmzWMqU61h8R4CKUUd1kwBqe1MpUqgd1A7LWg0czXWNYvJfzU8urtosaEuw-SSRNClbyd1xuZj9DuVvdFLXzimungBaIiTpEc9iqYXnDD4_LZ5RJmYErQ0qWkZawD0wVdXofE68ELoZaxdtHxsgsdEFL5I3YspHuTWhxu25DpJwugN_Y7m1e1TsY_Mkx5sAM-tSANqqm7s6A09OEYfSFKEcSyyOqMdsoTQm27BPTrcWEq8BomXukDn4oHowd96glSD3AK2lr6Va41YykuKE5nO_iTdMvmEhVwT2B0HLzCY7wvo_V91LnLK-q3UWCH0VhumNaw3K4OciaY-pH_UrmBYZu5SMxeAFX6OSFuEEgGjVfFwiRly90wK6xh097fxMCtCb0e2vP1_KdSBK8NPNicraeVdWkfOBaecZAEK_Ppg136UtWmkFIGcF1vAcsKxRjw2jNBOZi9oabkDqQ22Uj04R82a8m9wN5MsCTV_tUKRM2smKaO5lUyoTtvvXRjmurDfM88Uw51fjcwP_rEtbl-iqDIc0GCAzixDc6yx-FOy4Qpx2_CAN86kxN4M81x4ixiwln_Hlw_oss9gX7AkGO824MQ5WDi5qS_qu123XzutNX01lHxiDfFT6afLC4HTQ9wGN4Y8Lw.B1bSjqGR9AwmwUasgQIpFF_aRk19bTFtkk1mgPo1LSQ',
  token_type: 'Bearer',
  expires_in: 604799
} OAuth Connect
[2023-07-11 12:49:47.066] [info]  Base: Fetching facility clients...
[2023-07-11 12:49:48.501] [info]  [
  {
    id: '49d84548-8786-4f33-8274-58f4a1e08ce6',
    name: 'artifact',
    iconURL: '',
    appPluginURL: '',
    authMethod: 'OAuth',
    patientContext: false,
    roleConstraints: false
  }
] Facility clients
[2023-07-11 12:49:48.517] [info]  Checking for config file: /home/lnv-75/config.json
[2023-07-11 12:49:48.519] [info]  Checking for config file: /home/lnv-75/Documents/config.json
[2023-07-11 12:49:48.519] [info]  Checking for config file: /home/lnv-75/Documents/insiteFlow/config.json
[2023-07-11 12:49:48.519] [info]  Checking for config file: /home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/native_modules/config.json
[2023-07-11 12:49:48.520] [info]  Config file found at path: /home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/native_modules/config.json
[2023-07-11 12:49:48.521] [info]  Checking for config file: /home/lnv-75/config.json
[2023-07-11 12:49:48.521] [info]  Checking for config file: /home/lnv-75/Documents/config.json
[2023-07-11 12:49:48.521] [info]  Checking for config file: /home/lnv-75/Documents/insiteFlow/config.json
[2023-07-11 12:49:48.521] [info]  Checking for config file: /home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/native_modules/config.json
[2023-07-11 12:49:48.522] [info]  Config file found at path: /home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/native_modules/config.json
[2023-07-11 12:49:48.538] [info]  login { practitionerId: 'INFIRMARY.DOCTOR', type: 'Login', patient: {} } Publish notification
[2023-07-11 12:49:48.539] [error] Unhandled Exception UnhandledRejection TypeError: Cannot read properties of undefined (reading 'loadURL')
    at /home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1387:27
    at /home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:20780:23
    at /home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:21628:11
    at baseForOwn (/home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:20094:20)
    at /home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:21590:14
    at baseMap (/home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:20779:3)
    at map (/home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:40622:10)
    at EventEmitter.<anonymous> (/home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1383:21)
    at EventEmitter.emit (node:events:525:35)
    at NotificationServiceFactory.emitter.publish (/home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1865:24)
[2023-07-11 13:08:12.136] [info]  Started /home/lnv-75/Documents/insiteFlow/desktop-app-container/test/out AES-128
[2023-07-11 13:08:12.144] [info]  Found XML file: /home/lnv-75/Documents/insiteFlow/desktop-app-container/test/out/queries_manual_login_test_key.xml... Decrypting and processing.
[2023-07-11 13:08:12.147] [info]  Processing authentication data...
[2023-07-11 13:08:12.148] [info]  Processing auth data string: /INFIRMARY.DOCTOR//1671058352000/
[2023-07-11 13:08:12.148] [info]  Initializing badge for user...
[2023-07-11 13:08:12.149] [info]  get-config {
  message: { practitionerId: 'INFIRMARY.DOCTOR', type: 'Login', patient: {} }
} Publish notification
[2023-07-11 13:08:12.153] [info]  Checking for config file: /home/lnv-75/config.json
[2023-07-11 13:08:12.154] [info]  Checking for config file: /home/lnv-75/Documents/config.json
[2023-07-11 13:08:12.155] [info]  Checking for config file: /home/lnv-75/Documents/insiteFlow/config.json
[2023-07-11 13:08:12.155] [info]  Checking for config file: /home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/native_modules/config.json
[2023-07-11 13:08:12.156] [info]  Config file found at path: /home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/native_modules/config.json
[2023-07-11 13:08:12.156] [info]  Version:  1.0.32
[2023-07-11 13:08:13.435] [info]  {
  access_token: 'eyJhbGciOiJSU0EtT0FFUCIsImVuYyI6IkEyNTZDQkMtSFM1MTIiLCJraWQiOiJBRkFENDNBMTNCRUFFRDA1QUVGQjNGMzA1MzczOEVBMDkyRTVEQjM0IiwidHlwIjoiYXQrand0IiwiY3R5IjoiSldUIn0.STpW1M_6RKZ5lJKCkquVO-RYatahpMDWpEPV5fSD8psLxMDb3uDlFNXr9TqCHD8qpwjEAUIW7juPwVUIsMEDnaz3_uIUTOVYPKYACczIZMT3e2eR3g_7q9WcsMvs1SGkbdxgHsWevmTy7XcMPNZOI3pKzpsmjkGXRGg74SXYAafKj5s7fN7e0R8qRvgIOTgFAoseJW2nG2vhFiGMZ-u72XxKro-K_VKblpEByPFJbENtCjW8B2qSD8bLC1Bci85ow3JbCzI0-1EtIaS0K3j4vfokwW78YmrR0pWq7u_KePyGPi4TC7aqtRN9F9C6A7WrDHfx9x9q5ecgngA7lBnFOg.ocQ-wNYaHGxbVxHNdrTMiw.jrfLAmoYYYKPUSdznP6w6wfeU8e_sfKOGLEQ7xmusSD4G454odoZzjeGZmgarUP0KShMXWFZipdaez-cCvAwwgQeAl-YKGM3w-W8nSG6x9Xb3YGy9pYFUVlz2A3IuYEpnQ27GbbXNMzeXalmaVNubCwZlEnkALjLZuVGloL6jlTgkvVlgXTIrIcaAlqWI6H1TjNlHiwKW750eOyVd8yCFXuzr6ihBoz28MQMALPEdrD6CMxydetyZrkoCjARzfTqM1LQwu86bu-v7gIbtrN_toljgxAqVZSb67FzxPx-aMh_eadTAPW6NESWtqCyOkqvvPsQ0hT_Z8MyAw6mr1HNNHMq4ONUCNcNkBSqk_A1tueT3rHCledWQF8HZPXuNkV0V1ULfVyGadhrofqngC4-r0-HHrBNExgophT2ath9eDRPtOAFCsfNpT-wQRf29R02ySZX1LXzbo3om_JktLvgJ1iTOvQYGnQqDhuMsEsIyjCGKmrKAVBSe19zrmpvziTVCOVjdOSmdkTxRY88wboLf13kf5n61QQGVaVrxSXqCWbqlVkcMSHPaEqjMH1LtfaSRAJuX2-FOULcNDbM_dfBHuYE3sj6CCRnRe7Ot8sK_meToob84HlaCR4VOBuHqpKRXL_Ttd2SQBGLuTFvawmUaeSONM0ydEYqwFLz4jRNXw-DdERGe_T2LFVMjM5W61-S94oXYWJqCvae-f3zAKe30zLxmXByeAEErPxXEooIY3iP0uO8Hr8ACngeciOLbg0KNb8qm9L7pFxtGjp36gekZQqdFVWbbsF6ppwdcnCWPPJTgwiuogIkrMf49b6yZ4FOZeIs-8qP_DbNruxJQKYk7VEoWQ7FqmTC0jPGojh0bt21k4dhUMtnNoiVZxoaYfqvoLp9jiNc-CVDfe6-MUZiKGzCGjr9I75OO3MUw7By16LGFraIAzzL6cWDYF49N1Q5E4qqTM9ebQZgiZSWlZ7C1R18KaZtXr1PC2TcZJKvxmj3J3Rx0JKxyDw-O4AVScqDpwiRcfWVsETnIwK8nxTbo8LFD2nqfNXDJDIcy0bYwRIyiwEIs653QwVTZ5TUuIUSDOu8E7vSe-g8rLQsftmrX3kXL9pCu88lQ8IZNb5Fz-HFYXRJPFP6rfDQaFLvB-3c-Uh0yfnfHu_pzYxFEb7pUIoDLDTAHlsOgTHutGCbJ2-gvOZHiYrC2wR9wIwzY0Y804wOrt5O2QwBFOWnJCsELmNpK64qT1PtzZeILYOoV-4WYEflCFjPIf7sz8fTECA_EetC2Q47RWgWDcFLZK_qCtaa0VvPanKxXl7hu6rTKAM.WmeOe1Qhcj4duCaZPFt8UZ8MpyHT1ZZXS-3J-iK4YMo',
  token_type: 'Bearer',
  expires_in: 604800
} OAuth Connect
[2023-07-11 13:08:13.435] [info]  Base: Fetching facility clients...
[2023-07-11 13:08:14.350] [info]  [
  {
    id: '49d84548-8786-4f33-8274-58f4a1e08ce6',
    name: 'artifact',
    iconURL: '',
    appPluginURL: '',
    authMethod: 'OAuth',
    patientContext: false,
    roleConstraints: false
  }
] Facility clients
[2023-07-11 13:08:14.370] [info]  Checking for config file: /home/lnv-75/config.json
[2023-07-11 13:08:14.372] [info]  Checking for config file: /home/lnv-75/Documents/config.json
[2023-07-11 13:08:14.372] [info]  Checking for config file: /home/lnv-75/Documents/insiteFlow/config.json
[2023-07-11 13:08:14.372] [info]  Checking for config file: /home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/native_modules/config.json
[2023-07-11 13:08:14.372] [info]  Config file found at path: /home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/native_modules/config.json
[2023-07-11 13:08:14.373] [info]  Checking for config file: /home/lnv-75/config.json
[2023-07-11 13:08:14.374] [info]  Checking for config file: /home/lnv-75/Documents/config.json
[2023-07-11 13:08:14.374] [info]  Checking for config file: /home/lnv-75/Documents/insiteFlow/config.json
[2023-07-11 13:08:14.374] [info]  Checking for config file: /home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/native_modules/config.json
[2023-07-11 13:08:14.374] [info]  Config file found at path: /home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/native_modules/config.json
[2023-07-11 13:08:14.392] [info]  login { practitionerId: 'INFIRMARY.DOCTOR', type: 'Login', patient: {} } Publish notification
[2023-07-11 13:08:19.655] [info]  config>>> {
  token: 'eyJhbGciOiJSU0EtT0FFUCIsImVuYyI6IkEyNTZDQkMtSFM1MTIiLCJraWQiOiJBRkFENDNBMTNCRUFFRDA1QUVGQjNGMzA1MzczOEVBMDkyRTVEQjM0IiwidHlwIjoiYXQrand0IiwiY3R5IjoiSldUIn0.STpW1M_6RKZ5lJKCkquVO-RYatahpMDWpEPV5fSD8psLxMDb3uDlFNXr9TqCHD8qpwjEAUIW7juPwVUIsMEDnaz3_uIUTOVYPKYACczIZMT3e2eR3g_7q9WcsMvs1SGkbdxgHsWevmTy7XcMPNZOI3pKzpsmjkGXRGg74SXYAafKj5s7fN7e0R8qRvgIOTgFAoseJW2nG2vhFiGMZ-u72XxKro-K_VKblpEByPFJbENtCjW8B2qSD8bLC1Bci85ow3JbCzI0-1EtIaS0K3j4vfokwW78YmrR0pWq7u_KePyGPi4TC7aqtRN9F9C6A7WrDHfx9x9q5ecgngA7lBnFOg.ocQ-wNYaHGxbVxHNdrTMiw.jrfLAmoYYYKPUSdznP6w6wfeU8e_sfKOGLEQ7xmusSD4G454odoZzjeGZmgarUP0KShMXWFZipdaez-cCvAwwgQeAl-YKGM3w-W8nSG6x9Xb3YGy9pYFUVlz2A3IuYEpnQ27GbbXNMzeXalmaVNubCwZlEnkALjLZuVGloL6jlTgkvVlgXTIrIcaAlqWI6H1TjNlHiwKW750eOyVd8yCFXuzr6ihBoz28MQMALPEdrD6CMxydetyZrkoCjARzfTqM1LQwu86bu-v7gIbtrN_toljgxAqVZSb67FzxPx-aMh_eadTAPW6NESWtqCyOkqvvPsQ0hT_Z8MyAw6mr1HNNHMq4ONUCNcNkBSqk_A1tueT3rHCledWQF8HZPXuNkV0V1ULfVyGadhrofqngC4-r0-HHrBNExgophT2ath9eDRPtOAFCsfNpT-wQRf29R02ySZX1LXzbo3om_JktLvgJ1iTOvQYGnQqDhuMsEsIyjCGKmrKAVBSe19zrmpvziTVCOVjdOSmdkTxRY88wboLf13kf5n61QQGVaVrxSXqCWbqlVkcMSHPaEqjMH1LtfaSRAJuX2-FOULcNDbM_dfBHuYE3sj6CCRnRe7Ot8sK_meToob84HlaCR4VOBuHqpKRXL_Ttd2SQBGLuTFvawmUaeSONM0ydEYqwFLz4jRNXw-DdERGe_T2LFVMjM5W61-S94oXYWJqCvae-f3zAKe30zLxmXByeAEErPxXEooIY3iP0uO8Hr8ACngeciOLbg0KNb8qm9L7pFxtGjp36gekZQqdFVWbbsF6ppwdcnCWPPJTgwiuogIkrMf49b6yZ4FOZeIs-8qP_DbNruxJQKYk7VEoWQ7FqmTC0jPGojh0bt21k4dhUMtnNoiVZxoaYfqvoLp9jiNc-CVDfe6-MUZiKGzCGjr9I75OO3MUw7By16LGFraIAzzL6cWDYF49N1Q5E4qqTM9ebQZgiZSWlZ7C1R18KaZtXr1PC2TcZJKvxmj3J3Rx0JKxyDw-O4AVScqDpwiRcfWVsETnIwK8nxTbo8LFD2nqfNXDJDIcy0bYwRIyiwEIs653QwVTZ5TUuIUSDOu8E7vSe-g8rLQsftmrX3kXL9pCu88lQ8IZNb5Fz-HFYXRJPFP6rfDQaFLvB-3c-Uh0yfnfHu_pzYxFEb7pUIoDLDTAHlsOgTHutGCbJ2-gvOZHiYrC2wR9wIwzY0Y804wOrt5O2QwBFOWnJCsELmNpK64qT1PtzZeILYOoV-4WYEflCFjPIf7sz8fTECA_EetC2Q47RWgWDcFLZK_qCtaa0VvPanKxXl7hu6rTKAM.WmeOe1Qhcj4duCaZPFt8UZ8MpyHT1ZZXS-3J-iK4YMo',
  data: { practitionerId: 'INFIRMARY.DOCTOR' }
}
[2023-07-11 13:08:19.656] [info]  Artifact: Sending client authorization...
[2023-07-11 13:08:20.595] [info]  {
  baseUrl: 'https://staging-interact.iodinesoftware.com/context/6321ccab543c6404be58998d/1?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOiIxNjg5MDYxMTAwIiwic3ViIjoiSU5GSVJNQVJZLkRPQ1RPUiJ9.fEidpKnhSSv2g-GnIq4NRPo_OJ8at0N4rC_eailI8KA',
  redirectUrl: null,
  apiUrl: 'https://staging-interact.iodinesoftware.com/api/query',
  apiToken: '[redacted]',
  method: null,
  token: '[redacted]',
  patient: null,
  provider: {
    username: 'INFIRMARY.DOCTOR',
    email: 'INFIRMARY.DOCTOR@INFIRMARYHEALTH.org'
  },
  formParameters: {}
} Artifact provider context authorize
[2023-07-11 13:08:29.718] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 13:08:30.838] [info]  { response: 1 }
[2023-07-11 13:08:39.718] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 13:08:40.540] [info]  { response: 1 }
[2023-07-11 13:08:47.942] [info]  BOTH ARE NOT SAME 
[2023-07-11 13:08:49.718] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 13:08:50.398] [info]  { response: 1 }
[2023-07-11 13:08:54.417] [info]  From Badge factory manager {
  enabled: true,
  properties: {
    height: 50,
    width: 130,
    logo: '',
    backgroundColor: '#7B97B2',
    textColor: '#fff',
    x: 66,
    y: 66
  }
}
[2023-07-11 13:08:54.419] [error] Unhandled Exception UnhandledRejection TypeError: Error processing argument at index 0, conversion failure from 
    at Timeout._onTimeout (/home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:91:16)
[2023-07-11 13:08:59.718] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 13:09:00.541] [info]  { response: 1 }
[2023-07-11 13:09:09.718] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 13:09:10.671] [info]  { response: 1 }
[2023-07-11 13:09:19.720] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 13:09:20.603] [info]  { response: 1 }
[2023-07-11 13:09:29.718] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 13:09:30.497] [info]  { response: 1 }
[2023-07-11 13:09:39.718] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 13:09:40.578] [info]  { response: 1 }
[2023-07-11 13:09:49.719] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 13:09:50.715] [info]  { response: 1 }
[2023-07-11 13:09:59.718] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 13:10:00.481] [info]  { response: 1 }
[2023-07-11 13:10:09.721] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 13:10:10.599] [info]  { response: 1 }
[2023-07-11 13:10:19.718] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 13:10:20.443] [info]  { response: 1 }
[2023-07-11 13:10:29.722] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 13:10:30.548] [info]  { response: 1 }
[2023-07-11 13:10:39.718] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 13:10:40.576] [info]  { response: 1 }
[2023-07-11 13:11:11.601] [info]  Started /home/lnv-75/Documents/insiteFlow/desktop-app-container/test/out AES-128
[2023-07-11 13:11:13.827] [info]  Found XML file: /home/lnv-75/Documents/insiteFlow/desktop-app-container/test/out/queries_manual_login_test_key.xml... Decrypting and processing.
[2023-07-11 13:11:13.832] [info]  Processing authentication data...
[2023-07-11 13:11:13.833] [info]  Processing auth data string: /INFIRMARY.DOCTOR//1671058352000/
[2023-07-11 13:11:13.834] [info]  Initializing badge for user...
[2023-07-11 13:11:13.834] [info]  get-config {
  message: { practitionerId: 'INFIRMARY.DOCTOR', type: 'Login', patient: {} }
} Publish notification
[2023-07-11 13:11:13.837] [info]  Checking for config file: /home/lnv-75/config.json
[2023-07-11 13:11:13.838] [info]  Checking for config file: /home/lnv-75/Documents/config.json
[2023-07-11 13:11:13.838] [info]  Checking for config file: /home/lnv-75/Documents/insiteFlow/config.json
[2023-07-11 13:11:13.838] [info]  Checking for config file: /home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/native_modules/config.json
[2023-07-11 13:11:13.839] [info]  Config file found at path: /home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/native_modules/config.json
[2023-07-11 13:11:13.839] [info]  Version:  1.0.32
[2023-07-11 13:11:15.096] [info]  {
  access_token: 'eyJhbGciOiJSU0EtT0FFUCIsImVuYyI6IkEyNTZDQkMtSFM1MTIiLCJraWQiOiJBRkFENDNBMTNCRUFFRDA1QUVGQjNGMzA1MzczOEVBMDkyRTVEQjM0IiwidHlwIjoiYXQrand0IiwiY3R5IjoiSldUIn0.d-PuPeTeosoze_J59HKJB5vB3ZQ-3d577F4kixg3vCWBQHVOh_vvPAzel9i7u7wa4XU0Wqy9SI1bB146-oWKsqGVWfiHFoUFC4kMXcAFhjb9kZqS7ZqnhOPU8l3pZIc5JSMwjU89Lsixk_24zRlpEZqaIdcE_NAvrdr3LoRuqwjwiZOlby0K9jD41SnQA-zO5sl2iyX7TV4HaJzt5T05iMueMcMoBGTFHaOG-r4tLBA_Feru4jJZyWgjBTf03L0fM6X-AJsnwBHwW1N-aYR1UQagP91doHW2vlSxjZoM-uQ_pPmDBGgrrZbHOEau7F6awFHO4ugVmZ8LwVfPToUw_Q.r8lNYw7atl5jkGfpRWC1MQ.yTNcPA0BHByVncwxFO7CzaHTSuPWduTCmypFNmYd8PkQBHTTTS4pCv0eXDs7naTp5EXCDj0viIZ8kcm2UjCvWmEuZdC_vZ197ynq9KssQxApKjN_544a-8d6z-VtFbvgoxU0kkjCZunN2bD1b6BtBhYt6v6ofQIdXZEggSie2Km0hBOZgMMltbpUkmCOUpiBKv_7nWkM8czIESPgpAYD1JH11tGI07URSwm2-KxW9b9EgPtP22BSx_paZHvc3CeSc8IBfaeNMOnqN-qco2CCl-wRcfaSjt8kDQzvsU2gZi0HZawpedZ3d8U7PaIPyeSDbO6nC-NmIcSECrh_7-QjJb2C8XJGN519mEYLmhUlOvyfyDnQ8BAzjwR_0t0yiwGa38X8PbGsyTpa17mq5K4Ksg1WoKtyaSZT2qU0_U17yzwsrprO48bQAbRMUR0i0LgpdbZl31eDHdIY2el9ArjlPglZbGOPb-3zYqMXSLgrM-xCCpND9t8plt_4mz1ekHIifugqf6Hhtm_a0VauXAhuNBcwubk0qk_JNgPtZo5xHKGlHRx0uAdlv9VOTVoJ_XabN-3jGpv1IHkSm6q4iBIof3eoGby9VVSVdtknbvIaBQxOXJopwRAMc8OeOuFfVDFnNf3Pe7PdeBciBhK0daP9GArE5y8f25GuhhbrXu5-fuIe75jzEfu7p_hppnaKZQNOJB2VBWedHbhDke7f_LPwYxVyCNfuM6S5uggQrfV44iNKhcJLYBeZA9RHag4TE9JttN98BwbMDn8NH4qIGy4nWdhq8u7lYxTUoVUk5_79IufTFUKfI1mXlcVn8edTkkwOIvJbU7cOhHsCEEbBhVMTyBmzZDroKhK2PapFWIaXM0AYd7Gb93AsdVdQ71dLY3EK7Tud9RZb_2Jk17AVy7BrX_hG0kGzXACFnRrW52rvoiJk6REHS7QUFJtvEzeUsm8E695hoVPJPEe4j_bF1gl3ZUTDTqe9V1SV4Zg6zFl3PL822lfYaxsT0NSi3iuLZXYzrbPzrCljgjuQCzTbbFi7A4EbJ1MFeeBNx8_wbxnr-drrmHm6qks7fp1CJWbvVjY-1v3BLS_OYgc9wcmhQzpTqYR8pNEHuDFSA_bFGLMaYntDgyAVui4pE8UEAg-V3M01q7ZATbNGXAZSf2wZlaeDG1iQLp-nMgRdHdS6hLnd6_IVwjiieYfXyWOD0iRSS7p3d8Tdk6TTTdXgC2S03Vnoda81jia7l_9cX04wepqpW6dESzu0JiiG94ysycyhjBeuN-nAG3jVGptrDncxXpJ5vEYm5RSHTIqQ2RBT0MUnwe8.beCm39uOVjVdGtyYyc9POoLAjM9-9JQso4vfRCy7Hzo',
  token_type: 'Bearer',
  expires_in: 604799
} OAuth Connect
[2023-07-11 13:11:15.096] [info]  Base: Fetching facility clients...
[2023-07-11 13:11:16.319] [info]  [
  {
    id: '49d84548-8786-4f33-8274-58f4a1e08ce6',
    name: 'artifact',
    iconURL: '',
    appPluginURL: '',
    authMethod: 'OAuth',
    patientContext: false,
    roleConstraints: false
  }
] Facility clients
[2023-07-11 13:11:16.350] [info]  Checking for config file: /home/lnv-75/config.json
[2023-07-11 13:11:16.353] [info]  Checking for config file: /home/lnv-75/Documents/config.json
[2023-07-11 13:11:16.354] [info]  Checking for config file: /home/lnv-75/Documents/insiteFlow/config.json
[2023-07-11 13:11:16.354] [info]  Checking for config file: /home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/native_modules/config.json
[2023-07-11 13:11:16.354] [info]  Config file found at path: /home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/native_modules/config.json
[2023-07-11 13:11:16.355] [info]  Checking for config file: /home/lnv-75/config.json
[2023-07-11 13:11:16.356] [info]  Checking for config file: /home/lnv-75/Documents/config.json
[2023-07-11 13:11:16.356] [info]  Checking for config file: /home/lnv-75/Documents/insiteFlow/config.json
[2023-07-11 13:11:16.356] [info]  Checking for config file: /home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/native_modules/config.json
[2023-07-11 13:11:16.357] [info]  Config file found at path: /home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/native_modules/config.json
[2023-07-11 13:11:16.370] [info]  login { practitionerId: 'INFIRMARY.DOCTOR', type: 'Login', patient: {} } Publish notification
[2023-07-11 13:11:20.057] [info]  config>>> {
  token: 'eyJhbGciOiJSU0EtT0FFUCIsImVuYyI6IkEyNTZDQkMtSFM1MTIiLCJraWQiOiJBRkFENDNBMTNCRUFFRDA1QUVGQjNGMzA1MzczOEVBMDkyRTVEQjM0IiwidHlwIjoiYXQrand0IiwiY3R5IjoiSldUIn0.d-PuPeTeosoze_J59HKJB5vB3ZQ-3d577F4kixg3vCWBQHVOh_vvPAzel9i7u7wa4XU0Wqy9SI1bB146-oWKsqGVWfiHFoUFC4kMXcAFhjb9kZqS7ZqnhOPU8l3pZIc5JSMwjU89Lsixk_24zRlpEZqaIdcE_NAvrdr3LoRuqwjwiZOlby0K9jD41SnQA-zO5sl2iyX7TV4HaJzt5T05iMueMcMoBGTFHaOG-r4tLBA_Feru4jJZyWgjBTf03L0fM6X-AJsnwBHwW1N-aYR1UQagP91doHW2vlSxjZoM-uQ_pPmDBGgrrZbHOEau7F6awFHO4ugVmZ8LwVfPToUw_Q.r8lNYw7atl5jkGfpRWC1MQ.yTNcPA0BHByVncwxFO7CzaHTSuPWduTCmypFNmYd8PkQBHTTTS4pCv0eXDs7naTp5EXCDj0viIZ8kcm2UjCvWmEuZdC_vZ197ynq9KssQxApKjN_544a-8d6z-VtFbvgoxU0kkjCZunN2bD1b6BtBhYt6v6ofQIdXZEggSie2Km0hBOZgMMltbpUkmCOUpiBKv_7nWkM8czIESPgpAYD1JH11tGI07URSwm2-KxW9b9EgPtP22BSx_paZHvc3CeSc8IBfaeNMOnqN-qco2CCl-wRcfaSjt8kDQzvsU2gZi0HZawpedZ3d8U7PaIPyeSDbO6nC-NmIcSECrh_7-QjJb2C8XJGN519mEYLmhUlOvyfyDnQ8BAzjwR_0t0yiwGa38X8PbGsyTpa17mq5K4Ksg1WoKtyaSZT2qU0_U17yzwsrprO48bQAbRMUR0i0LgpdbZl31eDHdIY2el9ArjlPglZbGOPb-3zYqMXSLgrM-xCCpND9t8plt_4mz1ekHIifugqf6Hhtm_a0VauXAhuNBcwubk0qk_JNgPtZo5xHKGlHRx0uAdlv9VOTVoJ_XabN-3jGpv1IHkSm6q4iBIof3eoGby9VVSVdtknbvIaBQxOXJopwRAMc8OeOuFfVDFnNf3Pe7PdeBciBhK0daP9GArE5y8f25GuhhbrXu5-fuIe75jzEfu7p_hppnaKZQNOJB2VBWedHbhDke7f_LPwYxVyCNfuM6S5uggQrfV44iNKhcJLYBeZA9RHag4TE9JttN98BwbMDn8NH4qIGy4nWdhq8u7lYxTUoVUk5_79IufTFUKfI1mXlcVn8edTkkwOIvJbU7cOhHsCEEbBhVMTyBmzZDroKhK2PapFWIaXM0AYd7Gb93AsdVdQ71dLY3EK7Tud9RZb_2Jk17AVy7BrX_hG0kGzXACFnRrW52rvoiJk6REHS7QUFJtvEzeUsm8E695hoVPJPEe4j_bF1gl3ZUTDTqe9V1SV4Zg6zFl3PL822lfYaxsT0NSi3iuLZXYzrbPzrCljgjuQCzTbbFi7A4EbJ1MFeeBNx8_wbxnr-drrmHm6qks7fp1CJWbvVjY-1v3BLS_OYgc9wcmhQzpTqYR8pNEHuDFSA_bFGLMaYntDgyAVui4pE8UEAg-V3M01q7ZATbNGXAZSf2wZlaeDG1iQLp-nMgRdHdS6hLnd6_IVwjiieYfXyWOD0iRSS7p3d8Tdk6TTTdXgC2S03Vnoda81jia7l_9cX04wepqpW6dESzu0JiiG94ysycyhjBeuN-nAG3jVGptrDncxXpJ5vEYm5RSHTIqQ2RBT0MUnwe8.beCm39uOVjVdGtyYyc9POoLAjM9-9JQso4vfRCy7Hzo',
  data: { practitionerId: 'INFIRMARY.DOCTOR' }
}
[2023-07-11 13:11:20.057] [info]  Artifact: Sending client authorization...
[2023-07-11 13:11:20.926] [info]  {
  baseUrl: 'https://staging-interact.iodinesoftware.com/context/6321ccab543c6404be58998d/1?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOiIxNjg5MDYxMjgwIiwic3ViIjoiSU5GSVJNQVJZLkRPQ1RPUiJ9.ir8TTpW8KKyUx85vJvht0OYu0GXkucQBu1m-XuNZgyQ',
  redirectUrl: null,
  apiUrl: 'https://staging-interact.iodinesoftware.com/api/query',
  apiToken: '[redacted]',
  method: null,
  token: '[redacted]',
  patient: null,
  provider: {
    username: 'INFIRMARY.DOCTOR',
    email: 'INFIRMARY.DOCTOR@INFIRMARYHEALTH.org'
  },
  formParameters: {}
} Artifact provider context authorize
[2023-07-11 13:11:30.120] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 13:11:31.375] [info]  { response: 1 }
[2023-07-11 13:11:40.122] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 13:11:41.035] [info]  { response: 1 }
[2023-07-11 13:11:42.433] [info]  BOTH ARE NOT SAME 
[2023-07-11 13:11:46.391] [info]  From Badge factory manager {
  enabled: true,
  properties: {
    height: 35,
    width: 130,
    logo: '',
    backgroundColor: '#7B97B2',
    textColor: '#fff',
    x: 66,
    y: 66
  }
}
[2023-07-11 13:11:46.393] [error] Unhandled Exception UnhandledRejection TypeError: Error processing argument at index 0, conversion failure from 
    at Timeout._onTimeout (/home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:91:16)
[2023-07-11 13:11:50.120] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 13:11:50.819] [info]  { response: 1 }
[2023-07-11 13:12:00.120] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 13:12:00.962] [info]  { response: 1 }
[2023-07-11 13:12:10.120] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 13:12:11.005] [info]  { response: 1 }
[2023-07-11 13:12:20.120] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 13:12:21.048] [info]  { response: 1 }
[2023-07-11 13:12:30.120] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 13:12:30.888] [info]  { response: 1 }
[2023-07-11 13:12:40.122] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 13:12:41.012] [info]  { response: 1 }
[2023-07-11 13:12:50.120] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 13:12:50.989] [info]  { response: 1 }
[2023-07-11 13:13:00.121] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 13:13:00.776] [info]  { response: 1 }
[2023-07-11 13:13:10.121] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 13:13:11.015] [info]  { response: 1 }
[2023-07-11 13:13:20.121] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 13:13:21.054] [info]  { response: 1 }
[2023-07-11 13:13:30.119] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 13:13:30.872] [info]  { response: 1 }
[2023-07-11 13:13:40.120] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 13:13:41.115] [info]  { response: 1 }
[2023-07-11 13:14:44.752] [info]  Started /home/lnv-75/Documents/insiteFlow/desktop-app-container/test/out AES-128
[2023-07-11 13:14:52.093] [info]  Found XML file: /home/lnv-75/Documents/insiteFlow/desktop-app-container/test/out/queries_manual_login_test_key.xml... Decrypting and processing.
[2023-07-11 13:14:52.097] [info]  Processing authentication data...
[2023-07-11 13:14:52.098] [info]  Processing auth data string: /INFIRMARY.DOCTOR//1671058352000/
[2023-07-11 13:14:52.098] [info]  Initializing badge for user...
[2023-07-11 13:14:52.099] [info]  get-config {
  message: { practitionerId: 'INFIRMARY.DOCTOR', type: 'Login', patient: {} }
} Publish notification
[2023-07-11 13:14:52.104] [info]  Checking for config file: /home/lnv-75/config.json
[2023-07-11 13:14:52.104] [info]  Checking for config file: /home/lnv-75/Documents/config.json
[2023-07-11 13:14:52.105] [info]  Checking for config file: /home/lnv-75/Documents/insiteFlow/config.json
[2023-07-11 13:14:52.114] [info]  Checking for config file: /home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/native_modules/config.json
[2023-07-11 13:14:52.115] [info]  Config file found at path: /home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/native_modules/config.json
[2023-07-11 13:14:52.115] [info]  Version:  1.0.32
[2023-07-11 13:14:53.317] [info]  {
  access_token: 'eyJhbGciOiJSU0EtT0FFUCIsImVuYyI6IkEyNTZDQkMtSFM1MTIiLCJraWQiOiJBRkFENDNBMTNCRUFFRDA1QUVGQjNGMzA1MzczOEVBMDkyRTVEQjM0IiwidHlwIjoiYXQrand0IiwiY3R5IjoiSldUIn0.id3nWzZtDUSR-ObwpjnU_0bULhroyExkhqycEJokxzhuJQiheljCr327sBQdfjQ42jdfwNif_O2_SZMVVLLum2R1awD4ToeghRT5jgRzNKi1QzXj11jdeP6mn7Fi4pbnQqAwf7lZlX1bDdZfr8XxnhHMmssbbPWFVBoYN4k9pS-ZN6j0tQEoXRbSmLMpUzm_V5NvMV_w4vEyZ78uearSL4PYmHSY74XZ2G_tPe7wbfPpg9HtgaylzYpOdhVqbu34C0_OloUr1NpoQH0SildcBcK5Ox6baNrlYtpllm6COw3iaCYlPxCibBYVxZdGoGyIcIx-Xi11l5Gji8roHbHIGA.eumgz2_YVSxQomZ_467KYQ.cY0w6UZgTxcTaU8lVZDXJ-n7iavWe36m78vq69-Rg0U2HM0VHgtrcVZH535bIGB6xBzCRyqDWUjWACsOlqPgOkDzT5L6IpxqAT3njvKLiRpQkXwPwkVhP9lIa9ccPzGY20D4jOAVoLY_XfNe_7PHGsSmvBabvHc33mw5_aX9i58vvZSn68EOdI14dlXiA5rckBOejErn1cBtBvoo02kJ3TKcx3OYlA1e2b4dBnY3UOyQZpMyYTshYHuZCFyZp3fAGoAQ1kcTrHyq0XzY7R95Rl24f6ga_htzS-w36tfBFpPIw1gFVfihGKjyaegvJ0GsgtSSkDydtSbj_MIDGblb89Jc1gkawP_huGwFujOx0ozp62M1vjwtKkOMmk6EuMePydXP9WubDABXqCerHbJ0WuvZ0MDP-5eRJTopywrDT0TIqzOvOtPjlYCpNhVNrNDficNFXKnZLfSUTSdykNx2A7bgH58DBD9e9K6ObcfydaUgsch6zwBr6vfPe85JJaTRe88dTMKpn759F4fWAIL9MuCOJlBfqJu9CcA-DOUdf-d-lrDxG0ux_8FgMe3aVrtk0LvTZoVLuEywlPWvML0M2_-xtFgoO7hQ7z6PbCCNgc7QwF7MDAw8JDykw3r-bCYCenQt-_j1hbgaRwh05vr4ETV0msJ0txwWDMfIgGeUnl-OzERs0tZBmCBF8x1Ys5ZhYEOCwdjZ8r7KUNzZDySWCwl9rvBu5p_Yi6k50BzilTWjcReWtUmYhtqAuUKIJuhzP2mQxWzY3AktJIKktgkd8qnPDZylLmaSMdXMRg1bY9UKZX6pziwkzXWxet8bsihCEoqEQC1LRb2rFlZdEdNSIGFfpVivnPaHxNWHoQU8Z9JrT4m5SfzjgP_r3G_ZRpRvVPJvzsQOx7TPzK_q1fEf2iUeqXXAaqf_50NSxb5e7MvGg82BQIbSEUJ6eI5nNjk18ZWplBSuyDXE-mPqFWlNncvj80Xys5x3UmQZheaLDsGY8nbDs5GDc3-32C7dGnrSwqCUcqTR7Rni2IPmKsF05bEf30HN-KrGXBzWpsL9VzUZOixdngyHERxveyPFoIOhd-hWaEN1hStLshzvb-_XSkqXrkRig2zZWpXIgM-z0yne42qEG_nyXg50d5Y5VI9XD60FbycoGXTbHuu7pUsTj7XpTA38A8cXNkMv24S9i76L3YXGGhRkPDjN9d-uCMvb_vQ_BM_ag10eVkusurMHBsRtYTtexJbdcq0x3dZ0p4vnMFOuRDP-Oq3FI7MrK32lNgN2HGWuiXlAKVsQk9egsoNF_XKKPnRRqHdhaRz90PA.tC9sq_1v4Ju3GC5yvu1sMqb5-xdkK9uTU0ZIOiHRy0w',
  token_type: 'Bearer',
  expires_in: 604800
} OAuth Connect
[2023-07-11 13:14:53.319] [info]  Base: Fetching facility clients...
[2023-07-11 13:14:54.237] [info]  [
  {
    id: '49d84548-8786-4f33-8274-58f4a1e08ce6',
    name: 'artifact',
    iconURL: '',
    appPluginURL: '',
    authMethod: 'OAuth',
    patientContext: false,
    roleConstraints: false
  }
] Facility clients
[2023-07-11 13:14:54.254] [info]  Checking for config file: /home/lnv-75/config.json
[2023-07-11 13:14:54.256] [info]  Checking for config file: /home/lnv-75/Documents/config.json
[2023-07-11 13:14:54.257] [info]  Checking for config file: /home/lnv-75/Documents/insiteFlow/config.json
[2023-07-11 13:14:54.257] [info]  Checking for config file: /home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/native_modules/config.json
[2023-07-11 13:14:54.257] [info]  Config file found at path: /home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/native_modules/config.json
[2023-07-11 13:14:54.258] [info]  Checking for config file: /home/lnv-75/config.json
[2023-07-11 13:14:54.259] [info]  Checking for config file: /home/lnv-75/Documents/config.json
[2023-07-11 13:14:54.259] [info]  Checking for config file: /home/lnv-75/Documents/insiteFlow/config.json
[2023-07-11 13:14:54.259] [info]  Checking for config file: /home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/native_modules/config.json
[2023-07-11 13:14:54.260] [info]  Config file found at path: /home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/native_modules/config.json
[2023-07-11 13:14:54.275] [info]  login { practitionerId: 'INFIRMARY.DOCTOR', type: 'Login', patient: {} } Publish notification
[2023-07-11 13:14:54.746] [info]  config>>> {
  token: 'eyJhbGciOiJSU0EtT0FFUCIsImVuYyI6IkEyNTZDQkMtSFM1MTIiLCJraWQiOiJBRkFENDNBMTNCRUFFRDA1QUVGQjNGMzA1MzczOEVBMDkyRTVEQjM0IiwidHlwIjoiYXQrand0IiwiY3R5IjoiSldUIn0.id3nWzZtDUSR-ObwpjnU_0bULhroyExkhqycEJokxzhuJQiheljCr327sBQdfjQ42jdfwNif_O2_SZMVVLLum2R1awD4ToeghRT5jgRzNKi1QzXj11jdeP6mn7Fi4pbnQqAwf7lZlX1bDdZfr8XxnhHMmssbbPWFVBoYN4k9pS-ZN6j0tQEoXRbSmLMpUzm_V5NvMV_w4vEyZ78uearSL4PYmHSY74XZ2G_tPe7wbfPpg9HtgaylzYpOdhVqbu34C0_OloUr1NpoQH0SildcBcK5Ox6baNrlYtpllm6COw3iaCYlPxCibBYVxZdGoGyIcIx-Xi11l5Gji8roHbHIGA.eumgz2_YVSxQomZ_467KYQ.cY0w6UZgTxcTaU8lVZDXJ-n7iavWe36m78vq69-Rg0U2HM0VHgtrcVZH535bIGB6xBzCRyqDWUjWACsOlqPgOkDzT5L6IpxqAT3njvKLiRpQkXwPwkVhP9lIa9ccPzGY20D4jOAVoLY_XfNe_7PHGsSmvBabvHc33mw5_aX9i58vvZSn68EOdI14dlXiA5rckBOejErn1cBtBvoo02kJ3TKcx3OYlA1e2b4dBnY3UOyQZpMyYTshYHuZCFyZp3fAGoAQ1kcTrHyq0XzY7R95Rl24f6ga_htzS-w36tfBFpPIw1gFVfihGKjyaegvJ0GsgtSSkDydtSbj_MIDGblb89Jc1gkawP_huGwFujOx0ozp62M1vjwtKkOMmk6EuMePydXP9WubDABXqCerHbJ0WuvZ0MDP-5eRJTopywrDT0TIqzOvOtPjlYCpNhVNrNDficNFXKnZLfSUTSdykNx2A7bgH58DBD9e9K6ObcfydaUgsch6zwBr6vfPe85JJaTRe88dTMKpn759F4fWAIL9MuCOJlBfqJu9CcA-DOUdf-d-lrDxG0ux_8FgMe3aVrtk0LvTZoVLuEywlPWvML0M2_-xtFgoO7hQ7z6PbCCNgc7QwF7MDAw8JDykw3r-bCYCenQt-_j1hbgaRwh05vr4ETV0msJ0txwWDMfIgGeUnl-OzERs0tZBmCBF8x1Ys5ZhYEOCwdjZ8r7KUNzZDySWCwl9rvBu5p_Yi6k50BzilTWjcReWtUmYhtqAuUKIJuhzP2mQxWzY3AktJIKktgkd8qnPDZylLmaSMdXMRg1bY9UKZX6pziwkzXWxet8bsihCEoqEQC1LRb2rFlZdEdNSIGFfpVivnPaHxNWHoQU8Z9JrT4m5SfzjgP_r3G_ZRpRvVPJvzsQOx7TPzK_q1fEf2iUeqXXAaqf_50NSxb5e7MvGg82BQIbSEUJ6eI5nNjk18ZWplBSuyDXE-mPqFWlNncvj80Xys5x3UmQZheaLDsGY8nbDs5GDc3-32C7dGnrSwqCUcqTR7Rni2IPmKsF05bEf30HN-KrGXBzWpsL9VzUZOixdngyHERxveyPFoIOhd-hWaEN1hStLshzvb-_XSkqXrkRig2zZWpXIgM-z0yne42qEG_nyXg50d5Y5VI9XD60FbycoGXTbHuu7pUsTj7XpTA38A8cXNkMv24S9i76L3YXGGhRkPDjN9d-uCMvb_vQ_BM_ag10eVkusurMHBsRtYTtexJbdcq0x3dZ0p4vnMFOuRDP-Oq3FI7MrK32lNgN2HGWuiXlAKVsQk9egsoNF_XKKPnRRqHdhaRz90PA.tC9sq_1v4Ju3GC5yvu1sMqb5-xdkK9uTU0ZIOiHRy0w',
  data: { practitionerId: 'INFIRMARY.DOCTOR' }
}
[2023-07-11 13:14:54.748] [info]  Artifact: Sending client authorization...
[2023-07-11 13:14:55.585] [info]  {
  baseUrl: 'https://staging-interact.iodinesoftware.com/context/6321ccab543c6404be58998d/1?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOiIxNjg5MDYxNDk1Iiwic3ViIjoiSU5GSVJNQVJZLkRPQ1RPUiJ9.bzpijCeqe1L8Te31sDBcdjJpB6Bn5BfzTQZmzl8dCxk',
  redirectUrl: null,
  apiUrl: 'https://staging-interact.iodinesoftware.com/api/query',
  apiToken: '[redacted]',
  method: null,
  token: '[redacted]',
  patient: null,
  provider: {
    username: 'INFIRMARY.DOCTOR',
    email: 'INFIRMARY.DOCTOR@INFIRMARYHEALTH.org'
  },
  formParameters: {}
} Artifact provider context authorize
[2023-07-11 13:15:05.085] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 13:15:06.420] [info]  { response: 1 }
[2023-07-11 13:15:15.082] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 13:15:15.449] [info]  BOTH ARE NOT SAME 
[2023-07-11 13:15:15.838] [info]  { response: 1 }
[2023-07-11 13:15:24.300] [info]  From Badge factory manager {
  enabled: true,
  properties: {
    height: 50,
    width: 130,
    logo: '',
    backgroundColor: '#7B97B2',
    textColor: '#fff',
    x: 66,
    y: 66
  }
}
[2023-07-11 13:15:24.301] [info]  HEight and widht is  50 130
[2023-07-11 13:15:24.302] [error] Unhandled Exception UnhandledRejection TypeError: Error processing argument at index 0, conversion failure from 
    at Timeout._onTimeout (/home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:94:16)
[2023-07-11 13:15:25.083] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 13:15:25.732] [info]  { response: 1 }
[2023-07-11 13:15:35.084] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 13:15:35.849] [info]  { response: 1 }
[2023-07-11 13:15:45.082] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 13:15:45.846] [info]  { response: 1 }
[2023-07-11 13:15:55.083] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 13:15:55.774] [info]  { response: 1 }
[2023-07-11 13:16:05.083] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 13:16:06.017] [info]  { response: 1 }
[2023-07-11 13:16:15.084] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 13:16:16.257] [info]  { response: 1 }
[2023-07-11 13:16:25.082] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 13:16:26.013] [info]  { response: 1 }
[2023-07-11 13:16:35.082] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 13:16:36.227] [info]  { response: 1 }
[2023-07-11 13:16:45.085] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 13:16:46.058] [info]  { response: 1 }
[2023-07-11 13:16:55.083] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 13:16:55.992] [info]  { response: 1 }
[2023-07-11 13:17:05.083] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 13:17:06.023] [info]  { response: 1 }
[2023-07-11 13:17:15.083] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 13:17:15.858] [info]  { response: 1 }
[2023-07-11 13:17:25.083] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 13:17:25.902] [info]  { response: 1 }
[2023-07-11 13:17:35.082] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 13:17:36.231] [info]  { response: 1 }
[2023-07-11 13:17:45.083] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 13:17:45.869] [info]  { response: 1 }
[2023-07-11 13:17:55.082] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 13:17:55.988] [info]  { response: 1 }
[2023-07-11 13:18:05.083] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 13:18:05.927] [info]  { response: 1 }
[2023-07-11 13:18:15.083] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 13:18:15.956] [info]  { response: 1 }
[2023-07-11 13:18:25.084] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 13:18:25.924] [info]  { response: 1 }
[2023-07-11 13:18:35.083] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 13:18:36.233] [info]  { response: 1 }
[2023-07-11 13:18:40.541] [info]  BOTH ARE NOT SAME 
[2023-07-11 13:18:44.349] [info]  From Badge factory manager {
  enabled: true,
  properties: {
    height: 35,
    width: 130,
    logo: '',
    backgroundColor: '#7B97B2',
    textColor: '#fff',
    x: 66,
    y: 66
  }
}
[2023-07-11 13:18:44.350] [info]  HEight and widht is  35 130
[2023-07-11 13:18:44.350] [error] Unhandled Exception UnhandledRejection TypeError: Error processing argument at index 0, conversion failure from 
    at Timeout._onTimeout (/home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:94:16)
[2023-07-11 13:18:45.083] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 13:18:46.167] [info]  { response: 1 }
[2023-07-11 13:18:55.083] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 13:18:55.796] [info]  { response: 1 }
[2023-07-11 13:19:05.085] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 13:19:06.039] [info]  { response: 1 }
[2023-07-11 13:19:15.083] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 13:19:15.973] [info]  { response: 1 }
[2023-07-11 13:19:25.083] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 13:19:25.926] [info]  { response: 1 }
[2023-07-11 13:19:35.083] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 13:19:35.939] [info]  { response: 1 }
[2023-07-11 13:19:45.082] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 13:19:45.882] [info]  { response: 1 }
[2023-07-11 13:19:55.083] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 13:19:56.414] [info]  { response: 1 }
[2023-07-11 13:20:05.083] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 13:20:05.839] [info]  { response: 1 }
[2023-07-11 13:20:15.082] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 13:20:16.069] [info]  { response: 1 }
[2023-07-11 13:20:25.083] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 13:20:25.910] [info]  { response: 1 }
[2023-07-11 13:20:35.083] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 13:20:35.941] [info]  { response: 1 }
[2023-07-11 13:20:45.083] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 13:20:45.875] [info]  { response: 1 }
[2023-07-11 13:20:55.082] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 13:20:56.004] [info]  { response: 1 }
[2023-07-11 13:21:05.083] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 13:21:06.143] [info]  { response: 1 }
[2023-07-11 13:21:15.082] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 13:21:15.982] [info]  { response: 1 }
[2023-07-11 13:21:25.082] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 13:21:25.835] [info]  { response: 1 }
[2023-07-11 13:21:35.082] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 13:21:35.743] [info]  { response: 1 }
[2023-07-11 13:21:45.083] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 13:21:45.977] [info]  { response: 1 }
[2023-07-11 13:21:55.082] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 13:21:55.805] [info]  { response: 1 }
[2023-07-11 13:22:05.082] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 13:22:06.297] [info]  { response: 1 }
[2023-07-11 13:22:11.275] [error] Unhandled Exception {
  message: 'Request failed with status code 401',
  name: 'UnhandledRejection AxiosError',
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: '[function] function httpAdapter(config) {\n' +
      '  return new Promise(function dispatchHttpRequest(resolvePromise, rejectPromise) {\n' +
      '    var onCanceled;\n' +
      '    function done() {\n' +
      '      if (config.cancelToken) {\n' +
      '        config.cancelToken.unsubscribe(onCanceled);\n' +
      '      }\n' +
      '      if (config.signal) {\n' +
      "        config.signal.removeEventListener('abort', onCanceled);\n" +
      '      }\n' +
      '    }\n' +
      '    var resolve = function resolve(value) {\n' +
      '      done();\n' +
      '      resolvePromise(value);\n' +
      '    };\n' +
      '    var rejected = false;\n' +
      '    var reject = function reject(value) {\n' +
      '      done();\n' +
      '      rejected = true;\n' +
      '      rejectPromise(value);\n' +
      '    };\n' +
      '    var data = config.data;\n' +
      '    var headers = config.headers;\n' +
      '    var headerNames = {};\n' +
      '    Object.keys(headers).forEach(function storeLowerName(name) {\n' +
      '      headerNames[name.toLowerCase()] = name;\n' +
      '    });\n' +
      '\n' +
      '    // Set User-Agent (required by some servers)\n' +
      '    // See https://github.com/axios/axios/issues/69\n' +
      "    if ('user-agent' in headerNames) {\n" +
      '      // User-Agent is specified; handle case where no UA header is desired\n' +
      "      if (!headers[headerNames['user-agent']]) {\n" +
      "        delete headers[headerNames['user-agent']];\n" +
      '      }\n' +
      '      // Otherwise, use specified value\n' +
      '    } else {\n' +
      "      // Only set header if it hasn't been set in config\n" +
      "      headers['User-Agent'] = 'axios/' + VERSION;\n" +
      '    }\n' +
      '\n' +
      '    // support for https://www.npmjs.com/package/form-data api\n' +
      '    if (utils.isFormData(data) && utils.isFunction(data.getHeaders)) {\n' +
      '      Object.assign(headers, data.getHeaders());\n' +
      '    } else if (data && !utils.isStream(data)) {\n' +
      '      if (Buffer.isBuffer(data)) {\n' +
      '        // Nothing to do...\n' +
      '      } else if (utils.isArrayBuffer(data)) {\n' +
      '        data = Buffer.from(new Uint8Array(data));\n' +
      '      } else if (utils.isString(data)) {\n' +
      "        data = Buffer.from(data, 'utf-8');\n" +
      '      } else {\n' +
      "        return reject(new AxiosError('Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream', AxiosError.ERR_BAD_REQUEST, config));\n" +
      '      }\n' +
      '      if (config.maxBodyLength > -1 && data.length > config.maxBodyLength) {\n' +
      "        return reject(new AxiosError('Request body larger than maxBodyLength limit', AxiosError.ERR_BAD_REQUEST, config));\n" +
      '      }\n' +
      '\n' +
      '      // Add Content-Length header if data exists\n' +
      "      if (!headerNames['content-length']) {\n" +
      "        headers['Content-Length'] = data.length;\n" +
      '      }\n' +
      '    }\n' +
      '\n' +
      '    // HTTP basic authentication\n' +
      '    var auth = undefined;\n' +
      '    if (config.auth) {\n' +
      "      var username = config.auth.username || '';\n" +
      "      var password = config.auth.password || '';\n" +
      "      auth = username + ':' + password;\n" +
      '    }\n' +
      '\n' +
      '    // Parse url\n' +
      '    var fullPath = buildFullPath(config.baseURL, config.url);\n' +
      '    var parsed = url.parse(fullPath);\n' +
      '    var protocol = parsed.protocol || supportedProtocols[0];\n' +
      '    if (supportedProtocols.indexOf(protocol) === -1) {\n' +
      "      return reject(new AxiosError('Unsupported protocol ' + protocol, AxiosError.ERR_BAD_REQUEST, config));\n" +
      '    }\n' +
      '    if (!auth && parsed.auth) {\n' +
      "      var urlAuth = parsed.auth.split(':');\n" +
      "      var urlUsername = urlAuth[0] || '';\n" +
      "      var urlPassword = urlAuth[1] || '';\n" +
      "      auth = urlUsername + ':' + urlPassword;\n" +
      '    }\n' +
      '    if (auth && headerNames.authorization) {\n' +
      '      delete headers[headerNames.authorization];\n' +
      '    }\n' +
      '    var isHttpsRequest = isHttps.test(protocol);\n' +
      '    var agent = isHttpsRequest ? config.httpsAgent : config.httpAgent;\n' +
      '    try {\n' +
      "      buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\\?/, '');\n" +
      '    } catch (err) {\n' +
      '      var customErr = new Error(err.message);\n' +
      '      customErr.config = config;\n' +
      '      customErr.url = config.url;\n' +
      '      customErr.exists = true;\n' +
      '      reject(customErr);\n' +
      '    }\n' +
      '    var options = {\n' +
      "      path: buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\\?/, ''),\n" +
      '      method: config.method.toUpperCase(),\n' +
      '      headers: headers,\n' +
      '      agent: agent,\n' +
      '      agents: {\n' +
      '        http: config.httpAgent,\n' +
      '        https: config.httpsAgent\n' +
      '      },\n' +
      '      auth: auth\n' +
      '    };\n' +
      '    if (config.socketPath) {\n' +
      '      options.socketPath = config.socketPath;\n' +
      '    } else {\n' +
      '      options.hostname = parsed.hostname;\n' +
      '      options.port = parsed.port;\n' +
      '    }\n' +
      '    var proxy = config.proxy;\n' +
      '    if (!proxy && proxy !== false) {\n' +
      "      var proxyEnv = protocol.slice(0, -1) + '_proxy';\n" +
      '      var proxyUrl = process.env[proxyEnv] || process.env[proxyEnv.toUpperCase()];\n' +
      '      if (proxyUrl) {\n' +
      '        var parsedProxyUrl = url.parse(proxyUrl);\n' +
      '        var noProxyEnv = process.env.no_proxy || process.env.NO_PROXY;\n' +
      '        var shouldProxy = true;\n' +
      '        if (noProxyEnv) {\n' +
      "          var noProxy = noProxyEnv.split(',').map(function trim(s) {\n" +
      '            return s.trim();\n' +
      '          });\n' +
      '          shouldProxy = !noProxy.some(function proxyMatch(proxyElement) {\n' +
      '            if (!proxyElement) {\n' +
      '              return false;\n' +
      '            }\n' +
      "            if (proxyElement === '*') {\n" +
      '              return true;\n' +
      '            }\n' +
      "            if (proxyElement[0] === '.' && parsed.hostname.substr(parsed.hostname.length - proxyElement.length) === proxyElement) {\n" +
      '              return true;\n' +
      '            }\n' +
      '            return parsed.hostname === proxyElement;\n' +
      '          });\n' +
      '        }\n' +
      '        if (shouldProxy) {\n' +
      '          proxy = {\n' +
      '            host: parsedProxyUrl.hostname,\n' +
      '            port: parsedProxyUrl.port,\n' +
      '            protocol: parsedProxyUrl.protocol\n' +
      '          };\n' +
      '          if (parsedProxyUrl.auth) {\n' +
      "            var proxyUrlAuth = parsedProxyUrl.auth.split(':');\n" +
      '            proxy.auth = {\n' +
      '              username: proxyUrlAuth[0],\n' +
      '              password: proxyUrlAuth[1]\n' +
      '            };\n' +
      '          }\n' +
      '        }\n' +
      '      }\n' +
      '    }\n' +
      '    if (proxy) {\n' +
      "      options.headers.host = parsed.hostname + (parsed.port ? ':' + parsed.port : '');\n" +
      "      setProxy(options, proxy, protocol + '//' + parsed.hostname + (parsed.port ? ':' + parsed.port : '') + options.path);\n" +
      '    }\n' +
      '    var transport;\n' +
      '    var isHttpsProxy = isHttpsRequest && (proxy ? isHttps.test(proxy.protocol) : true);\n' +
      '    if (config.transport) {\n' +
      '      transport = config.transport;\n' +
      '    } else if (config.maxRedirects === 0) {\n' +
      '      transport = isHttpsProxy ? https : http;\n' +
      '    } else {\n' +
      '      if (config.maxRedirects) {\n' +
      '        options.maxRedirects = config.maxRedirects;\n' +
      '      }\n' +
      '      if (config.beforeRedirect) {\n' +
      '        options.beforeRedirect = config.beforeRedirect;\n' +
      '      }\n' +
      '      transport = isHttpsProxy ? httpsFollow : httpFollow;\n' +
      '    }\n' +
      '    if (config.maxBodyLength > -1) {\n' +
      '      options.maxBodyLength = config.maxBodyLength;\n' +
      '    }\n' +
      '    if (config.insecureHTTPParser) {\n' +
      '      options.insecureHTTPParser = config.insecureHTTPParser;\n' +
      '    }\n' +
      '\n' +
      '    // Create the request\n' +
      '    var req = transport.request(options, function handleResponse(res) {\n' +
      '      if (req.aborted) return;\n' +
      '\n' +
      '      // uncompress the response body transparently if required\n' +
      '      var stream = res;\n' +
      '\n' +
      '      // return the last request in case of redirects\n' +
      '      var lastRequest = res.req || req;\n' +
      '\n' +
      '      // if no content, is HEAD request or decompress disabled we should not decompress\n' +
      "      if (res.statusCode !== 204 && lastRequest.method !== 'HEAD' && config.decompress !== false) {\n" +
      "        switch (res.headers['content-encoding']) {\n" +
      '          /*eslint default-case:0*/\n' +
      "          case 'gzip':\n" +
      "          case 'compress':\n" +
      "          case 'deflate':\n" +
      '            // add the unzipper to the body stream processing pipeline\n' +
      '            stream = stream.pipe(zlib.createUnzip());\n' +
      '\n' +
      '            // remove the content-encoding in order to not confuse downstream operations\n' +
      "            delete res.headers['content-encoding'];\n" +
      '            break;\n' +
      '        }\n' +
      '      }\n' +
      '      var response = {\n' +
      '        status: res.statusCode,\n' +
      '        statusText: res.statusMessage,\n' +
      '        headers: res.headers,\n' +
      '        config: config,\n' +
      '        request: lastRequest\n' +
      '      };\n' +
      "      if (config.responseType === 'stream') {\n" +
      '        response.data = stream;\n' +
      '        settle(resolve, reject, response);\n' +
      '      } else {\n' +
      '        var responseBuffer = [];\n' +
      '        var totalResponseBytes = 0;\n' +
      "        stream.on('data', function handleStreamData(chunk) {\n" +
      '          responseBuffer.push(chunk);\n' +
      '          totalResponseBytes += chunk.length;\n' +
      '\n' +
      '          // make sure the content length is not over the maxContentLength if specified\n' +
      '          if (config.maxContentLength > -1 && totalResponseBytes > config.maxContentLength) {\n' +
      '            // stream.destoy() emit aborted event before calling reject() on Node.js v16\n' +
      '            rejected = true;\n' +
      '            stream.destroy();\n' +
      "            reject(new AxiosError('maxContentLength size of ' + config.maxContentLength + ' exceeded', AxiosError.ERR_BAD_RESPONSE, config, lastRequest));\n" +
      '          }\n' +
      '        });\n' +
      "        stream.on('aborted', function handlerStreamAborted() {\n" +
      '          if (rejected) {\n' +
      '            return;\n' +
      '          }\n' +
      '          stream.destroy();\n' +
      "          reject(new AxiosError('maxContentLength size of ' + config.maxContentLength + ' exceeded', AxiosError.ERR_BAD_RESPONSE, config, lastRequest));\n" +
      '        });\n' +
      "        stream.on('error', function handleStreamError(err) {\n" +
      '          if (req.aborted) return;\n' +
      '          reject(AxiosError.from(err, null, config, lastRequest));\n' +
      '        });\n' +
      "        stream.on('end', function handleStreamEnd() {\n" +
      '          try {\n' +
      '            var responseData = responseBuffer.length === 1 ? responseBuffer[0] : Buffer.concat(responseBuffer);\n' +
      "            if (config.responseType !== 'arraybuffer') {\n" +
      '              responseData = responseData.toString(config.responseEncoding);\n' +
      "              if (!config.responseEncoding || config.responseEncoding === 'utf8') {\n" +
      '                responseData = utils.stripBOM(responseData);\n' +
      '              }\n' +
      '            }\n' +
      '            response.data = responseData;\n' +
      '          } catch (err) {\n' +
      '            reject(AxiosError.from(err, null, config, response.request, response));\n' +
      '          }\n' +
      '          settle(resolve, reject, response);\n' +
      '        });\n' +
      '      }\n' +
      '    });\n' +
      '\n' +
      '    // Handle errors\n' +
      "    req.on('error', function handleRequestError(err) {\n" +
      '      // @todo remove\n' +
      '      // if (req.aborted && err.code !== AxiosError.ERR_FR_TOO_MANY_REDIRECTS) return;\n' +
      '      reject(AxiosError.from(err, null, config, req));\n' +
      '    });\n' +
      '\n' +
      ' '... 2346 more characters,
    transformRequest: [
      '[function] function transformRequest(data, headers) {\n' +
        "    normalizeHeaderName(headers, 'Accept');\n" +
        "    normalizeHeaderName(headers, 'Content-Type');\n" +
        '    if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {\n' +
        '      return data;\n' +
        '    }\n' +
        '    if (utils.isArrayBufferView(data)) {\n' +
        '      return data.buffer;\n' +
        '    }\n' +
        '    if (utils.isURLSearchParams(data)) {\n' +
        "      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');\n" +
        '      return data.toString();\n' +
        '    }\n' +
        '    var isObjectPayload = utils.isObject(data);\n' +
        "    var contentType = headers && headers['Content-Type'];\n" +
        '    var isFileList;\n' +
        "    if ((isFileList = utils.isFileList(data)) || isObjectPayload && contentType === 'multipart/form-data') {\n" +
        '      var _FormData = this.env && this.env.FormData;\n' +
        '      return toFormData(isFileList ? {\n' +
        "        'files[]': data\n" +
        '      } : data, _FormData && new _FormData());\n' +
        "    } else if (isObjectPayload || contentType === 'application/json') {\n" +
        "      setContentTypeIfUnset(headers, 'application/json');\n" +
        '      return stringifySafely(data);\n' +
        '    }\n' +
        '    return data;\n' +
        '  }'
    ],
    transformResponse: [
      '[function] function transformResponse(data) {\n' +
        '    var transitional = this.transitional || defaults.transitional;\n' +
        '    var silentJSONParsing = transitional && transitional.silentJSONParsing;\n' +
        '    var forcedJSONParsing = transitional && transitional.forcedJSONParsing;\n' +
        "    var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';\n" +
        '    if (strictJSONParsing || forcedJSONParsing && utils.isString(data) && data.length) {\n' +
        '      try {\n' +
        '        return JSON.parse(data);\n' +
        '      } catch (e) {\n' +
        '        if (strictJSONParsing) {\n' +
        "          if (e.name === 'SyntaxError') {\n" +
        '            throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);\n' +
        '          }\n' +
        '          throw e;\n' +
        '        }\n' +
        '      }\n' +
        '    }\n' +
        '    return data;\n' +
        '  }'
    ],
    timeout: 0,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
      FormData: '[function] function FormData(options) {\n' +
        '  if (!(this instanceof FormData)) {\n' +
        '    return new FormData(options);\n' +
        '  }\n' +
        '  this._overheadLength = 0;\n' +
        '  this._valueLength = 0;\n' +
        '  this._valuesToMeasure = [];\n' +
        '  CombinedStream.call(this);\n' +
        '  options = options || {};\n' +
        '  for (var option in options) {\n' +
        '    this[option] = options[option];\n' +
        '  }\n' +
        '}'
    },
    validateStatus: '[function] function validateStatus(status) {\n' +
      '    return status >= 200 && status < 300;\n' +
      '  }',
    headers: {
      Accept: 'application/json, text/plain, */*',
      Authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI5OTQ5NmQ4YS0wOTY4LTQ1ZTUtYTg4Ni1lNGNkZjgxYTcwNzYiLCJlbWFpbCI6IjU0OTA2Y2MxLTk5ZTEtNDA2Yi04ZGU4LTFiZDlkNjAwNjI0YyIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2MTQ4NCwiZXhwIjoxNjg5MTQ3ODg0fQ.eA6iiKOi0Eqg3atb2z-kF1Zme28U86ieWdoxlBFxmmU',
      'Content-Type': '',
      'User-Agent': 'axios/0.27.2'
    },
    url: 'https://connect-api.dev.insiteflow.io/v1/connect/container/config?organizationId=711729a8-a473-47bf-b27f-8abc1ee52281&containerType=desktop',
    method: 'get'
  },
  code: 'ERR_BAD_REQUEST',
  status: 401
}
[2023-07-11 13:22:15.083] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 13:22:15.674] [error] Unhandled Exception {
  message: 'Request failed with status code 401',
  name: 'UnhandledRejection AxiosError',
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: '[function] function httpAdapter(config) {\n' +
      '  return new Promise(function dispatchHttpRequest(resolvePromise, rejectPromise) {\n' +
      '    var onCanceled;\n' +
      '    function done() {\n' +
      '      if (config.cancelToken) {\n' +
      '        config.cancelToken.unsubscribe(onCanceled);\n' +
      '      }\n' +
      '      if (config.signal) {\n' +
      "        config.signal.removeEventListener('abort', onCanceled);\n" +
      '      }\n' +
      '    }\n' +
      '    var resolve = function resolve(value) {\n' +
      '      done();\n' +
      '      resolvePromise(value);\n' +
      '    };\n' +
      '    var rejected = false;\n' +
      '    var reject = function reject(value) {\n' +
      '      done();\n' +
      '      rejected = true;\n' +
      '      rejectPromise(value);\n' +
      '    };\n' +
      '    var data = config.data;\n' +
      '    var headers = config.headers;\n' +
      '    var headerNames = {};\n' +
      '    Object.keys(headers).forEach(function storeLowerName(name) {\n' +
      '      headerNames[name.toLowerCase()] = name;\n' +
      '    });\n' +
      '\n' +
      '    // Set User-Agent (required by some servers)\n' +
      '    // See https://github.com/axios/axios/issues/69\n' +
      "    if ('user-agent' in headerNames) {\n" +
      '      // User-Agent is specified; handle case where no UA header is desired\n' +
      "      if (!headers[headerNames['user-agent']]) {\n" +
      "        delete headers[headerNames['user-agent']];\n" +
      '      }\n' +
      '      // Otherwise, use specified value\n' +
      '    } else {\n' +
      "      // Only set header if it hasn't been set in config\n" +
      "      headers['User-Agent'] = 'axios/' + VERSION;\n" +
      '    }\n' +
      '\n' +
      '    // support for https://www.npmjs.com/package/form-data api\n' +
      '    if (utils.isFormData(data) && utils.isFunction(data.getHeaders)) {\n' +
      '      Object.assign(headers, data.getHeaders());\n' +
      '    } else if (data && !utils.isStream(data)) {\n' +
      '      if (Buffer.isBuffer(data)) {\n' +
      '        // Nothing to do...\n' +
      '      } else if (utils.isArrayBuffer(data)) {\n' +
      '        data = Buffer.from(new Uint8Array(data));\n' +
      '      } else if (utils.isString(data)) {\n' +
      "        data = Buffer.from(data, 'utf-8');\n" +
      '      } else {\n' +
      "        return reject(new AxiosError('Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream', AxiosError.ERR_BAD_REQUEST, config));\n" +
      '      }\n' +
      '      if (config.maxBodyLength > -1 && data.length > config.maxBodyLength) {\n' +
      "        return reject(new AxiosError('Request body larger than maxBodyLength limit', AxiosError.ERR_BAD_REQUEST, config));\n" +
      '      }\n' +
      '\n' +
      '      // Add Content-Length header if data exists\n' +
      "      if (!headerNames['content-length']) {\n" +
      "        headers['Content-Length'] = data.length;\n" +
      '      }\n' +
      '    }\n' +
      '\n' +
      '    // HTTP basic authentication\n' +
      '    var auth = undefined;\n' +
      '    if (config.auth) {\n' +
      "      var username = config.auth.username || '';\n" +
      "      var password = config.auth.password || '';\n" +
      "      auth = username + ':' + password;\n" +
      '    }\n' +
      '\n' +
      '    // Parse url\n' +
      '    var fullPath = buildFullPath(config.baseURL, config.url);\n' +
      '    var parsed = url.parse(fullPath);\n' +
      '    var protocol = parsed.protocol || supportedProtocols[0];\n' +
      '    if (supportedProtocols.indexOf(protocol) === -1) {\n' +
      "      return reject(new AxiosError('Unsupported protocol ' + protocol, AxiosError.ERR_BAD_REQUEST, config));\n" +
      '    }\n' +
      '    if (!auth && parsed.auth) {\n' +
      "      var urlAuth = parsed.auth.split(':');\n" +
      "      var urlUsername = urlAuth[0] || '';\n" +
      "      var urlPassword = urlAuth[1] || '';\n" +
      "      auth = urlUsername + ':' + urlPassword;\n" +
      '    }\n' +
      '    if (auth && headerNames.authorization) {\n' +
      '      delete headers[headerNames.authorization];\n' +
      '    }\n' +
      '    var isHttpsRequest = isHttps.test(protocol);\n' +
      '    var agent = isHttpsRequest ? config.httpsAgent : config.httpAgent;\n' +
      '    try {\n' +
      "      buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\\?/, '');\n" +
      '    } catch (err) {\n' +
      '      var customErr = new Error(err.message);\n' +
      '      customErr.config = config;\n' +
      '      customErr.url = config.url;\n' +
      '      customErr.exists = true;\n' +
      '      reject(customErr);\n' +
      '    }\n' +
      '    var options = {\n' +
      "      path: buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\\?/, ''),\n" +
      '      method: config.method.toUpperCase(),\n' +
      '      headers: headers,\n' +
      '      agent: agent,\n' +
      '      agents: {\n' +
      '        http: config.httpAgent,\n' +
      '        https: config.httpsAgent\n' +
      '      },\n' +
      '      auth: auth\n' +
      '    };\n' +
      '    if (config.socketPath) {\n' +
      '      options.socketPath = config.socketPath;\n' +
      '    } else {\n' +
      '      options.hostname = parsed.hostname;\n' +
      '      options.port = parsed.port;\n' +
      '    }\n' +
      '    var proxy = config.proxy;\n' +
      '    if (!proxy && proxy !== false) {\n' +
      "      var proxyEnv = protocol.slice(0, -1) + '_proxy';\n" +
      '      var proxyUrl = process.env[proxyEnv] || process.env[proxyEnv.toUpperCase()];\n' +
      '      if (proxyUrl) {\n' +
      '        var parsedProxyUrl = url.parse(proxyUrl);\n' +
      '        var noProxyEnv = process.env.no_proxy || process.env.NO_PROXY;\n' +
      '        var shouldProxy = true;\n' +
      '        if (noProxyEnv) {\n' +
      "          var noProxy = noProxyEnv.split(',').map(function trim(s) {\n" +
      '            return s.trim();\n' +
      '          });\n' +
      '          shouldProxy = !noProxy.some(function proxyMatch(proxyElement) {\n' +
      '            if (!proxyElement) {\n' +
      '              return false;\n' +
      '            }\n' +
      "            if (proxyElement === '*') {\n" +
      '              return true;\n' +
      '            }\n' +
      "            if (proxyElement[0] === '.' && parsed.hostname.substr(parsed.hostname.length - proxyElement.length) === proxyElement) {\n" +
      '              return true;\n' +
      '            }\n' +
      '            return parsed.hostname === proxyElement;\n' +
      '          });\n' +
      '        }\n' +
      '        if (shouldProxy) {\n' +
      '          proxy = {\n' +
      '            host: parsedProxyUrl.hostname,\n' +
      '            port: parsedProxyUrl.port,\n' +
      '            protocol: parsedProxyUrl.protocol\n' +
      '          };\n' +
      '          if (parsedProxyUrl.auth) {\n' +
      "            var proxyUrlAuth = parsedProxyUrl.auth.split(':');\n" +
      '            proxy.auth = {\n' +
      '              username: proxyUrlAuth[0],\n' +
      '              password: proxyUrlAuth[1]\n' +
      '            };\n' +
      '          }\n' +
      '        }\n' +
      '      }\n' +
      '    }\n' +
      '    if (proxy) {\n' +
      "      options.headers.host = parsed.hostname + (parsed.port ? ':' + parsed.port : '');\n" +
      "      setProxy(options, proxy, protocol + '//' + parsed.hostname + (parsed.port ? ':' + parsed.port : '') + options.path);\n" +
      '    }\n' +
      '    var transport;\n' +
      '    var isHttpsProxy = isHttpsRequest && (proxy ? isHttps.test(proxy.protocol) : true);\n' +
      '    if (config.transport) {\n' +
      '      transport = config.transport;\n' +
      '    } else if (config.maxRedirects === 0) {\n' +
      '      transport = isHttpsProxy ? https : http;\n' +
      '    } else {\n' +
      '      if (config.maxRedirects) {\n' +
      '        options.maxRedirects = config.maxRedirects;\n' +
      '      }\n' +
      '      if (config.beforeRedirect) {\n' +
      '        options.beforeRedirect = config.beforeRedirect;\n' +
      '      }\n' +
      '      transport = isHttpsProxy ? httpsFollow : httpFollow;\n' +
      '    }\n' +
      '    if (config.maxBodyLength > -1) {\n' +
      '      options.maxBodyLength = config.maxBodyLength;\n' +
      '    }\n' +
      '    if (config.insecureHTTPParser) {\n' +
      '      options.insecureHTTPParser = config.insecureHTTPParser;\n' +
      '    }\n' +
      '\n' +
      '    // Create the request\n' +
      '    var req = transport.request(options, function handleResponse(res) {\n' +
      '      if (req.aborted) return;\n' +
      '\n' +
      '      // uncompress the response body transparently if required\n' +
      '      var stream = res;\n' +
      '\n' +
      '      // return the last request in case of redirects\n' +
      '      var lastRequest = res.req || req;\n' +
      '\n' +
      '      // if no content, is HEAD request or decompress disabled we should not decompress\n' +
      "      if (res.statusCode !== 204 && lastRequest.method !== 'HEAD' && config.decompress !== false) {\n" +
      "        switch (res.headers['content-encoding']) {\n" +
      '          /*eslint default-case:0*/\n' +
      "          case 'gzip':\n" +
      "          case 'compress':\n" +
      "          case 'deflate':\n" +
      '            // add the unzipper to the body stream processing pipeline\n' +
      '            stream = stream.pipe(zlib.createUnzip());\n' +
      '\n' +
      '            // remove the content-encoding in order to not confuse downstream operations\n' +
      "            delete res.headers['content-encoding'];\n" +
      '            break;\n' +
      '        }\n' +
      '      }\n' +
      '      var response = {\n' +
      '        status: res.statusCode,\n' +
      '        statusText: res.statusMessage,\n' +
      '        headers: res.headers,\n' +
      '        config: config,\n' +
      '        request: lastRequest\n' +
      '      };\n' +
      "      if (config.responseType === 'stream') {\n" +
      '        response.data = stream;\n' +
      '        settle(resolve, reject, response);\n' +
      '      } else {\n' +
      '        var responseBuffer = [];\n' +
      '        var totalResponseBytes = 0;\n' +
      "        stream.on('data', function handleStreamData(chunk) {\n" +
      '          responseBuffer.push(chunk);\n' +
      '          totalResponseBytes += chunk.length;\n' +
      '\n' +
      '          // make sure the content length is not over the maxContentLength if specified\n' +
      '          if (config.maxContentLength > -1 && totalResponseBytes > config.maxContentLength) {\n' +
      '            // stream.destoy() emit aborted event before calling reject() on Node.js v16\n' +
      '            rejected = true;\n' +
      '            stream.destroy();\n' +
      "            reject(new AxiosError('maxContentLength size of ' + config.maxContentLength + ' exceeded', AxiosError.ERR_BAD_RESPONSE, config, lastRequest));\n" +
      '          }\n' +
      '        });\n' +
      "        stream.on('aborted', function handlerStreamAborted() {\n" +
      '          if (rejected) {\n' +
      '            return;\n' +
      '          }\n' +
      '          stream.destroy();\n' +
      "          reject(new AxiosError('maxContentLength size of ' + config.maxContentLength + ' exceeded', AxiosError.ERR_BAD_RESPONSE, config, lastRequest));\n" +
      '        });\n' +
      "        stream.on('error', function handleStreamError(err) {\n" +
      '          if (req.aborted) return;\n' +
      '          reject(AxiosError.from(err, null, config, lastRequest));\n' +
      '        });\n' +
      "        stream.on('end', function handleStreamEnd() {\n" +
      '          try {\n' +
      '            var responseData = responseBuffer.length === 1 ? responseBuffer[0] : Buffer.concat(responseBuffer);\n' +
      "            if (config.responseType !== 'arraybuffer') {\n" +
      '              responseData = responseData.toString(config.responseEncoding);\n' +
      "              if (!config.responseEncoding || config.responseEncoding === 'utf8') {\n" +
      '                responseData = utils.stripBOM(responseData);\n' +
      '              }\n' +
      '            }\n' +
      '            response.data = responseData;\n' +
      '          } catch (err) {\n' +
      '            reject(AxiosError.from(err, null, config, response.request, response));\n' +
      '          }\n' +
      '          settle(resolve, reject, response);\n' +
      '        });\n' +
      '      }\n' +
      '    });\n' +
      '\n' +
      '    // Handle errors\n' +
      "    req.on('error', function handleRequestError(err) {\n" +
      '      // @todo remove\n' +
      '      // if (req.aborted && err.code !== AxiosError.ERR_FR_TOO_MANY_REDIRECTS) return;\n' +
      '      reject(AxiosError.from(err, null, config, req));\n' +
      '    });\n' +
      '\n' +
      ' '... 2346 more characters,
    transformRequest: [
      '[function] function transformRequest(data, headers) {\n' +
        "    normalizeHeaderName(headers, 'Accept');\n" +
        "    normalizeHeaderName(headers, 'Content-Type');\n" +
        '    if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {\n' +
        '      return data;\n' +
        '    }\n' +
        '    if (utils.isArrayBufferView(data)) {\n' +
        '      return data.buffer;\n' +
        '    }\n' +
        '    if (utils.isURLSearchParams(data)) {\n' +
        "      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');\n" +
        '      return data.toString();\n' +
        '    }\n' +
        '    var isObjectPayload = utils.isObject(data);\n' +
        "    var contentType = headers && headers['Content-Type'];\n" +
        '    var isFileList;\n' +
        "    if ((isFileList = utils.isFileList(data)) || isObjectPayload && contentType === 'multipart/form-data') {\n" +
        '      var _FormData = this.env && this.env.FormData;\n' +
        '      return toFormData(isFileList ? {\n' +
        "        'files[]': data\n" +
        '      } : data, _FormData && new _FormData());\n' +
        "    } else if (isObjectPayload || contentType === 'application/json') {\n" +
        "      setContentTypeIfUnset(headers, 'application/json');\n" +
        '      return stringifySafely(data);\n' +
        '    }\n' +
        '    return data;\n' +
        '  }'
    ],
    transformResponse: [
      '[function] function transformResponse(data) {\n' +
        '    var transitional = this.transitional || defaults.transitional;\n' +
        '    var silentJSONParsing = transitional && transitional.silentJSONParsing;\n' +
        '    var forcedJSONParsing = transitional && transitional.forcedJSONParsing;\n' +
        "    var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';\n" +
        '    if (strictJSONParsing || forcedJSONParsing && utils.isString(data) && data.length) {\n' +
        '      try {\n' +
        '        return JSON.parse(data);\n' +
        '      } catch (e) {\n' +
        '        if (strictJSONParsing) {\n' +
        "          if (e.name === 'SyntaxError') {\n" +
        '            throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);\n' +
        '          }\n' +
        '          throw e;\n' +
        '        }\n' +
        '      }\n' +
        '    }\n' +
        '    return data;\n' +
        '  }'
    ],
    timeout: 0,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
      FormData: '[function] function FormData(options) {\n' +
        '  if (!(this instanceof FormData)) {\n' +
        '    return new FormData(options);\n' +
        '  }\n' +
        '  this._overheadLength = 0;\n' +
        '  this._valueLength = 0;\n' +
        '  this._valuesToMeasure = [];\n' +
        '  CombinedStream.call(this);\n' +
        '  options = options || {};\n' +
        '  for (var option in options) {\n' +
        '    this[option] = options[option];\n' +
        '  }\n' +
        '}'
    },
    validateStatus: '[function] function validateStatus(status) {\n' +
      '    return status >= 200 && status < 300;\n' +
      '  }',
    headers: {
      Accept: 'application/json, text/plain, */*',
      Authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI5OTQ5NmQ4YS0wOTY4LTQ1ZTUtYTg4Ni1lNGNkZjgxYTcwNzYiLCJlbWFpbCI6IjU0OTA2Y2MxLTk5ZTEtNDA2Yi04ZGU4LTFiZDlkNjAwNjI0YyIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2MTQ4NCwiZXhwIjoxNjg5MTQ3ODg0fQ.eA6iiKOi0Eqg3atb2z-kF1Zme28U86ieWdoxlBFxmmU',
      'Content-Type': '',
      'User-Agent': 'axios/0.27.2'
    },
    url: 'https://connect-api.dev.insiteflow.io/v1/connect/container/config?organizationId=711729a8-a473-47bf-b27f-8abc1ee52281&containerType=desktop',
    method: 'get'
  },
  code: 'ERR_BAD_REQUEST',
  status: 401
}
[2023-07-11 13:22:16.190] [info]  { response: 1 }
[2023-07-11 13:22:20.895] [error] Unhandled Exception {
  message: 'Request failed with status code 401',
  name: 'UnhandledRejection AxiosError',
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: '[function] function httpAdapter(config) {\n' +
      '  return new Promise(function dispatchHttpRequest(resolvePromise, rejectPromise) {\n' +
      '    var onCanceled;\n' +
      '    function done() {\n' +
      '      if (config.cancelToken) {\n' +
      '        config.cancelToken.unsubscribe(onCanceled);\n' +
      '      }\n' +
      '      if (config.signal) {\n' +
      "        config.signal.removeEventListener('abort', onCanceled);\n" +
      '      }\n' +
      '    }\n' +
      '    var resolve = function resolve(value) {\n' +
      '      done();\n' +
      '      resolvePromise(value);\n' +
      '    };\n' +
      '    var rejected = false;\n' +
      '    var reject = function reject(value) {\n' +
      '      done();\n' +
      '      rejected = true;\n' +
      '      rejectPromise(value);\n' +
      '    };\n' +
      '    var data = config.data;\n' +
      '    var headers = config.headers;\n' +
      '    var headerNames = {};\n' +
      '    Object.keys(headers).forEach(function storeLowerName(name) {\n' +
      '      headerNames[name.toLowerCase()] = name;\n' +
      '    });\n' +
      '\n' +
      '    // Set User-Agent (required by some servers)\n' +
      '    // See https://github.com/axios/axios/issues/69\n' +
      "    if ('user-agent' in headerNames) {\n" +
      '      // User-Agent is specified; handle case where no UA header is desired\n' +
      "      if (!headers[headerNames['user-agent']]) {\n" +
      "        delete headers[headerNames['user-agent']];\n" +
      '      }\n' +
      '      // Otherwise, use specified value\n' +
      '    } else {\n' +
      "      // Only set header if it hasn't been set in config\n" +
      "      headers['User-Agent'] = 'axios/' + VERSION;\n" +
      '    }\n' +
      '\n' +
      '    // support for https://www.npmjs.com/package/form-data api\n' +
      '    if (utils.isFormData(data) && utils.isFunction(data.getHeaders)) {\n' +
      '      Object.assign(headers, data.getHeaders());\n' +
      '    } else if (data && !utils.isStream(data)) {\n' +
      '      if (Buffer.isBuffer(data)) {\n' +
      '        // Nothing to do...\n' +
      '      } else if (utils.isArrayBuffer(data)) {\n' +
      '        data = Buffer.from(new Uint8Array(data));\n' +
      '      } else if (utils.isString(data)) {\n' +
      "        data = Buffer.from(data, 'utf-8');\n" +
      '      } else {\n' +
      "        return reject(new AxiosError('Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream', AxiosError.ERR_BAD_REQUEST, config));\n" +
      '      }\n' +
      '      if (config.maxBodyLength > -1 && data.length > config.maxBodyLength) {\n' +
      "        return reject(new AxiosError('Request body larger than maxBodyLength limit', AxiosError.ERR_BAD_REQUEST, config));\n" +
      '      }\n' +
      '\n' +
      '      // Add Content-Length header if data exists\n' +
      "      if (!headerNames['content-length']) {\n" +
      "        headers['Content-Length'] = data.length;\n" +
      '      }\n' +
      '    }\n' +
      '\n' +
      '    // HTTP basic authentication\n' +
      '    var auth = undefined;\n' +
      '    if (config.auth) {\n' +
      "      var username = config.auth.username || '';\n" +
      "      var password = config.auth.password || '';\n" +
      "      auth = username + ':' + password;\n" +
      '    }\n' +
      '\n' +
      '    // Parse url\n' +
      '    var fullPath = buildFullPath(config.baseURL, config.url);\n' +
      '    var parsed = url.parse(fullPath);\n' +
      '    var protocol = parsed.protocol || supportedProtocols[0];\n' +
      '    if (supportedProtocols.indexOf(protocol) === -1) {\n' +
      "      return reject(new AxiosError('Unsupported protocol ' + protocol, AxiosError.ERR_BAD_REQUEST, config));\n" +
      '    }\n' +
      '    if (!auth && parsed.auth) {\n' +
      "      var urlAuth = parsed.auth.split(':');\n" +
      "      var urlUsername = urlAuth[0] || '';\n" +
      "      var urlPassword = urlAuth[1] || '';\n" +
      "      auth = urlUsername + ':' + urlPassword;\n" +
      '    }\n' +
      '    if (auth && headerNames.authorization) {\n' +
      '      delete headers[headerNames.authorization];\n' +
      '    }\n' +
      '    var isHttpsRequest = isHttps.test(protocol);\n' +
      '    var agent = isHttpsRequest ? config.httpsAgent : config.httpAgent;\n' +
      '    try {\n' +
      "      buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\\?/, '');\n" +
      '    } catch (err) {\n' +
      '      var customErr = new Error(err.message);\n' +
      '      customErr.config = config;\n' +
      '      customErr.url = config.url;\n' +
      '      customErr.exists = true;\n' +
      '      reject(customErr);\n' +
      '    }\n' +
      '    var options = {\n' +
      "      path: buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\\?/, ''),\n" +
      '      method: config.method.toUpperCase(),\n' +
      '      headers: headers,\n' +
      '      agent: agent,\n' +
      '      agents: {\n' +
      '        http: config.httpAgent,\n' +
      '        https: config.httpsAgent\n' +
      '      },\n' +
      '      auth: auth\n' +
      '    };\n' +
      '    if (config.socketPath) {\n' +
      '      options.socketPath = config.socketPath;\n' +
      '    } else {\n' +
      '      options.hostname = parsed.hostname;\n' +
      '      options.port = parsed.port;\n' +
      '    }\n' +
      '    var proxy = config.proxy;\n' +
      '    if (!proxy && proxy !== false) {\n' +
      "      var proxyEnv = protocol.slice(0, -1) + '_proxy';\n" +
      '      var proxyUrl = process.env[proxyEnv] || process.env[proxyEnv.toUpperCase()];\n' +
      '      if (proxyUrl) {\n' +
      '        var parsedProxyUrl = url.parse(proxyUrl);\n' +
      '        var noProxyEnv = process.env.no_proxy || process.env.NO_PROXY;\n' +
      '        var shouldProxy = true;\n' +
      '        if (noProxyEnv) {\n' +
      "          var noProxy = noProxyEnv.split(',').map(function trim(s) {\n" +
      '            return s.trim();\n' +
      '          });\n' +
      '          shouldProxy = !noProxy.some(function proxyMatch(proxyElement) {\n' +
      '            if (!proxyElement) {\n' +
      '              return false;\n' +
      '            }\n' +
      "            if (proxyElement === '*') {\n" +
      '              return true;\n' +
      '            }\n' +
      "            if (proxyElement[0] === '.' && parsed.hostname.substr(parsed.hostname.length - proxyElement.length) === proxyElement) {\n" +
      '              return true;\n' +
      '            }\n' +
      '            return parsed.hostname === proxyElement;\n' +
      '          });\n' +
      '        }\n' +
      '        if (shouldProxy) {\n' +
      '          proxy = {\n' +
      '            host: parsedProxyUrl.hostname,\n' +
      '            port: parsedProxyUrl.port,\n' +
      '            protocol: parsedProxyUrl.protocol\n' +
      '          };\n' +
      '          if (parsedProxyUrl.auth) {\n' +
      "            var proxyUrlAuth = parsedProxyUrl.auth.split(':');\n" +
      '            proxy.auth = {\n' +
      '              username: proxyUrlAuth[0],\n' +
      '              password: proxyUrlAuth[1]\n' +
      '            };\n' +
      '          }\n' +
      '        }\n' +
      '      }\n' +
      '    }\n' +
      '    if (proxy) {\n' +
      "      options.headers.host = parsed.hostname + (parsed.port ? ':' + parsed.port : '');\n" +
      "      setProxy(options, proxy, protocol + '//' + parsed.hostname + (parsed.port ? ':' + parsed.port : '') + options.path);\n" +
      '    }\n' +
      '    var transport;\n' +
      '    var isHttpsProxy = isHttpsRequest && (proxy ? isHttps.test(proxy.protocol) : true);\n' +
      '    if (config.transport) {\n' +
      '      transport = config.transport;\n' +
      '    } else if (config.maxRedirects === 0) {\n' +
      '      transport = isHttpsProxy ? https : http;\n' +
      '    } else {\n' +
      '      if (config.maxRedirects) {\n' +
      '        options.maxRedirects = config.maxRedirects;\n' +
      '      }\n' +
      '      if (config.beforeRedirect) {\n' +
      '        options.beforeRedirect = config.beforeRedirect;\n' +
      '      }\n' +
      '      transport = isHttpsProxy ? httpsFollow : httpFollow;\n' +
      '    }\n' +
      '    if (config.maxBodyLength > -1) {\n' +
      '      options.maxBodyLength = config.maxBodyLength;\n' +
      '    }\n' +
      '    if (config.insecureHTTPParser) {\n' +
      '      options.insecureHTTPParser = config.insecureHTTPParser;\n' +
      '    }\n' +
      '\n' +
      '    // Create the request\n' +
      '    var req = transport.request(options, function handleResponse(res) {\n' +
      '      if (req.aborted) return;\n' +
      '\n' +
      '      // uncompress the response body transparently if required\n' +
      '      var stream = res;\n' +
      '\n' +
      '      // return the last request in case of redirects\n' +
      '      var lastRequest = res.req || req;\n' +
      '\n' +
      '      // if no content, is HEAD request or decompress disabled we should not decompress\n' +
      "      if (res.statusCode !== 204 && lastRequest.method !== 'HEAD' && config.decompress !== false) {\n" +
      "        switch (res.headers['content-encoding']) {\n" +
      '          /*eslint default-case:0*/\n' +
      "          case 'gzip':\n" +
      "          case 'compress':\n" +
      "          case 'deflate':\n" +
      '            // add the unzipper to the body stream processing pipeline\n' +
      '            stream = stream.pipe(zlib.createUnzip());\n' +
      '\n' +
      '            // remove the content-encoding in order to not confuse downstream operations\n' +
      "            delete res.headers['content-encoding'];\n" +
      '            break;\n' +
      '        }\n' +
      '      }\n' +
      '      var response = {\n' +
      '        status: res.statusCode,\n' +
      '        statusText: res.statusMessage,\n' +
      '        headers: res.headers,\n' +
      '        config: config,\n' +
      '        request: lastRequest\n' +
      '      };\n' +
      "      if (config.responseType === 'stream') {\n" +
      '        response.data = stream;\n' +
      '        settle(resolve, reject, response);\n' +
      '      } else {\n' +
      '        var responseBuffer = [];\n' +
      '        var totalResponseBytes = 0;\n' +
      "        stream.on('data', function handleStreamData(chunk) {\n" +
      '          responseBuffer.push(chunk);\n' +
      '          totalResponseBytes += chunk.length;\n' +
      '\n' +
      '          // make sure the content length is not over the maxContentLength if specified\n' +
      '          if (config.maxContentLength > -1 && totalResponseBytes > config.maxContentLength) {\n' +
      '            // stream.destoy() emit aborted event before calling reject() on Node.js v16\n' +
      '            rejected = true;\n' +
      '            stream.destroy();\n' +
      "            reject(new AxiosError('maxContentLength size of ' + config.maxContentLength + ' exceeded', AxiosError.ERR_BAD_RESPONSE, config, lastRequest));\n" +
      '          }\n' +
      '        });\n' +
      "        stream.on('aborted', function handlerStreamAborted() {\n" +
      '          if (rejected) {\n' +
      '            return;\n' +
      '          }\n' +
      '          stream.destroy();\n' +
      "          reject(new AxiosError('maxContentLength size of ' + config.maxContentLength + ' exceeded', AxiosError.ERR_BAD_RESPONSE, config, lastRequest));\n" +
      '        });\n' +
      "        stream.on('error', function handleStreamError(err) {\n" +
      '          if (req.aborted) return;\n' +
      '          reject(AxiosError.from(err, null, config, lastRequest));\n' +
      '        });\n' +
      "        stream.on('end', function handleStreamEnd() {\n" +
      '          try {\n' +
      '            var responseData = responseBuffer.length === 1 ? responseBuffer[0] : Buffer.concat(responseBuffer);\n' +
      "            if (config.responseType !== 'arraybuffer') {\n" +
      '              responseData = responseData.toString(config.responseEncoding);\n' +
      "              if (!config.responseEncoding || config.responseEncoding === 'utf8') {\n" +
      '                responseData = utils.stripBOM(responseData);\n' +
      '              }\n' +
      '            }\n' +
      '            response.data = responseData;\n' +
      '          } catch (err) {\n' +
      '            reject(AxiosError.from(err, null, config, response.request, response));\n' +
      '          }\n' +
      '          settle(resolve, reject, response);\n' +
      '        });\n' +
      '      }\n' +
      '    });\n' +
      '\n' +
      '    // Handle errors\n' +
      "    req.on('error', function handleRequestError(err) {\n" +
      '      // @todo remove\n' +
      '      // if (req.aborted && err.code !== AxiosError.ERR_FR_TOO_MANY_REDIRECTS) return;\n' +
      '      reject(AxiosError.from(err, null, config, req));\n' +
      '    });\n' +
      '\n' +
      ' '... 2346 more characters,
    transformRequest: [
      '[function] function transformRequest(data, headers) {\n' +
        "    normalizeHeaderName(headers, 'Accept');\n" +
        "    normalizeHeaderName(headers, 'Content-Type');\n" +
        '    if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {\n' +
        '      return data;\n' +
        '    }\n' +
        '    if (utils.isArrayBufferView(data)) {\n' +
        '      return data.buffer;\n' +
        '    }\n' +
        '    if (utils.isURLSearchParams(data)) {\n' +
        "      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');\n" +
        '      return data.toString();\n' +
        '    }\n' +
        '    var isObjectPayload = utils.isObject(data);\n' +
        "    var contentType = headers && headers['Content-Type'];\n" +
        '    var isFileList;\n' +
        "    if ((isFileList = utils.isFileList(data)) || isObjectPayload && contentType === 'multipart/form-data') {\n" +
        '      var _FormData = this.env && this.env.FormData;\n' +
        '      return toFormData(isFileList ? {\n' +
        "        'files[]': data\n" +
        '      } : data, _FormData && new _FormData());\n' +
        "    } else if (isObjectPayload || contentType === 'application/json') {\n" +
        "      setContentTypeIfUnset(headers, 'application/json');\n" +
        '      return stringifySafely(data);\n' +
        '    }\n' +
        '    return data;\n' +
        '  }'
    ],
    transformResponse: [
      '[function] function transformResponse(data) {\n' +
        '    var transitional = this.transitional || defaults.transitional;\n' +
        '    var silentJSONParsing = transitional && transitional.silentJSONParsing;\n' +
        '    var forcedJSONParsing = transitional && transitional.forcedJSONParsing;\n' +
        "    var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';\n" +
        '    if (strictJSONParsing || forcedJSONParsing && utils.isString(data) && data.length) {\n' +
        '      try {\n' +
        '        return JSON.parse(data);\n' +
        '      } catch (e) {\n' +
        '        if (strictJSONParsing) {\n' +
        "          if (e.name === 'SyntaxError') {\n" +
        '            throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);\n' +
        '          }\n' +
        '          throw e;\n' +
        '        }\n' +
        '      }\n' +
        '    }\n' +
        '    return data;\n' +
        '  }'
    ],
    timeout: 0,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
      FormData: '[function] function FormData(options) {\n' +
        '  if (!(this instanceof FormData)) {\n' +
        '    return new FormData(options);\n' +
        '  }\n' +
        '  this._overheadLength = 0;\n' +
        '  this._valueLength = 0;\n' +
        '  this._valuesToMeasure = [];\n' +
        '  CombinedStream.call(this);\n' +
        '  options = options || {};\n' +
        '  for (var option in options) {\n' +
        '    this[option] = options[option];\n' +
        '  }\n' +
        '}'
    },
    validateStatus: '[function] function validateStatus(status) {\n' +
      '    return status >= 200 && status < 300;\n' +
      '  }',
    headers: {
      Accept: 'application/json, text/plain, */*',
      Authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI5OTQ5NmQ4YS0wOTY4LTQ1ZTUtYTg4Ni1lNGNkZjgxYTcwNzYiLCJlbWFpbCI6IjU0OTA2Y2MxLTk5ZTEtNDA2Yi04ZGU4LTFiZDlkNjAwNjI0YyIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2MTQ4NCwiZXhwIjoxNjg5MTQ3ODg0fQ.eA6iiKOi0Eqg3atb2z-kF1Zme28U86ieWdoxlBFxmmU',
      'Content-Type': '',
      'User-Agent': 'axios/0.27.2'
    },
    url: 'https://connect-api.dev.insiteflow.io/v1/connect/container/config?organizationId=711729a8-a473-47bf-b27f-8abc1ee52281&containerType=desktop',
    method: 'get'
  },
  code: 'ERR_BAD_REQUEST',
  status: 401
}
[2023-07-11 13:22:25.082] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 13:22:25.850] [info]  { response: 1 }
[2023-07-11 13:22:25.851] [error] Unhandled Exception {
  message: 'Request failed with status code 401',
  name: 'UnhandledRejection AxiosError',
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: '[function] function httpAdapter(config) {\n' +
      '  return new Promise(function dispatchHttpRequest(resolvePromise, rejectPromise) {\n' +
      '    var onCanceled;\n' +
      '    function done() {\n' +
      '      if (config.cancelToken) {\n' +
      '        config.cancelToken.unsubscribe(onCanceled);\n' +
      '      }\n' +
      '      if (config.signal) {\n' +
      "        config.signal.removeEventListener('abort', onCanceled);\n" +
      '      }\n' +
      '    }\n' +
      '    var resolve = function resolve(value) {\n' +
      '      done();\n' +
      '      resolvePromise(value);\n' +
      '    };\n' +
      '    var rejected = false;\n' +
      '    var reject = function reject(value) {\n' +
      '      done();\n' +
      '      rejected = true;\n' +
      '      rejectPromise(value);\n' +
      '    };\n' +
      '    var data = config.data;\n' +
      '    var headers = config.headers;\n' +
      '    var headerNames = {};\n' +
      '    Object.keys(headers).forEach(function storeLowerName(name) {\n' +
      '      headerNames[name.toLowerCase()] = name;\n' +
      '    });\n' +
      '\n' +
      '    // Set User-Agent (required by some servers)\n' +
      '    // See https://github.com/axios/axios/issues/69\n' +
      "    if ('user-agent' in headerNames) {\n" +
      '      // User-Agent is specified; handle case where no UA header is desired\n' +
      "      if (!headers[headerNames['user-agent']]) {\n" +
      "        delete headers[headerNames['user-agent']];\n" +
      '      }\n' +
      '      // Otherwise, use specified value\n' +
      '    } else {\n' +
      "      // Only set header if it hasn't been set in config\n" +
      "      headers['User-Agent'] = 'axios/' + VERSION;\n" +
      '    }\n' +
      '\n' +
      '    // support for https://www.npmjs.com/package/form-data api\n' +
      '    if (utils.isFormData(data) && utils.isFunction(data.getHeaders)) {\n' +
      '      Object.assign(headers, data.getHeaders());\n' +
      '    } else if (data && !utils.isStream(data)) {\n' +
      '      if (Buffer.isBuffer(data)) {\n' +
      '        // Nothing to do...\n' +
      '      } else if (utils.isArrayBuffer(data)) {\n' +
      '        data = Buffer.from(new Uint8Array(data));\n' +
      '      } else if (utils.isString(data)) {\n' +
      "        data = Buffer.from(data, 'utf-8');\n" +
      '      } else {\n' +
      "        return reject(new AxiosError('Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream', AxiosError.ERR_BAD_REQUEST, config));\n" +
      '      }\n' +
      '      if (config.maxBodyLength > -1 && data.length > config.maxBodyLength) {\n' +
      "        return reject(new AxiosError('Request body larger than maxBodyLength limit', AxiosError.ERR_BAD_REQUEST, config));\n" +
      '      }\n' +
      '\n' +
      '      // Add Content-Length header if data exists\n' +
      "      if (!headerNames['content-length']) {\n" +
      "        headers['Content-Length'] = data.length;\n" +
      '      }\n' +
      '    }\n' +
      '\n' +
      '    // HTTP basic authentication\n' +
      '    var auth = undefined;\n' +
      '    if (config.auth) {\n' +
      "      var username = config.auth.username || '';\n" +
      "      var password = config.auth.password || '';\n" +
      "      auth = username + ':' + password;\n" +
      '    }\n' +
      '\n' +
      '    // Parse url\n' +
      '    var fullPath = buildFullPath(config.baseURL, config.url);\n' +
      '    var parsed = url.parse(fullPath);\n' +
      '    var protocol = parsed.protocol || supportedProtocols[0];\n' +
      '    if (supportedProtocols.indexOf(protocol) === -1) {\n' +
      "      return reject(new AxiosError('Unsupported protocol ' + protocol, AxiosError.ERR_BAD_REQUEST, config));\n" +
      '    }\n' +
      '    if (!auth && parsed.auth) {\n' +
      "      var urlAuth = parsed.auth.split(':');\n" +
      "      var urlUsername = urlAuth[0] || '';\n" +
      "      var urlPassword = urlAuth[1] || '';\n" +
      "      auth = urlUsername + ':' + urlPassword;\n" +
      '    }\n' +
      '    if (auth && headerNames.authorization) {\n' +
      '      delete headers[headerNames.authorization];\n' +
      '    }\n' +
      '    var isHttpsRequest = isHttps.test(protocol);\n' +
      '    var agent = isHttpsRequest ? config.httpsAgent : config.httpAgent;\n' +
      '    try {\n' +
      "      buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\\?/, '');\n" +
      '    } catch (err) {\n' +
      '      var customErr = new Error(err.message);\n' +
      '      customErr.config = config;\n' +
      '      customErr.url = config.url;\n' +
      '      customErr.exists = true;\n' +
      '      reject(customErr);\n' +
      '    }\n' +
      '    var options = {\n' +
      "      path: buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\\?/, ''),\n" +
      '      method: config.method.toUpperCase(),\n' +
      '      headers: headers,\n' +
      '      agent: agent,\n' +
      '      agents: {\n' +
      '        http: config.httpAgent,\n' +
      '        https: config.httpsAgent\n' +
      '      },\n' +
      '      auth: auth\n' +
      '    };\n' +
      '    if (config.socketPath) {\n' +
      '      options.socketPath = config.socketPath;\n' +
      '    } else {\n' +
      '      options.hostname = parsed.hostname;\n' +
      '      options.port = parsed.port;\n' +
      '    }\n' +
      '    var proxy = config.proxy;\n' +
      '    if (!proxy && proxy !== false) {\n' +
      "      var proxyEnv = protocol.slice(0, -1) + '_proxy';\n" +
      '      var proxyUrl = process.env[proxyEnv] || process.env[proxyEnv.toUpperCase()];\n' +
      '      if (proxyUrl) {\n' +
      '        var parsedProxyUrl = url.parse(proxyUrl);\n' +
      '        var noProxyEnv = process.env.no_proxy || process.env.NO_PROXY;\n' +
      '        var shouldProxy = true;\n' +
      '        if (noProxyEnv) {\n' +
      "          var noProxy = noProxyEnv.split(',').map(function trim(s) {\n" +
      '            return s.trim();\n' +
      '          });\n' +
      '          shouldProxy = !noProxy.some(function proxyMatch(proxyElement) {\n' +
      '            if (!proxyElement) {\n' +
      '              return false;\n' +
      '            }\n' +
      "            if (proxyElement === '*') {\n" +
      '              return true;\n' +
      '            }\n' +
      "            if (proxyElement[0] === '.' && parsed.hostname.substr(parsed.hostname.length - proxyElement.length) === proxyElement) {\n" +
      '              return true;\n' +
      '            }\n' +
      '            return parsed.hostname === proxyElement;\n' +
      '          });\n' +
      '        }\n' +
      '        if (shouldProxy) {\n' +
      '          proxy = {\n' +
      '            host: parsedProxyUrl.hostname,\n' +
      '            port: parsedProxyUrl.port,\n' +
      '            protocol: parsedProxyUrl.protocol\n' +
      '          };\n' +
      '          if (parsedProxyUrl.auth) {\n' +
      "            var proxyUrlAuth = parsedProxyUrl.auth.split(':');\n" +
      '            proxy.auth = {\n' +
      '              username: proxyUrlAuth[0],\n' +
      '              password: proxyUrlAuth[1]\n' +
      '            };\n' +
      '          }\n' +
      '        }\n' +
      '      }\n' +
      '    }\n' +
      '    if (proxy) {\n' +
      "      options.headers.host = parsed.hostname + (parsed.port ? ':' + parsed.port : '');\n" +
      "      setProxy(options, proxy, protocol + '//' + parsed.hostname + (parsed.port ? ':' + parsed.port : '') + options.path);\n" +
      '    }\n' +
      '    var transport;\n' +
      '    var isHttpsProxy = isHttpsRequest && (proxy ? isHttps.test(proxy.protocol) : true);\n' +
      '    if (config.transport) {\n' +
      '      transport = config.transport;\n' +
      '    } else if (config.maxRedirects === 0) {\n' +
      '      transport = isHttpsProxy ? https : http;\n' +
      '    } else {\n' +
      '      if (config.maxRedirects) {\n' +
      '        options.maxRedirects = config.maxRedirects;\n' +
      '      }\n' +
      '      if (config.beforeRedirect) {\n' +
      '        options.beforeRedirect = config.beforeRedirect;\n' +
      '      }\n' +
      '      transport = isHttpsProxy ? httpsFollow : httpFollow;\n' +
      '    }\n' +
      '    if (config.maxBodyLength > -1) {\n' +
      '      options.maxBodyLength = config.maxBodyLength;\n' +
      '    }\n' +
      '    if (config.insecureHTTPParser) {\n' +
      '      options.insecureHTTPParser = config.insecureHTTPParser;\n' +
      '    }\n' +
      '\n' +
      '    // Create the request\n' +
      '    var req = transport.request(options, function handleResponse(res) {\n' +
      '      if (req.aborted) return;\n' +
      '\n' +
      '      // uncompress the response body transparently if required\n' +
      '      var stream = res;\n' +
      '\n' +
      '      // return the last request in case of redirects\n' +
      '      var lastRequest = res.req || req;\n' +
      '\n' +
      '      // if no content, is HEAD request or decompress disabled we should not decompress\n' +
      "      if (res.statusCode !== 204 && lastRequest.method !== 'HEAD' && config.decompress !== false) {\n" +
      "        switch (res.headers['content-encoding']) {\n" +
      '          /*eslint default-case:0*/\n' +
      "          case 'gzip':\n" +
      "          case 'compress':\n" +
      "          case 'deflate':\n" +
      '            // add the unzipper to the body stream processing pipeline\n' +
      '            stream = stream.pipe(zlib.createUnzip());\n' +
      '\n' +
      '            // remove the content-encoding in order to not confuse downstream operations\n' +
      "            delete res.headers['content-encoding'];\n" +
      '            break;\n' +
      '        }\n' +
      '      }\n' +
      '      var response = {\n' +
      '        status: res.statusCode,\n' +
      '        statusText: res.statusMessage,\n' +
      '        headers: res.headers,\n' +
      '        config: config,\n' +
      '        request: lastRequest\n' +
      '      };\n' +
      "      if (config.responseType === 'stream') {\n" +
      '        response.data = stream;\n' +
      '        settle(resolve, reject, response);\n' +
      '      } else {\n' +
      '        var responseBuffer = [];\n' +
      '        var totalResponseBytes = 0;\n' +
      "        stream.on('data', function handleStreamData(chunk) {\n" +
      '          responseBuffer.push(chunk);\n' +
      '          totalResponseBytes += chunk.length;\n' +
      '\n' +
      '          // make sure the content length is not over the maxContentLength if specified\n' +
      '          if (config.maxContentLength > -1 && totalResponseBytes > config.maxContentLength) {\n' +
      '            // stream.destoy() emit aborted event before calling reject() on Node.js v16\n' +
      '            rejected = true;\n' +
      '            stream.destroy();\n' +
      "            reject(new AxiosError('maxContentLength size of ' + config.maxContentLength + ' exceeded', AxiosError.ERR_BAD_RESPONSE, config, lastRequest));\n" +
      '          }\n' +
      '        });\n' +
      "        stream.on('aborted', function handlerStreamAborted() {\n" +
      '          if (rejected) {\n' +
      '            return;\n' +
      '          }\n' +
      '          stream.destroy();\n' +
      "          reject(new AxiosError('maxContentLength size of ' + config.maxContentLength + ' exceeded', AxiosError.ERR_BAD_RESPONSE, config, lastRequest));\n" +
      '        });\n' +
      "        stream.on('error', function handleStreamError(err) {\n" +
      '          if (req.aborted) return;\n' +
      '          reject(AxiosError.from(err, null, config, lastRequest));\n' +
      '        });\n' +
      "        stream.on('end', function handleStreamEnd() {\n" +
      '          try {\n' +
      '            var responseData = responseBuffer.length === 1 ? responseBuffer[0] : Buffer.concat(responseBuffer);\n' +
      "            if (config.responseType !== 'arraybuffer') {\n" +
      '              responseData = responseData.toString(config.responseEncoding);\n' +
      "              if (!config.responseEncoding || config.responseEncoding === 'utf8') {\n" +
      '                responseData = utils.stripBOM(responseData);\n' +
      '              }\n' +
      '            }\n' +
      '            response.data = responseData;\n' +
      '          } catch (err) {\n' +
      '            reject(AxiosError.from(err, null, config, response.request, response));\n' +
      '          }\n' +
      '          settle(resolve, reject, response);\n' +
      '        });\n' +
      '      }\n' +
      '    });\n' +
      '\n' +
      '    // Handle errors\n' +
      "    req.on('error', function handleRequestError(err) {\n" +
      '      // @todo remove\n' +
      '      // if (req.aborted && err.code !== AxiosError.ERR_FR_TOO_MANY_REDIRECTS) return;\n' +
      '      reject(AxiosError.from(err, null, config, req));\n' +
      '    });\n' +
      '\n' +
      ' '... 2346 more characters,
    transformRequest: [
      '[function] function transformRequest(data, headers) {\n' +
        "    normalizeHeaderName(headers, 'Accept');\n" +
        "    normalizeHeaderName(headers, 'Content-Type');\n" +
        '    if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {\n' +
        '      return data;\n' +
        '    }\n' +
        '    if (utils.isArrayBufferView(data)) {\n' +
        '      return data.buffer;\n' +
        '    }\n' +
        '    if (utils.isURLSearchParams(data)) {\n' +
        "      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');\n" +
        '      return data.toString();\n' +
        '    }\n' +
        '    var isObjectPayload = utils.isObject(data);\n' +
        "    var contentType = headers && headers['Content-Type'];\n" +
        '    var isFileList;\n' +
        "    if ((isFileList = utils.isFileList(data)) || isObjectPayload && contentType === 'multipart/form-data') {\n" +
        '      var _FormData = this.env && this.env.FormData;\n' +
        '      return toFormData(isFileList ? {\n' +
        "        'files[]': data\n" +
        '      } : data, _FormData && new _FormData());\n' +
        "    } else if (isObjectPayload || contentType === 'application/json') {\n" +
        "      setContentTypeIfUnset(headers, 'application/json');\n" +
        '      return stringifySafely(data);\n' +
        '    }\n' +
        '    return data;\n' +
        '  }'
    ],
    transformResponse: [
      '[function] function transformResponse(data) {\n' +
        '    var transitional = this.transitional || defaults.transitional;\n' +
        '    var silentJSONParsing = transitional && transitional.silentJSONParsing;\n' +
        '    var forcedJSONParsing = transitional && transitional.forcedJSONParsing;\n' +
        "    var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';\n" +
        '    if (strictJSONParsing || forcedJSONParsing && utils.isString(data) && data.length) {\n' +
        '      try {\n' +
        '        return JSON.parse(data);\n' +
        '      } catch (e) {\n' +
        '        if (strictJSONParsing) {\n' +
        "          if (e.name === 'SyntaxError') {\n" +
        '            throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);\n' +
        '          }\n' +
        '          throw e;\n' +
        '        }\n' +
        '      }\n' +
        '    }\n' +
        '    return data;\n' +
        '  }'
    ],
    timeout: 0,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
      FormData: '[function] function FormData(options) {\n' +
        '  if (!(this instanceof FormData)) {\n' +
        '    return new FormData(options);\n' +
        '  }\n' +
        '  this._overheadLength = 0;\n' +
        '  this._valueLength = 0;\n' +
        '  this._valuesToMeasure = [];\n' +
        '  CombinedStream.call(this);\n' +
        '  options = options || {};\n' +
        '  for (var option in options) {\n' +
        '    this[option] = options[option];\n' +
        '  }\n' +
        '}'
    },
    validateStatus: '[function] function validateStatus(status) {\n' +
      '    return status >= 200 && status < 300;\n' +
      '  }',
    headers: {
      Accept: 'application/json, text/plain, */*',
      Authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI5OTQ5NmQ4YS0wOTY4LTQ1ZTUtYTg4Ni1lNGNkZjgxYTcwNzYiLCJlbWFpbCI6IjU0OTA2Y2MxLTk5ZTEtNDA2Yi04ZGU4LTFiZDlkNjAwNjI0YyIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2MTQ4NCwiZXhwIjoxNjg5MTQ3ODg0fQ.eA6iiKOi0Eqg3atb2z-kF1Zme28U86ieWdoxlBFxmmU',
      'Content-Type': '',
      'User-Agent': 'axios/0.27.2'
    },
    url: 'https://connect-api.dev.insiteflow.io/v1/connect/container/config?organizationId=711729a8-a473-47bf-b27f-8abc1ee52281&containerType=desktop',
    method: 'get'
  },
  code: 'ERR_BAD_REQUEST',
  status: 401
}
[2023-07-11 13:22:30.832] [error] Unhandled Exception {
  message: 'Request failed with status code 401',
  name: 'UnhandledRejection AxiosError',
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: '[function] function httpAdapter(config) {\n' +
      '  return new Promise(function dispatchHttpRequest(resolvePromise, rejectPromise) {\n' +
      '    var onCanceled;\n' +
      '    function done() {\n' +
      '      if (config.cancelToken) {\n' +
      '        config.cancelToken.unsubscribe(onCanceled);\n' +
      '      }\n' +
      '      if (config.signal) {\n' +
      "        config.signal.removeEventListener('abort', onCanceled);\n" +
      '      }\n' +
      '    }\n' +
      '    var resolve = function resolve(value) {\n' +
      '      done();\n' +
      '      resolvePromise(value);\n' +
      '    };\n' +
      '    var rejected = false;\n' +
      '    var reject = function reject(value) {\n' +
      '      done();\n' +
      '      rejected = true;\n' +
      '      rejectPromise(value);\n' +
      '    };\n' +
      '    var data = config.data;\n' +
      '    var headers = config.headers;\n' +
      '    var headerNames = {};\n' +
      '    Object.keys(headers).forEach(function storeLowerName(name) {\n' +
      '      headerNames[name.toLowerCase()] = name;\n' +
      '    });\n' +
      '\n' +
      '    // Set User-Agent (required by some servers)\n' +
      '    // See https://github.com/axios/axios/issues/69\n' +
      "    if ('user-agent' in headerNames) {\n" +
      '      // User-Agent is specified; handle case where no UA header is desired\n' +
      "      if (!headers[headerNames['user-agent']]) {\n" +
      "        delete headers[headerNames['user-agent']];\n" +
      '      }\n' +
      '      // Otherwise, use specified value\n' +
      '    } else {\n' +
      "      // Only set header if it hasn't been set in config\n" +
      "      headers['User-Agent'] = 'axios/' + VERSION;\n" +
      '    }\n' +
      '\n' +
      '    // support for https://www.npmjs.com/package/form-data api\n' +
      '    if (utils.isFormData(data) && utils.isFunction(data.getHeaders)) {\n' +
      '      Object.assign(headers, data.getHeaders());\n' +
      '    } else if (data && !utils.isStream(data)) {\n' +
      '      if (Buffer.isBuffer(data)) {\n' +
      '        // Nothing to do...\n' +
      '      } else if (utils.isArrayBuffer(data)) {\n' +
      '        data = Buffer.from(new Uint8Array(data));\n' +
      '      } else if (utils.isString(data)) {\n' +
      "        data = Buffer.from(data, 'utf-8');\n" +
      '      } else {\n' +
      "        return reject(new AxiosError('Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream', AxiosError.ERR_BAD_REQUEST, config));\n" +
      '      }\n' +
      '      if (config.maxBodyLength > -1 && data.length > config.maxBodyLength) {\n' +
      "        return reject(new AxiosError('Request body larger than maxBodyLength limit', AxiosError.ERR_BAD_REQUEST, config));\n" +
      '      }\n' +
      '\n' +
      '      // Add Content-Length header if data exists\n' +
      "      if (!headerNames['content-length']) {\n" +
      "        headers['Content-Length'] = data.length;\n" +
      '      }\n' +
      '    }\n' +
      '\n' +
      '    // HTTP basic authentication\n' +
      '    var auth = undefined;\n' +
      '    if (config.auth) {\n' +
      "      var username = config.auth.username || '';\n" +
      "      var password = config.auth.password || '';\n" +
      "      auth = username + ':' + password;\n" +
      '    }\n' +
      '\n' +
      '    // Parse url\n' +
      '    var fullPath = buildFullPath(config.baseURL, config.url);\n' +
      '    var parsed = url.parse(fullPath);\n' +
      '    var protocol = parsed.protocol || supportedProtocols[0];\n' +
      '    if (supportedProtocols.indexOf(protocol) === -1) {\n' +
      "      return reject(new AxiosError('Unsupported protocol ' + protocol, AxiosError.ERR_BAD_REQUEST, config));\n" +
      '    }\n' +
      '    if (!auth && parsed.auth) {\n' +
      "      var urlAuth = parsed.auth.split(':');\n" +
      "      var urlUsername = urlAuth[0] || '';\n" +
      "      var urlPassword = urlAuth[1] || '';\n" +
      "      auth = urlUsername + ':' + urlPassword;\n" +
      '    }\n' +
      '    if (auth && headerNames.authorization) {\n' +
      '      delete headers[headerNames.authorization];\n' +
      '    }\n' +
      '    var isHttpsRequest = isHttps.test(protocol);\n' +
      '    var agent = isHttpsRequest ? config.httpsAgent : config.httpAgent;\n' +
      '    try {\n' +
      "      buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\\?/, '');\n" +
      '    } catch (err) {\n' +
      '      var customErr = new Error(err.message);\n' +
      '      customErr.config = config;\n' +
      '      customErr.url = config.url;\n' +
      '      customErr.exists = true;\n' +
      '      reject(customErr);\n' +
      '    }\n' +
      '    var options = {\n' +
      "      path: buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\\?/, ''),\n" +
      '      method: config.method.toUpperCase(),\n' +
      '      headers: headers,\n' +
      '      agent: agent,\n' +
      '      agents: {\n' +
      '        http: config.httpAgent,\n' +
      '        https: config.httpsAgent\n' +
      '      },\n' +
      '      auth: auth\n' +
      '    };\n' +
      '    if (config.socketPath) {\n' +
      '      options.socketPath = config.socketPath;\n' +
      '    } else {\n' +
      '      options.hostname = parsed.hostname;\n' +
      '      options.port = parsed.port;\n' +
      '    }\n' +
      '    var proxy = config.proxy;\n' +
      '    if (!proxy && proxy !== false) {\n' +
      "      var proxyEnv = protocol.slice(0, -1) + '_proxy';\n" +
      '      var proxyUrl = process.env[proxyEnv] || process.env[proxyEnv.toUpperCase()];\n' +
      '      if (proxyUrl) {\n' +
      '        var parsedProxyUrl = url.parse(proxyUrl);\n' +
      '        var noProxyEnv = process.env.no_proxy || process.env.NO_PROXY;\n' +
      '        var shouldProxy = true;\n' +
      '        if (noProxyEnv) {\n' +
      "          var noProxy = noProxyEnv.split(',').map(function trim(s) {\n" +
      '            return s.trim();\n' +
      '          });\n' +
      '          shouldProxy = !noProxy.some(function proxyMatch(proxyElement) {\n' +
      '            if (!proxyElement) {\n' +
      '              return false;\n' +
      '            }\n' +
      "            if (proxyElement === '*') {\n" +
      '              return true;\n' +
      '            }\n' +
      "            if (proxyElement[0] === '.' && parsed.hostname.substr(parsed.hostname.length - proxyElement.length) === proxyElement) {\n" +
      '              return true;\n' +
      '            }\n' +
      '            return parsed.hostname === proxyElement;\n' +
      '          });\n' +
      '        }\n' +
      '        if (shouldProxy) {\n' +
      '          proxy = {\n' +
      '            host: parsedProxyUrl.hostname,\n' +
      '            port: parsedProxyUrl.port,\n' +
      '            protocol: parsedProxyUrl.protocol\n' +
      '          };\n' +
      '          if (parsedProxyUrl.auth) {\n' +
      "            var proxyUrlAuth = parsedProxyUrl.auth.split(':');\n" +
      '            proxy.auth = {\n' +
      '              username: proxyUrlAuth[0],\n' +
      '              password: proxyUrlAuth[1]\n' +
      '            };\n' +
      '          }\n' +
      '        }\n' +
      '      }\n' +
      '    }\n' +
      '    if (proxy) {\n' +
      "      options.headers.host = parsed.hostname + (parsed.port ? ':' + parsed.port : '');\n" +
      "      setProxy(options, proxy, protocol + '//' + parsed.hostname + (parsed.port ? ':' + parsed.port : '') + options.path);\n" +
      '    }\n' +
      '    var transport;\n' +
      '    var isHttpsProxy = isHttpsRequest && (proxy ? isHttps.test(proxy.protocol) : true);\n' +
      '    if (config.transport) {\n' +
      '      transport = config.transport;\n' +
      '    } else if (config.maxRedirects === 0) {\n' +
      '      transport = isHttpsProxy ? https : http;\n' +
      '    } else {\n' +
      '      if (config.maxRedirects) {\n' +
      '        options.maxRedirects = config.maxRedirects;\n' +
      '      }\n' +
      '      if (config.beforeRedirect) {\n' +
      '        options.beforeRedirect = config.beforeRedirect;\n' +
      '      }\n' +
      '      transport = isHttpsProxy ? httpsFollow : httpFollow;\n' +
      '    }\n' +
      '    if (config.maxBodyLength > -1) {\n' +
      '      options.maxBodyLength = config.maxBodyLength;\n' +
      '    }\n' +
      '    if (config.insecureHTTPParser) {\n' +
      '      options.insecureHTTPParser = config.insecureHTTPParser;\n' +
      '    }\n' +
      '\n' +
      '    // Create the request\n' +
      '    var req = transport.request(options, function handleResponse(res) {\n' +
      '      if (req.aborted) return;\n' +
      '\n' +
      '      // uncompress the response body transparently if required\n' +
      '      var stream = res;\n' +
      '\n' +
      '      // return the last request in case of redirects\n' +
      '      var lastRequest = res.req || req;\n' +
      '\n' +
      '      // if no content, is HEAD request or decompress disabled we should not decompress\n' +
      "      if (res.statusCode !== 204 && lastRequest.method !== 'HEAD' && config.decompress !== false) {\n" +
      "        switch (res.headers['content-encoding']) {\n" +
      '          /*eslint default-case:0*/\n' +
      "          case 'gzip':\n" +
      "          case 'compress':\n" +
      "          case 'deflate':\n" +
      '            // add the unzipper to the body stream processing pipeline\n' +
      '            stream = stream.pipe(zlib.createUnzip());\n' +
      '\n' +
      '            // remove the content-encoding in order to not confuse downstream operations\n' +
      "            delete res.headers['content-encoding'];\n" +
      '            break;\n' +
      '        }\n' +
      '      }\n' +
      '      var response = {\n' +
      '        status: res.statusCode,\n' +
      '        statusText: res.statusMessage,\n' +
      '        headers: res.headers,\n' +
      '        config: config,\n' +
      '        request: lastRequest\n' +
      '      };\n' +
      "      if (config.responseType === 'stream') {\n" +
      '        response.data = stream;\n' +
      '        settle(resolve, reject, response);\n' +
      '      } else {\n' +
      '        var responseBuffer = [];\n' +
      '        var totalResponseBytes = 0;\n' +
      "        stream.on('data', function handleStreamData(chunk) {\n" +
      '          responseBuffer.push(chunk);\n' +
      '          totalResponseBytes += chunk.length;\n' +
      '\n' +
      '          // make sure the content length is not over the maxContentLength if specified\n' +
      '          if (config.maxContentLength > -1 && totalResponseBytes > config.maxContentLength) {\n' +
      '            // stream.destoy() emit aborted event before calling reject() on Node.js v16\n' +
      '            rejected = true;\n' +
      '            stream.destroy();\n' +
      "            reject(new AxiosError('maxContentLength size of ' + config.maxContentLength + ' exceeded', AxiosError.ERR_BAD_RESPONSE, config, lastRequest));\n" +
      '          }\n' +
      '        });\n' +
      "        stream.on('aborted', function handlerStreamAborted() {\n" +
      '          if (rejected) {\n' +
      '            return;\n' +
      '          }\n' +
      '          stream.destroy();\n' +
      "          reject(new AxiosError('maxContentLength size of ' + config.maxContentLength + ' exceeded', AxiosError.ERR_BAD_RESPONSE, config, lastRequest));\n" +
      '        });\n' +
      "        stream.on('error', function handleStreamError(err) {\n" +
      '          if (req.aborted) return;\n' +
      '          reject(AxiosError.from(err, null, config, lastRequest));\n' +
      '        });\n' +
      "        stream.on('end', function handleStreamEnd() {\n" +
      '          try {\n' +
      '            var responseData = responseBuffer.length === 1 ? responseBuffer[0] : Buffer.concat(responseBuffer);\n' +
      "            if (config.responseType !== 'arraybuffer') {\n" +
      '              responseData = responseData.toString(config.responseEncoding);\n' +
      "              if (!config.responseEncoding || config.responseEncoding === 'utf8') {\n" +
      '                responseData = utils.stripBOM(responseData);\n' +
      '              }\n' +
      '            }\n' +
      '            response.data = responseData;\n' +
      '          } catch (err) {\n' +
      '            reject(AxiosError.from(err, null, config, response.request, response));\n' +
      '          }\n' +
      '          settle(resolve, reject, response);\n' +
      '        });\n' +
      '      }\n' +
      '    });\n' +
      '\n' +
      '    // Handle errors\n' +
      "    req.on('error', function handleRequestError(err) {\n" +
      '      // @todo remove\n' +
      '      // if (req.aborted && err.code !== AxiosError.ERR_FR_TOO_MANY_REDIRECTS) return;\n' +
      '      reject(AxiosError.from(err, null, config, req));\n' +
      '    });\n' +
      '\n' +
      ' '... 2346 more characters,
    transformRequest: [
      '[function] function transformRequest(data, headers) {\n' +
        "    normalizeHeaderName(headers, 'Accept');\n" +
        "    normalizeHeaderName(headers, 'Content-Type');\n" +
        '    if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {\n' +
        '      return data;\n' +
        '    }\n' +
        '    if (utils.isArrayBufferView(data)) {\n' +
        '      return data.buffer;\n' +
        '    }\n' +
        '    if (utils.isURLSearchParams(data)) {\n' +
        "      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');\n" +
        '      return data.toString();\n' +
        '    }\n' +
        '    var isObjectPayload = utils.isObject(data);\n' +
        "    var contentType = headers && headers['Content-Type'];\n" +
        '    var isFileList;\n' +
        "    if ((isFileList = utils.isFileList(data)) || isObjectPayload && contentType === 'multipart/form-data') {\n" +
        '      var _FormData = this.env && this.env.FormData;\n' +
        '      return toFormData(isFileList ? {\n' +
        "        'files[]': data\n" +
        '      } : data, _FormData && new _FormData());\n' +
        "    } else if (isObjectPayload || contentType === 'application/json') {\n" +
        "      setContentTypeIfUnset(headers, 'application/json');\n" +
        '      return stringifySafely(data);\n' +
        '    }\n' +
        '    return data;\n' +
        '  }'
    ],
    transformResponse: [
      '[function] function transformResponse(data) {\n' +
        '    var transitional = this.transitional || defaults.transitional;\n' +
        '    var silentJSONParsing = transitional && transitional.silentJSONParsing;\n' +
        '    var forcedJSONParsing = transitional && transitional.forcedJSONParsing;\n' +
        "    var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';\n" +
        '    if (strictJSONParsing || forcedJSONParsing && utils.isString(data) && data.length) {\n' +
        '      try {\n' +
        '        return JSON.parse(data);\n' +
        '      } catch (e) {\n' +
        '        if (strictJSONParsing) {\n' +
        "          if (e.name === 'SyntaxError') {\n" +
        '            throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);\n' +
        '          }\n' +
        '          throw e;\n' +
        '        }\n' +
        '      }\n' +
        '    }\n' +
        '    return data;\n' +
        '  }'
    ],
    timeout: 0,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
      FormData: '[function] function FormData(options) {\n' +
        '  if (!(this instanceof FormData)) {\n' +
        '    return new FormData(options);\n' +
        '  }\n' +
        '  this._overheadLength = 0;\n' +
        '  this._valueLength = 0;\n' +
        '  this._valuesToMeasure = [];\n' +
        '  CombinedStream.call(this);\n' +
        '  options = options || {};\n' +
        '  for (var option in options) {\n' +
        '    this[option] = options[option];\n' +
        '  }\n' +
        '}'
    },
    validateStatus: '[function] function validateStatus(status) {\n' +
      '    return status >= 200 && status < 300;\n' +
      '  }',
    headers: {
      Accept: 'application/json, text/plain, */*',
      Authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI5OTQ5NmQ4YS0wOTY4LTQ1ZTUtYTg4Ni1lNGNkZjgxYTcwNzYiLCJlbWFpbCI6IjU0OTA2Y2MxLTk5ZTEtNDA2Yi04ZGU4LTFiZDlkNjAwNjI0YyIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2MTQ4NCwiZXhwIjoxNjg5MTQ3ODg0fQ.eA6iiKOi0Eqg3atb2z-kF1Zme28U86ieWdoxlBFxmmU',
      'Content-Type': '',
      'User-Agent': 'axios/0.27.2'
    },
    url: 'https://connect-api.dev.insiteflow.io/v1/connect/container/config?organizationId=711729a8-a473-47bf-b27f-8abc1ee52281&containerType=desktop',
    method: 'get'
  },
  code: 'ERR_BAD_REQUEST',
  status: 401
}
[2023-07-11 13:22:35.083] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 13:22:35.647] [error] Unhandled Exception {
  message: 'Request failed with status code 401',
  name: 'UnhandledRejection AxiosError',
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: '[function] function httpAdapter(config) {\n' +
      '  return new Promise(function dispatchHttpRequest(resolvePromise, rejectPromise) {\n' +
      '    var onCanceled;\n' +
      '    function done() {\n' +
      '      if (config.cancelToken) {\n' +
      '        config.cancelToken.unsubscribe(onCanceled);\n' +
      '      }\n' +
      '      if (config.signal) {\n' +
      "        config.signal.removeEventListener('abort', onCanceled);\n" +
      '      }\n' +
      '    }\n' +
      '    var resolve = function resolve(value) {\n' +
      '      done();\n' +
      '      resolvePromise(value);\n' +
      '    };\n' +
      '    var rejected = false;\n' +
      '    var reject = function reject(value) {\n' +
      '      done();\n' +
      '      rejected = true;\n' +
      '      rejectPromise(value);\n' +
      '    };\n' +
      '    var data = config.data;\n' +
      '    var headers = config.headers;\n' +
      '    var headerNames = {};\n' +
      '    Object.keys(headers).forEach(function storeLowerName(name) {\n' +
      '      headerNames[name.toLowerCase()] = name;\n' +
      '    });\n' +
      '\n' +
      '    // Set User-Agent (required by some servers)\n' +
      '    // See https://github.com/axios/axios/issues/69\n' +
      "    if ('user-agent' in headerNames) {\n" +
      '      // User-Agent is specified; handle case where no UA header is desired\n' +
      "      if (!headers[headerNames['user-agent']]) {\n" +
      "        delete headers[headerNames['user-agent']];\n" +
      '      }\n' +
      '      // Otherwise, use specified value\n' +
      '    } else {\n' +
      "      // Only set header if it hasn't been set in config\n" +
      "      headers['User-Agent'] = 'axios/' + VERSION;\n" +
      '    }\n' +
      '\n' +
      '    // support for https://www.npmjs.com/package/form-data api\n' +
      '    if (utils.isFormData(data) && utils.isFunction(data.getHeaders)) {\n' +
      '      Object.assign(headers, data.getHeaders());\n' +
      '    } else if (data && !utils.isStream(data)) {\n' +
      '      if (Buffer.isBuffer(data)) {\n' +
      '        // Nothing to do...\n' +
      '      } else if (utils.isArrayBuffer(data)) {\n' +
      '        data = Buffer.from(new Uint8Array(data));\n' +
      '      } else if (utils.isString(data)) {\n' +
      "        data = Buffer.from(data, 'utf-8');\n" +
      '      } else {\n' +
      "        return reject(new AxiosError('Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream', AxiosError.ERR_BAD_REQUEST, config));\n" +
      '      }\n' +
      '      if (config.maxBodyLength > -1 && data.length > config.maxBodyLength) {\n' +
      "        return reject(new AxiosError('Request body larger than maxBodyLength limit', AxiosError.ERR_BAD_REQUEST, config));\n" +
      '      }\n' +
      '\n' +
      '      // Add Content-Length header if data exists\n' +
      "      if (!headerNames['content-length']) {\n" +
      "        headers['Content-Length'] = data.length;\n" +
      '      }\n' +
      '    }\n' +
      '\n' +
      '    // HTTP basic authentication\n' +
      '    var auth = undefined;\n' +
      '    if (config.auth) {\n' +
      "      var username = config.auth.username || '';\n" +
      "      var password = config.auth.password || '';\n" +
      "      auth = username + ':' + password;\n" +
      '    }\n' +
      '\n' +
      '    // Parse url\n' +
      '    var fullPath = buildFullPath(config.baseURL, config.url);\n' +
      '    var parsed = url.parse(fullPath);\n' +
      '    var protocol = parsed.protocol || supportedProtocols[0];\n' +
      '    if (supportedProtocols.indexOf(protocol) === -1) {\n' +
      "      return reject(new AxiosError('Unsupported protocol ' + protocol, AxiosError.ERR_BAD_REQUEST, config));\n" +
      '    }\n' +
      '    if (!auth && parsed.auth) {\n' +
      "      var urlAuth = parsed.auth.split(':');\n" +
      "      var urlUsername = urlAuth[0] || '';\n" +
      "      var urlPassword = urlAuth[1] || '';\n" +
      "      auth = urlUsername + ':' + urlPassword;\n" +
      '    }\n' +
      '    if (auth && headerNames.authorization) {\n' +
      '      delete headers[headerNames.authorization];\n' +
      '    }\n' +
      '    var isHttpsRequest = isHttps.test(protocol);\n' +
      '    var agent = isHttpsRequest ? config.httpsAgent : config.httpAgent;\n' +
      '    try {\n' +
      "      buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\\?/, '');\n" +
      '    } catch (err) {\n' +
      '      var customErr = new Error(err.message);\n' +
      '      customErr.config = config;\n' +
      '      customErr.url = config.url;\n' +
      '      customErr.exists = true;\n' +
      '      reject(customErr);\n' +
      '    }\n' +
      '    var options = {\n' +
      "      path: buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\\?/, ''),\n" +
      '      method: config.method.toUpperCase(),\n' +
      '      headers: headers,\n' +
      '      agent: agent,\n' +
      '      agents: {\n' +
      '        http: config.httpAgent,\n' +
      '        https: config.httpsAgent\n' +
      '      },\n' +
      '      auth: auth\n' +
      '    };\n' +
      '    if (config.socketPath) {\n' +
      '      options.socketPath = config.socketPath;\n' +
      '    } else {\n' +
      '      options.hostname = parsed.hostname;\n' +
      '      options.port = parsed.port;\n' +
      '    }\n' +
      '    var proxy = config.proxy;\n' +
      '    if (!proxy && proxy !== false) {\n' +
      "      var proxyEnv = protocol.slice(0, -1) + '_proxy';\n" +
      '      var proxyUrl = process.env[proxyEnv] || process.env[proxyEnv.toUpperCase()];\n' +
      '      if (proxyUrl) {\n' +
      '        var parsedProxyUrl = url.parse(proxyUrl);\n' +
      '        var noProxyEnv = process.env.no_proxy || process.env.NO_PROXY;\n' +
      '        var shouldProxy = true;\n' +
      '        if (noProxyEnv) {\n' +
      "          var noProxy = noProxyEnv.split(',').map(function trim(s) {\n" +
      '            return s.trim();\n' +
      '          });\n' +
      '          shouldProxy = !noProxy.some(function proxyMatch(proxyElement) {\n' +
      '            if (!proxyElement) {\n' +
      '              return false;\n' +
      '            }\n' +
      "            if (proxyElement === '*') {\n" +
      '              return true;\n' +
      '            }\n' +
      "            if (proxyElement[0] === '.' && parsed.hostname.substr(parsed.hostname.length - proxyElement.length) === proxyElement) {\n" +
      '              return true;\n' +
      '            }\n' +
      '            return parsed.hostname === proxyElement;\n' +
      '          });\n' +
      '        }\n' +
      '        if (shouldProxy) {\n' +
      '          proxy = {\n' +
      '            host: parsedProxyUrl.hostname,\n' +
      '            port: parsedProxyUrl.port,\n' +
      '            protocol: parsedProxyUrl.protocol\n' +
      '          };\n' +
      '          if (parsedProxyUrl.auth) {\n' +
      "            var proxyUrlAuth = parsedProxyUrl.auth.split(':');\n" +
      '            proxy.auth = {\n' +
      '              username: proxyUrlAuth[0],\n' +
      '              password: proxyUrlAuth[1]\n' +
      '            };\n' +
      '          }\n' +
      '        }\n' +
      '      }\n' +
      '    }\n' +
      '    if (proxy) {\n' +
      "      options.headers.host = parsed.hostname + (parsed.port ? ':' + parsed.port : '');\n" +
      "      setProxy(options, proxy, protocol + '//' + parsed.hostname + (parsed.port ? ':' + parsed.port : '') + options.path);\n" +
      '    }\n' +
      '    var transport;\n' +
      '    var isHttpsProxy = isHttpsRequest && (proxy ? isHttps.test(proxy.protocol) : true);\n' +
      '    if (config.transport) {\n' +
      '      transport = config.transport;\n' +
      '    } else if (config.maxRedirects === 0) {\n' +
      '      transport = isHttpsProxy ? https : http;\n' +
      '    } else {\n' +
      '      if (config.maxRedirects) {\n' +
      '        options.maxRedirects = config.maxRedirects;\n' +
      '      }\n' +
      '      if (config.beforeRedirect) {\n' +
      '        options.beforeRedirect = config.beforeRedirect;\n' +
      '      }\n' +
      '      transport = isHttpsProxy ? httpsFollow : httpFollow;\n' +
      '    }\n' +
      '    if (config.maxBodyLength > -1) {\n' +
      '      options.maxBodyLength = config.maxBodyLength;\n' +
      '    }\n' +
      '    if (config.insecureHTTPParser) {\n' +
      '      options.insecureHTTPParser = config.insecureHTTPParser;\n' +
      '    }\n' +
      '\n' +
      '    // Create the request\n' +
      '    var req = transport.request(options, function handleResponse(res) {\n' +
      '      if (req.aborted) return;\n' +
      '\n' +
      '      // uncompress the response body transparently if required\n' +
      '      var stream = res;\n' +
      '\n' +
      '      // return the last request in case of redirects\n' +
      '      var lastRequest = res.req || req;\n' +
      '\n' +
      '      // if no content, is HEAD request or decompress disabled we should not decompress\n' +
      "      if (res.statusCode !== 204 && lastRequest.method !== 'HEAD' && config.decompress !== false) {\n" +
      "        switch (res.headers['content-encoding']) {\n" +
      '          /*eslint default-case:0*/\n' +
      "          case 'gzip':\n" +
      "          case 'compress':\n" +
      "          case 'deflate':\n" +
      '            // add the unzipper to the body stream processing pipeline\n' +
      '            stream = stream.pipe(zlib.createUnzip());\n' +
      '\n' +
      '            // remove the content-encoding in order to not confuse downstream operations\n' +
      "            delete res.headers['content-encoding'];\n" +
      '            break;\n' +
      '        }\n' +
      '      }\n' +
      '      var response = {\n' +
      '        status: res.statusCode,\n' +
      '        statusText: res.statusMessage,\n' +
      '        headers: res.headers,\n' +
      '        config: config,\n' +
      '        request: lastRequest\n' +
      '      };\n' +
      "      if (config.responseType === 'stream') {\n" +
      '        response.data = stream;\n' +
      '        settle(resolve, reject, response);\n' +
      '      } else {\n' +
      '        var responseBuffer = [];\n' +
      '        var totalResponseBytes = 0;\n' +
      "        stream.on('data', function handleStreamData(chunk) {\n" +
      '          responseBuffer.push(chunk);\n' +
      '          totalResponseBytes += chunk.length;\n' +
      '\n' +
      '          // make sure the content length is not over the maxContentLength if specified\n' +
      '          if (config.maxContentLength > -1 && totalResponseBytes > config.maxContentLength) {\n' +
      '            // stream.destoy() emit aborted event before calling reject() on Node.js v16\n' +
      '            rejected = true;\n' +
      '            stream.destroy();\n' +
      "            reject(new AxiosError('maxContentLength size of ' + config.maxContentLength + ' exceeded', AxiosError.ERR_BAD_RESPONSE, config, lastRequest));\n" +
      '          }\n' +
      '        });\n' +
      "        stream.on('aborted', function handlerStreamAborted() {\n" +
      '          if (rejected) {\n' +
      '            return;\n' +
      '          }\n' +
      '          stream.destroy();\n' +
      "          reject(new AxiosError('maxContentLength size of ' + config.maxContentLength + ' exceeded', AxiosError.ERR_BAD_RESPONSE, config, lastRequest));\n" +
      '        });\n' +
      "        stream.on('error', function handleStreamError(err) {\n" +
      '          if (req.aborted) return;\n' +
      '          reject(AxiosError.from(err, null, config, lastRequest));\n' +
      '        });\n' +
      "        stream.on('end', function handleStreamEnd() {\n" +
      '          try {\n' +
      '            var responseData = responseBuffer.length === 1 ? responseBuffer[0] : Buffer.concat(responseBuffer);\n' +
      "            if (config.responseType !== 'arraybuffer') {\n" +
      '              responseData = responseData.toString(config.responseEncoding);\n' +
      "              if (!config.responseEncoding || config.responseEncoding === 'utf8') {\n" +
      '                responseData = utils.stripBOM(responseData);\n' +
      '              }\n' +
      '            }\n' +
      '            response.data = responseData;\n' +
      '          } catch (err) {\n' +
      '            reject(AxiosError.from(err, null, config, response.request, response));\n' +
      '          }\n' +
      '          settle(resolve, reject, response);\n' +
      '        });\n' +
      '      }\n' +
      '    });\n' +
      '\n' +
      '    // Handle errors\n' +
      "    req.on('error', function handleRequestError(err) {\n" +
      '      // @todo remove\n' +
      '      // if (req.aborted && err.code !== AxiosError.ERR_FR_TOO_MANY_REDIRECTS) return;\n' +
      '      reject(AxiosError.from(err, null, config, req));\n' +
      '    });\n' +
      '\n' +
      ' '... 2346 more characters,
    transformRequest: [
      '[function] function transformRequest(data, headers) {\n' +
        "    normalizeHeaderName(headers, 'Accept');\n" +
        "    normalizeHeaderName(headers, 'Content-Type');\n" +
        '    if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {\n' +
        '      return data;\n' +
        '    }\n' +
        '    if (utils.isArrayBufferView(data)) {\n' +
        '      return data.buffer;\n' +
        '    }\n' +
        '    if (utils.isURLSearchParams(data)) {\n' +
        "      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');\n" +
        '      return data.toString();\n' +
        '    }\n' +
        '    var isObjectPayload = utils.isObject(data);\n' +
        "    var contentType = headers && headers['Content-Type'];\n" +
        '    var isFileList;\n' +
        "    if ((isFileList = utils.isFileList(data)) || isObjectPayload && contentType === 'multipart/form-data') {\n" +
        '      var _FormData = this.env && this.env.FormData;\n' +
        '      return toFormData(isFileList ? {\n' +
        "        'files[]': data\n" +
        '      } : data, _FormData && new _FormData());\n' +
        "    } else if (isObjectPayload || contentType === 'application/json') {\n" +
        "      setContentTypeIfUnset(headers, 'application/json');\n" +
        '      return stringifySafely(data);\n' +
        '    }\n' +
        '    return data;\n' +
        '  }'
    ],
    transformResponse: [
      '[function] function transformResponse(data) {\n' +
        '    var transitional = this.transitional || defaults.transitional;\n' +
        '    var silentJSONParsing = transitional && transitional.silentJSONParsing;\n' +
        '    var forcedJSONParsing = transitional && transitional.forcedJSONParsing;\n' +
        "    var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';\n" +
        '    if (strictJSONParsing || forcedJSONParsing && utils.isString(data) && data.length) {\n' +
        '      try {\n' +
        '        return JSON.parse(data);\n' +
        '      } catch (e) {\n' +
        '        if (strictJSONParsing) {\n' +
        "          if (e.name === 'SyntaxError') {\n" +
        '            throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);\n' +
        '          }\n' +
        '          throw e;\n' +
        '        }\n' +
        '      }\n' +
        '    }\n' +
        '    return data;\n' +
        '  }'
    ],
    timeout: 0,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
      FormData: '[function] function FormData(options) {\n' +
        '  if (!(this instanceof FormData)) {\n' +
        '    return new FormData(options);\n' +
        '  }\n' +
        '  this._overheadLength = 0;\n' +
        '  this._valueLength = 0;\n' +
        '  this._valuesToMeasure = [];\n' +
        '  CombinedStream.call(this);\n' +
        '  options = options || {};\n' +
        '  for (var option in options) {\n' +
        '    this[option] = options[option];\n' +
        '  }\n' +
        '}'
    },
    validateStatus: '[function] function validateStatus(status) {\n' +
      '    return status >= 200 && status < 300;\n' +
      '  }',
    headers: {
      Accept: 'application/json, text/plain, */*',
      Authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI5OTQ5NmQ4YS0wOTY4LTQ1ZTUtYTg4Ni1lNGNkZjgxYTcwNzYiLCJlbWFpbCI6IjU0OTA2Y2MxLTk5ZTEtNDA2Yi04ZGU4LTFiZDlkNjAwNjI0YyIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2MTQ4NCwiZXhwIjoxNjg5MTQ3ODg0fQ.eA6iiKOi0Eqg3atb2z-kF1Zme28U86ieWdoxlBFxmmU',
      'Content-Type': '',
      'User-Agent': 'axios/0.27.2'
    },
    url: 'https://connect-api.dev.insiteflow.io/v1/connect/container/config?organizationId=711729a8-a473-47bf-b27f-8abc1ee52281&containerType=desktop',
    method: 'get'
  },
  code: 'ERR_BAD_REQUEST',
  status: 401
}
[2023-07-11 13:22:35.870] [info]  { response: 1 }
[2023-07-11 13:22:40.871] [error] Unhandled Exception {
  message: 'Request failed with status code 401',
  name: 'UnhandledRejection AxiosError',
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: '[function] function httpAdapter(config) {\n' +
      '  return new Promise(function dispatchHttpRequest(resolvePromise, rejectPromise) {\n' +
      '    var onCanceled;\n' +
      '    function done() {\n' +
      '      if (config.cancelToken) {\n' +
      '        config.cancelToken.unsubscribe(onCanceled);\n' +
      '      }\n' +
      '      if (config.signal) {\n' +
      "        config.signal.removeEventListener('abort', onCanceled);\n" +
      '      }\n' +
      '    }\n' +
      '    var resolve = function resolve(value) {\n' +
      '      done();\n' +
      '      resolvePromise(value);\n' +
      '    };\n' +
      '    var rejected = false;\n' +
      '    var reject = function reject(value) {\n' +
      '      done();\n' +
      '      rejected = true;\n' +
      '      rejectPromise(value);\n' +
      '    };\n' +
      '    var data = config.data;\n' +
      '    var headers = config.headers;\n' +
      '    var headerNames = {};\n' +
      '    Object.keys(headers).forEach(function storeLowerName(name) {\n' +
      '      headerNames[name.toLowerCase()] = name;\n' +
      '    });\n' +
      '\n' +
      '    // Set User-Agent (required by some servers)\n' +
      '    // See https://github.com/axios/axios/issues/69\n' +
      "    if ('user-agent' in headerNames) {\n" +
      '      // User-Agent is specified; handle case where no UA header is desired\n' +
      "      if (!headers[headerNames['user-agent']]) {\n" +
      "        delete headers[headerNames['user-agent']];\n" +
      '      }\n' +
      '      // Otherwise, use specified value\n' +
      '    } else {\n' +
      "      // Only set header if it hasn't been set in config\n" +
      "      headers['User-Agent'] = 'axios/' + VERSION;\n" +
      '    }\n' +
      '\n' +
      '    // support for https://www.npmjs.com/package/form-data api\n' +
      '    if (utils.isFormData(data) && utils.isFunction(data.getHeaders)) {\n' +
      '      Object.assign(headers, data.getHeaders());\n' +
      '    } else if (data && !utils.isStream(data)) {\n' +
      '      if (Buffer.isBuffer(data)) {\n' +
      '        // Nothing to do...\n' +
      '      } else if (utils.isArrayBuffer(data)) {\n' +
      '        data = Buffer.from(new Uint8Array(data));\n' +
      '      } else if (utils.isString(data)) {\n' +
      "        data = Buffer.from(data, 'utf-8');\n" +
      '      } else {\n' +
      "        return reject(new AxiosError('Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream', AxiosError.ERR_BAD_REQUEST, config));\n" +
      '      }\n' +
      '      if (config.maxBodyLength > -1 && data.length > config.maxBodyLength) {\n' +
      "        return reject(new AxiosError('Request body larger than maxBodyLength limit', AxiosError.ERR_BAD_REQUEST, config));\n" +
      '      }\n' +
      '\n' +
      '      // Add Content-Length header if data exists\n' +
      "      if (!headerNames['content-length']) {\n" +
      "        headers['Content-Length'] = data.length;\n" +
      '      }\n' +
      '    }\n' +
      '\n' +
      '    // HTTP basic authentication\n' +
      '    var auth = undefined;\n' +
      '    if (config.auth) {\n' +
      "      var username = config.auth.username || '';\n" +
      "      var password = config.auth.password || '';\n" +
      "      auth = username + ':' + password;\n" +
      '    }\n' +
      '\n' +
      '    // Parse url\n' +
      '    var fullPath = buildFullPath(config.baseURL, config.url);\n' +
      '    var parsed = url.parse(fullPath);\n' +
      '    var protocol = parsed.protocol || supportedProtocols[0];\n' +
      '    if (supportedProtocols.indexOf(protocol) === -1) {\n' +
      "      return reject(new AxiosError('Unsupported protocol ' + protocol, AxiosError.ERR_BAD_REQUEST, config));\n" +
      '    }\n' +
      '    if (!auth && parsed.auth) {\n' +
      "      var urlAuth = parsed.auth.split(':');\n" +
      "      var urlUsername = urlAuth[0] || '';\n" +
      "      var urlPassword = urlAuth[1] || '';\n" +
      "      auth = urlUsername + ':' + urlPassword;\n" +
      '    }\n' +
      '    if (auth && headerNames.authorization) {\n' +
      '      delete headers[headerNames.authorization];\n' +
      '    }\n' +
      '    var isHttpsRequest = isHttps.test(protocol);\n' +
      '    var agent = isHttpsRequest ? config.httpsAgent : config.httpAgent;\n' +
      '    try {\n' +
      "      buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\\?/, '');\n" +
      '    } catch (err) {\n' +
      '      var customErr = new Error(err.message);\n' +
      '      customErr.config = config;\n' +
      '      customErr.url = config.url;\n' +
      '      customErr.exists = true;\n' +
      '      reject(customErr);\n' +
      '    }\n' +
      '    var options = {\n' +
      "      path: buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\\?/, ''),\n" +
      '      method: config.method.toUpperCase(),\n' +
      '      headers: headers,\n' +
      '      agent: agent,\n' +
      '      agents: {\n' +
      '        http: config.httpAgent,\n' +
      '        https: config.httpsAgent\n' +
      '      },\n' +
      '      auth: auth\n' +
      '    };\n' +
      '    if (config.socketPath) {\n' +
      '      options.socketPath = config.socketPath;\n' +
      '    } else {\n' +
      '      options.hostname = parsed.hostname;\n' +
      '      options.port = parsed.port;\n' +
      '    }\n' +
      '    var proxy = config.proxy;\n' +
      '    if (!proxy && proxy !== false) {\n' +
      "      var proxyEnv = protocol.slice(0, -1) + '_proxy';\n" +
      '      var proxyUrl = process.env[proxyEnv] || process.env[proxyEnv.toUpperCase()];\n' +
      '      if (proxyUrl) {\n' +
      '        var parsedProxyUrl = url.parse(proxyUrl);\n' +
      '        var noProxyEnv = process.env.no_proxy || process.env.NO_PROXY;\n' +
      '        var shouldProxy = true;\n' +
      '        if (noProxyEnv) {\n' +
      "          var noProxy = noProxyEnv.split(',').map(function trim(s) {\n" +
      '            return s.trim();\n' +
      '          });\n' +
      '          shouldProxy = !noProxy.some(function proxyMatch(proxyElement) {\n' +
      '            if (!proxyElement) {\n' +
      '              return false;\n' +
      '            }\n' +
      "            if (proxyElement === '*') {\n" +
      '              return true;\n' +
      '            }\n' +
      "            if (proxyElement[0] === '.' && parsed.hostname.substr(parsed.hostname.length - proxyElement.length) === proxyElement) {\n" +
      '              return true;\n' +
      '            }\n' +
      '            return parsed.hostname === proxyElement;\n' +
      '          });\n' +
      '        }\n' +
      '        if (shouldProxy) {\n' +
      '          proxy = {\n' +
      '            host: parsedProxyUrl.hostname,\n' +
      '            port: parsedProxyUrl.port,\n' +
      '            protocol: parsedProxyUrl.protocol\n' +
      '          };\n' +
      '          if (parsedProxyUrl.auth) {\n' +
      "            var proxyUrlAuth = parsedProxyUrl.auth.split(':');\n" +
      '            proxy.auth = {\n' +
      '              username: proxyUrlAuth[0],\n' +
      '              password: proxyUrlAuth[1]\n' +
      '            };\n' +
      '          }\n' +
      '        }\n' +
      '      }\n' +
      '    }\n' +
      '    if (proxy) {\n' +
      "      options.headers.host = parsed.hostname + (parsed.port ? ':' + parsed.port : '');\n" +
      "      setProxy(options, proxy, protocol + '//' + parsed.hostname + (parsed.port ? ':' + parsed.port : '') + options.path);\n" +
      '    }\n' +
      '    var transport;\n' +
      '    var isHttpsProxy = isHttpsRequest && (proxy ? isHttps.test(proxy.protocol) : true);\n' +
      '    if (config.transport) {\n' +
      '      transport = config.transport;\n' +
      '    } else if (config.maxRedirects === 0) {\n' +
      '      transport = isHttpsProxy ? https : http;\n' +
      '    } else {\n' +
      '      if (config.maxRedirects) {\n' +
      '        options.maxRedirects = config.maxRedirects;\n' +
      '      }\n' +
      '      if (config.beforeRedirect) {\n' +
      '        options.beforeRedirect = config.beforeRedirect;\n' +
      '      }\n' +
      '      transport = isHttpsProxy ? httpsFollow : httpFollow;\n' +
      '    }\n' +
      '    if (config.maxBodyLength > -1) {\n' +
      '      options.maxBodyLength = config.maxBodyLength;\n' +
      '    }\n' +
      '    if (config.insecureHTTPParser) {\n' +
      '      options.insecureHTTPParser = config.insecureHTTPParser;\n' +
      '    }\n' +
      '\n' +
      '    // Create the request\n' +
      '    var req = transport.request(options, function handleResponse(res) {\n' +
      '      if (req.aborted) return;\n' +
      '\n' +
      '      // uncompress the response body transparently if required\n' +
      '      var stream = res;\n' +
      '\n' +
      '      // return the last request in case of redirects\n' +
      '      var lastRequest = res.req || req;\n' +
      '\n' +
      '      // if no content, is HEAD request or decompress disabled we should not decompress\n' +
      "      if (res.statusCode !== 204 && lastRequest.method !== 'HEAD' && config.decompress !== false) {\n" +
      "        switch (res.headers['content-encoding']) {\n" +
      '          /*eslint default-case:0*/\n' +
      "          case 'gzip':\n" +
      "          case 'compress':\n" +
      "          case 'deflate':\n" +
      '            // add the unzipper to the body stream processing pipeline\n' +
      '            stream = stream.pipe(zlib.createUnzip());\n' +
      '\n' +
      '            // remove the content-encoding in order to not confuse downstream operations\n' +
      "            delete res.headers['content-encoding'];\n" +
      '            break;\n' +
      '        }\n' +
      '      }\n' +
      '      var response = {\n' +
      '        status: res.statusCode,\n' +
      '        statusText: res.statusMessage,\n' +
      '        headers: res.headers,\n' +
      '        config: config,\n' +
      '        request: lastRequest\n' +
      '      };\n' +
      "      if (config.responseType === 'stream') {\n" +
      '        response.data = stream;\n' +
      '        settle(resolve, reject, response);\n' +
      '      } else {\n' +
      '        var responseBuffer = [];\n' +
      '        var totalResponseBytes = 0;\n' +
      "        stream.on('data', function handleStreamData(chunk) {\n" +
      '          responseBuffer.push(chunk);\n' +
      '          totalResponseBytes += chunk.length;\n' +
      '\n' +
      '          // make sure the content length is not over the maxContentLength if specified\n' +
      '          if (config.maxContentLength > -1 && totalResponseBytes > config.maxContentLength) {\n' +
      '            // stream.destoy() emit aborted event before calling reject() on Node.js v16\n' +
      '            rejected = true;\n' +
      '            stream.destroy();\n' +
      "            reject(new AxiosError('maxContentLength size of ' + config.maxContentLength + ' exceeded', AxiosError.ERR_BAD_RESPONSE, config, lastRequest));\n" +
      '          }\n' +
      '        });\n' +
      "        stream.on('aborted', function handlerStreamAborted() {\n" +
      '          if (rejected) {\n' +
      '            return;\n' +
      '          }\n' +
      '          stream.destroy();\n' +
      "          reject(new AxiosError('maxContentLength size of ' + config.maxContentLength + ' exceeded', AxiosError.ERR_BAD_RESPONSE, config, lastRequest));\n" +
      '        });\n' +
      "        stream.on('error', function handleStreamError(err) {\n" +
      '          if (req.aborted) return;\n' +
      '          reject(AxiosError.from(err, null, config, lastRequest));\n' +
      '        });\n' +
      "        stream.on('end', function handleStreamEnd() {\n" +
      '          try {\n' +
      '            var responseData = responseBuffer.length === 1 ? responseBuffer[0] : Buffer.concat(responseBuffer);\n' +
      "            if (config.responseType !== 'arraybuffer') {\n" +
      '              responseData = responseData.toString(config.responseEncoding);\n' +
      "              if (!config.responseEncoding || config.responseEncoding === 'utf8') {\n" +
      '                responseData = utils.stripBOM(responseData);\n' +
      '              }\n' +
      '            }\n' +
      '            response.data = responseData;\n' +
      '          } catch (err) {\n' +
      '            reject(AxiosError.from(err, null, config, response.request, response));\n' +
      '          }\n' +
      '          settle(resolve, reject, response);\n' +
      '        });\n' +
      '      }\n' +
      '    });\n' +
      '\n' +
      '    // Handle errors\n' +
      "    req.on('error', function handleRequestError(err) {\n" +
      '      // @todo remove\n' +
      '      // if (req.aborted && err.code !== AxiosError.ERR_FR_TOO_MANY_REDIRECTS) return;\n' +
      '      reject(AxiosError.from(err, null, config, req));\n' +
      '    });\n' +
      '\n' +
      ' '... 2346 more characters,
    transformRequest: [
      '[function] function transformRequest(data, headers) {\n' +
        "    normalizeHeaderName(headers, 'Accept');\n" +
        "    normalizeHeaderName(headers, 'Content-Type');\n" +
        '    if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {\n' +
        '      return data;\n' +
        '    }\n' +
        '    if (utils.isArrayBufferView(data)) {\n' +
        '      return data.buffer;\n' +
        '    }\n' +
        '    if (utils.isURLSearchParams(data)) {\n' +
        "      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');\n" +
        '      return data.toString();\n' +
        '    }\n' +
        '    var isObjectPayload = utils.isObject(data);\n' +
        "    var contentType = headers && headers['Content-Type'];\n" +
        '    var isFileList;\n' +
        "    if ((isFileList = utils.isFileList(data)) || isObjectPayload && contentType === 'multipart/form-data') {\n" +
        '      var _FormData = this.env && this.env.FormData;\n' +
        '      return toFormData(isFileList ? {\n' +
        "        'files[]': data\n" +
        '      } : data, _FormData && new _FormData());\n' +
        "    } else if (isObjectPayload || contentType === 'application/json') {\n" +
        "      setContentTypeIfUnset(headers, 'application/json');\n" +
        '      return stringifySafely(data);\n' +
        '    }\n' +
        '    return data;\n' +
        '  }'
    ],
    transformResponse: [
      '[function] function transformResponse(data) {\n' +
        '    var transitional = this.transitional || defaults.transitional;\n' +
        '    var silentJSONParsing = transitional && transitional.silentJSONParsing;\n' +
        '    var forcedJSONParsing = transitional && transitional.forcedJSONParsing;\n' +
        "    var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';\n" +
        '    if (strictJSONParsing || forcedJSONParsing && utils.isString(data) && data.length) {\n' +
        '      try {\n' +
        '        return JSON.parse(data);\n' +
        '      } catch (e) {\n' +
        '        if (strictJSONParsing) {\n' +
        "          if (e.name === 'SyntaxError') {\n" +
        '            throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);\n' +
        '          }\n' +
        '          throw e;\n' +
        '        }\n' +
        '      }\n' +
        '    }\n' +
        '    return data;\n' +
        '  }'
    ],
    timeout: 0,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
      FormData: '[function] function FormData(options) {\n' +
        '  if (!(this instanceof FormData)) {\n' +
        '    return new FormData(options);\n' +
        '  }\n' +
        '  this._overheadLength = 0;\n' +
        '  this._valueLength = 0;\n' +
        '  this._valuesToMeasure = [];\n' +
        '  CombinedStream.call(this);\n' +
        '  options = options || {};\n' +
        '  for (var option in options) {\n' +
        '    this[option] = options[option];\n' +
        '  }\n' +
        '}'
    },
    validateStatus: '[function] function validateStatus(status) {\n' +
      '    return status >= 200 && status < 300;\n' +
      '  }',
    headers: {
      Accept: 'application/json, text/plain, */*',
      Authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI5OTQ5NmQ4YS0wOTY4LTQ1ZTUtYTg4Ni1lNGNkZjgxYTcwNzYiLCJlbWFpbCI6IjU0OTA2Y2MxLTk5ZTEtNDA2Yi04ZGU4LTFiZDlkNjAwNjI0YyIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2MTQ4NCwiZXhwIjoxNjg5MTQ3ODg0fQ.eA6iiKOi0Eqg3atb2z-kF1Zme28U86ieWdoxlBFxmmU',
      'Content-Type': '',
      'User-Agent': 'axios/0.27.2'
    },
    url: 'https://connect-api.dev.insiteflow.io/v1/connect/container/config?organizationId=711729a8-a473-47bf-b27f-8abc1ee52281&containerType=desktop',
    method: 'get'
  },
  code: 'ERR_BAD_REQUEST',
  status: 401
}
[2023-07-11 13:22:45.083] [info]  Sending request for query count to: https://staging-interact.iodinesoftware.com/api/query
[2023-07-11 13:22:45.683] [error] Unhandled Exception {
  message: 'Request failed with status code 401',
  name: 'UnhandledRejection AxiosError',
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: '[function] function httpAdapter(config) {\n' +
      '  return new Promise(function dispatchHttpRequest(resolvePromise, rejectPromise) {\n' +
      '    var onCanceled;\n' +
      '    function done() {\n' +
      '      if (config.cancelToken) {\n' +
      '        config.cancelToken.unsubscribe(onCanceled);\n' +
      '      }\n' +
      '      if (config.signal) {\n' +
      "        config.signal.removeEventListener('abort', onCanceled);\n" +
      '      }\n' +
      '    }\n' +
      '    var resolve = function resolve(value) {\n' +
      '      done();\n' +
      '      resolvePromise(value);\n' +
      '    };\n' +
      '    var rejected = false;\n' +
      '    var reject = function reject(value) {\n' +
      '      done();\n' +
      '      rejected = true;\n' +
      '      rejectPromise(value);\n' +
      '    };\n' +
      '    var data = config.data;\n' +
      '    var headers = config.headers;\n' +
      '    var headerNames = {};\n' +
      '    Object.keys(headers).forEach(function storeLowerName(name) {\n' +
      '      headerNames[name.toLowerCase()] = name;\n' +
      '    });\n' +
      '\n' +
      '    // Set User-Agent (required by some servers)\n' +
      '    // See https://github.com/axios/axios/issues/69\n' +
      "    if ('user-agent' in headerNames) {\n" +
      '      // User-Agent is specified; handle case where no UA header is desired\n' +
      "      if (!headers[headerNames['user-agent']]) {\n" +
      "        delete headers[headerNames['user-agent']];\n" +
      '      }\n' +
      '      // Otherwise, use specified value\n' +
      '    } else {\n' +
      "      // Only set header if it hasn't been set in config\n" +
      "      headers['User-Agent'] = 'axios/' + VERSION;\n" +
      '    }\n' +
      '\n' +
      '    // support for https://www.npmjs.com/package/form-data api\n' +
      '    if (utils.isFormData(data) && utils.isFunction(data.getHeaders)) {\n' +
      '      Object.assign(headers, data.getHeaders());\n' +
      '    } else if (data && !utils.isStream(data)) {\n' +
      '      if (Buffer.isBuffer(data)) {\n' +
      '        // Nothing to do...\n' +
      '      } else if (utils.isArrayBuffer(data)) {\n' +
      '        data = Buffer.from(new Uint8Array(data));\n' +
      '      } else if (utils.isString(data)) {\n' +
      "        data = Buffer.from(data, 'utf-8');\n" +
      '      } else {\n' +
      "        return reject(new AxiosError('Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream', AxiosError.ERR_BAD_REQUEST, config));\n" +
      '      }\n' +
      '      if (config.maxBodyLength > -1 && data.length > config.maxBodyLength) {\n' +
      "        return reject(new AxiosError('Request body larger than maxBodyLength limit', AxiosError.ERR_BAD_REQUEST, config));\n" +
      '      }\n' +
      '\n' +
      '      // Add Content-Length header if data exists\n' +
      "      if (!headerNames['content-length']) {\n" +
      "        headers['Content-Length'] = data.length;\n" +
      '      }\n' +
      '    }\n' +
      '\n' +
      '    // HTTP basic authentication\n' +
      '    var auth = undefined;\n' +
      '    if (config.auth) {\n' +
      "      var username = config.auth.username || '';\n" +
      "      var password = config.auth.password || '';\n" +
      "      auth = username + ':' + password;\n" +
      '    }\n' +
      '\n' +
      '    // Parse url\n' +
      '    var fullPath = buildFullPath(config.baseURL, config.url);\n' +
      '    var parsed = url.parse(fullPath);\n' +
      '    var protocol = parsed.protocol || supportedProtocols[0];\n' +
      '    if (supportedProtocols.indexOf(protocol) === -1) {\n' +
      "      return reject(new AxiosError('Unsupported protocol ' + protocol, AxiosError.ERR_BAD_REQUEST, config));\n" +
      '    }\n' +
      '    if (!auth && parsed.auth) {\n' +
      "      var urlAuth = parsed.auth.split(':');\n" +
      "      var urlUsername = urlAuth[0] || '';\n" +
      "      var urlPassword = urlAuth[1] || '';\n" +
      "      auth = urlUsername + ':' + urlPassword;\n" +
      '    }\n' +
      '    if (auth && headerNames.authorization) {\n' +
      '      delete headers[headerNames.authorization];\n' +
      '    }\n' +
      '    var isHttpsRequest = isHttps.test(protocol);\n' +
      '    var agent = isHttpsRequest ? config.httpsAgent : config.httpAgent;\n' +
      '    try {\n' +
      "      buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\\?/, '');\n" +
      '    } catch (err) {\n' +
      '      var customErr = new Error(err.message);\n' +
      '      customErr.config = config;\n' +
      '      customErr.url = config.url;\n' +
      '      customErr.exists = true;\n' +
      '      reject(customErr);\n' +
      '    }\n' +
      '    var options = {\n' +
      "      path: buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\\?/, ''),\n" +
      '      method: config.method.toUpperCase(),\n' +
      '      headers: headers,\n' +
      '      agent: agent,\n' +
      '      agents: {\n' +
      '        http: config.httpAgent,\n' +
      '        https: config.httpsAgent\n' +
      '      },\n' +
      '      auth: auth\n' +
      '    };\n' +
      '    if (config.socketPath) {\n' +
      '      options.socketPath = config.socketPath;\n' +
      '    } else {\n' +
      '      options.hostname = parsed.hostname;\n' +
      '      options.port = parsed.port;\n' +
      '    }\n' +
      '    var proxy = config.proxy;\n' +
      '    if (!proxy && proxy !== false) {\n' +
      "      var proxyEnv = protocol.slice(0, -1) + '_proxy';\n" +
      '      var proxyUrl = process.env[proxyEnv] || process.env[proxyEnv.toUpperCase()];\n' +
      '      if (proxyUrl) {\n' +
      '        var parsedProxyUrl = url.parse(proxyUrl);\n' +
      '        var noProxyEnv = process.env.no_proxy || process.env.NO_PROXY;\n' +
      '        var shouldProxy = true;\n' +
      '        if (noProxyEnv) {\n' +
      "          var noProxy = noProxyEnv.split(',').map(function trim(s) {\n" +
      '            return s.trim();\n' +
      '          });\n' +
      '          shouldProxy = !noProxy.some(function proxyMatch(proxyElement) {\n' +
      '            if (!proxyElement) {\n' +
      '              return false;\n' +
      '            }\n' +
      "            if (proxyElement === '*') {\n" +
      '              return true;\n' +
      '            }\n' +
      "            if (proxyElement[0] === '.' && parsed.hostname.substr(parsed.hostname.length - proxyElement.length) === proxyElement) {\n" +
      '              return true;\n' +
      '            }\n' +
      '            return parsed.hostname === proxyElement;\n' +
      '          });\n' +
      '        }\n' +
      '        if (shouldProxy) {\n' +
      '          proxy = {\n' +
      '            host: parsedProxyUrl.hostname,\n' +
      '            port: parsedProxyUrl.port,\n' +
      '            protocol: parsedProxyUrl.protocol\n' +
      '          };\n' +
      '          if (parsedProxyUrl.auth) {\n' +
      "            var proxyUrlAuth = parsedProxyUrl.auth.split(':');\n" +
      '            proxy.auth = {\n' +
      '              username: proxyUrlAuth[0],\n' +
      '              password: proxyUrlAuth[1]\n' +
      '            };\n' +
      '          }\n' +
      '        }\n' +
      '      }\n' +
      '    }\n' +
      '    if (proxy) {\n' +
      "      options.headers.host = parsed.hostname + (parsed.port ? ':' + parsed.port : '');\n" +
      "      setProxy(options, proxy, protocol + '//' + parsed.hostname + (parsed.port ? ':' + parsed.port : '') + options.path);\n" +
      '    }\n' +
      '    var transport;\n' +
      '    var isHttpsProxy = isHttpsRequest && (proxy ? isHttps.test(proxy.protocol) : true);\n' +
      '    if (config.transport) {\n' +
      '      transport = config.transport;\n' +
      '    } else if (config.maxRedirects === 0) {\n' +
      '      transport = isHttpsProxy ? https : http;\n' +
      '    } else {\n' +
      '      if (config.maxRedirects) {\n' +
      '        options.maxRedirects = config.maxRedirects;\n' +
      '      }\n' +
      '      if (config.beforeRedirect) {\n' +
      '        options.beforeRedirect = config.beforeRedirect;\n' +
      '      }\n' +
      '      transport = isHttpsProxy ? httpsFollow : httpFollow;\n' +
      '    }\n' +
      '    if (config.maxBodyLength > -1) {\n' +
      '      options.maxBodyLength = config.maxBodyLength;\n' +
      '    }\n' +
      '    if (config.insecureHTTPParser) {\n' +
      '      options.insecureHTTPParser = config.insecureHTTPParser;\n' +
      '    }\n' +
      '\n' +
      '    // Create the request\n' +
      '    var req = transport.request(options, function handleResponse(res) {\n' +
      '      if (req.aborted) return;\n' +
      '\n' +
      '      // uncompress the response body transparently if required\n' +
      '      var stream = res;\n' +
      '\n' +
      '      // return the last request in case of redirects\n' +
      '      var lastRequest = res.req || req;\n' +
      '\n' +
      '      // if no content, is HEAD request or decompress disabled we should not decompress\n' +
      "      if (res.statusCode !== 204 && lastRequest.method !== 'HEAD' && config.decompress !== false) {\n" +
      "        switch (res.headers['content-encoding']) {\n" +
      '          /*eslint default-case:0*/\n' +
      "          case 'gzip':\n" +
      "          case 'compress':\n" +
      "          case 'deflate':\n" +
      '            // add the unzipper to the body stream processing pipeline\n' +
      '            stream = stream.pipe(zlib.createUnzip());\n' +
      '\n' +
      '            // remove the content-encoding in order to not confuse downstream operations\n' +
      "            delete res.headers['content-encoding'];\n" +
      '            break;\n' +
      '        }\n' +
      '      }\n' +
      '      var response = {\n' +
      '        status: res.statusCode,\n' +
      '        statusText: res.statusMessage,\n' +
      '        headers: res.headers,\n' +
      '        config: config,\n' +
      '        request: lastRequest\n' +
      '      };\n' +
      "      if (config.responseType === 'stream') {\n" +
      '        response.data = stream;\n' +
      '        settle(resolve, reject, response);\n' +
      '      } else {\n' +
      '        var responseBuffer = [];\n' +
      '        var totalResponseBytes = 0;\n' +
      "        stream.on('data', function handleStreamData(chunk) {\n" +
      '          responseBuffer.push(chunk);\n' +
      '          totalResponseBytes += chunk.length;\n' +
      '\n' +
      '          // make sure the content length is not over the maxContentLength if specified\n' +
      '          if (config.maxContentLength > -1 && totalResponseBytes > config.maxContentLength) {\n' +
      '            // stream.destoy() emit aborted event before calling reject() on Node.js v16\n' +
      '            rejected = true;\n' +
      '            stream.destroy();\n' +
      "            reject(new AxiosError('maxContentLength size of ' + config.maxContentLength + ' exceeded', AxiosError.ERR_BAD_RESPONSE, config, lastRequest));\n" +
      '          }\n' +
      '        });\n' +
      "        stream.on('aborted', function handlerStreamAborted() {\n" +
      '          if (rejected) {\n' +
      '            return;\n' +
      '          }\n' +
      '          stream.destroy();\n' +
      "          reject(new AxiosError('maxContentLength size of ' + config.maxContentLength + ' exceeded', AxiosError.ERR_BAD_RESPONSE, config, lastRequest));\n" +
      '        });\n' +
      "        stream.on('error', function handleStreamError(err) {\n" +
      '          if (req.aborted) return;\n' +
      '          reject(AxiosError.from(err, null, config, lastRequest));\n' +
      '        });\n' +
      "        stream.on('end', function handleStreamEnd() {\n" +
      '          try {\n' +
      '            var responseData = responseBuffer.length === 1 ? responseBuffer[0] : Buffer.concat(responseBuffer);\n' +
      "            if (config.responseType !== 'arraybuffer') {\n" +
      '              responseData = responseData.toString(config.responseEncoding);\n' +
      "              if (!config.responseEncoding || config.responseEncoding === 'utf8') {\n" +
      '                responseData = utils.stripBOM(responseData);\n' +
      '              }\n' +
      '            }\n' +
      '            response.data = responseData;\n' +
      '          } catch (err) {\n' +
      '            reject(AxiosError.from(err, null, config, response.request, response));\n' +
      '          }\n' +
      '          settle(resolve, reject, response);\n' +
      '        });\n' +
      '      }\n' +
      '    });\n' +
      '\n' +
      '    // Handle errors\n' +
      "    req.on('error', function handleRequestError(err) {\n" +
      '      // @todo remove\n' +
      '      // if (req.aborted && err.code !== AxiosError.ERR_FR_TOO_MANY_REDIRECTS) return;\n' +
      '      reject(AxiosError.from(err, null, config, req));\n' +
      '    });\n' +
      '\n' +
      ' '... 2346 more characters,
    transformRequest: [
      '[function] function transformRequest(data, headers) {\n' +
        "    normalizeHeaderName(headers, 'Accept');\n" +
        "    normalizeHeaderName(headers, 'Content-Type');\n" +
        '    if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {\n' +
        '      return data;\n' +
        '    }\n' +
        '    if (utils.isArrayBufferView(data)) {\n' +
        '      return data.buffer;\n' +
        '    }\n' +
        '    if (utils.isURLSearchParams(data)) {\n' +
        "      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');\n" +
        '      return data.toString();\n' +
        '    }\n' +
        '    var isObjectPayload = utils.isObject(data);\n' +
        "    var contentType = headers && headers['Content-Type'];\n" +
        '    var isFileList;\n' +
        "    if ((isFileList = utils.isFileList(data)) || isObjectPayload && contentType === 'multipart/form-data') {\n" +
        '      var _FormData = this.env && this.env.FormData;\n' +
        '      return toFormData(isFileList ? {\n' +
        "        'files[]': data\n" +
        '      } : data, _FormData && new _FormData());\n' +
        "    } else if (isObjectPayload || contentType === 'application/json') {\n" +
        "      setContentTypeIfUnset(headers, 'application/json');\n" +
        '      return stringifySafely(data);\n' +
        '    }\n' +
        '    return data;\n' +
        '  }'
    ],
    transformResponse: [
      '[function] function transformResponse(data) {\n' +
        '    var transitional = this.transitional || defaults.transitional;\n' +
        '    var silentJSONParsing = transitional && transitional.silentJSONParsing;\n' +
        '    var forcedJSONParsing = transitional && transitional.forcedJSONParsing;\n' +
        "    var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';\n" +
        '    if (strictJSONParsing || forcedJSONParsing && utils.isString(data) && data.length) {\n' +
        '      try {\n' +
        '        return JSON.parse(data);\n' +
        '      } catch (e) {\n' +
        '        if (strictJSONParsing) {\n' +
        "          if (e.name === 'SyntaxError') {\n" +
        '            throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);\n' +
        '          }\n' +
        '          throw e;\n' +
        '        }\n' +
        '      }\n' +
        '    }\n' +
        '    return data;\n' +
        '  }'
    ],
    timeout: 0,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
      FormData: '[function] function FormData(options) {\n' +
        '  if (!(this instanceof FormData)) {\n' +
        '    return new FormData(options);\n' +
        '  }\n' +
        '  this._overheadLength = 0;\n' +
        '  this._valueLength = 0;\n' +
        '  this._valuesToMeasure = [];\n' +
        '  CombinedStream.call(this);\n' +
        '  options = options || {};\n' +
        '  for (var option in options) {\n' +
        '    this[option] = options[option];\n' +
        '  }\n' +
        '}'
    },
    validateStatus: '[function] function validateStatus(status) {\n' +
      '    return status >= 200 && status < 300;\n' +
      '  }',
    headers: {
      Accept: 'application/json, text/plain, */*',
      Authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI5OTQ5NmQ4YS0wOTY4LTQ1ZTUtYTg4Ni1lNGNkZjgxYTcwNzYiLCJlbWFpbCI6IjU0OTA2Y2MxLTk5ZTEtNDA2Yi04ZGU4LTFiZDlkNjAwNjI0YyIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2MTQ4NCwiZXhwIjoxNjg5MTQ3ODg0fQ.eA6iiKOi0Eqg3atb2z-kF1Zme28U86ieWdoxlBFxmmU',
      'Content-Type': '',
      'User-Agent': 'axios/0.27.2'
    },
    url: 'https://connect-api.dev.insiteflow.io/v1/connect/container/config?organizationId=711729a8-a473-47bf-b27f-8abc1ee52281&containerType=desktop',
    method: 'get'
  },
  code: 'ERR_BAD_REQUEST',
  status: 401
}
[2023-07-11 13:22:45.909] [info]  { response: 1 }
[2023-07-11 13:22:50.700] [error] Unhandled Exception {
  message: 'Request failed with status code 401',
  name: 'UnhandledRejection AxiosError',
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: '[function] function httpAdapter(config) {\n' +
      '  return new Promise(function dispatchHttpRequest(resolvePromise, rejectPromise) {\n' +
      '    var onCanceled;\n' +
      '    function done() {\n' +
      '      if (config.cancelToken) {\n' +
      '        config.cancelToken.unsubscribe(onCanceled);\n' +
      '      }\n' +
      '      if (config.signal) {\n' +
      "        config.signal.removeEventListener('abort', onCanceled);\n" +
      '      }\n' +
      '    }\n' +
      '    var resolve = function resolve(value) {\n' +
      '      done();\n' +
      '      resolvePromise(value);\n' +
      '    };\n' +
      '    var rejected = false;\n' +
      '    var reject = function reject(value) {\n' +
      '      done();\n' +
      '      rejected = true;\n' +
      '      rejectPromise(value);\n' +
      '    };\n' +
      '    var data = config.data;\n' +
      '    var headers = config.headers;\n' +
      '    var headerNames = {};\n' +
      '    Object.keys(headers).forEach(function storeLowerName(name) {\n' +
      '      headerNames[name.toLowerCase()] = name;\n' +
      '    });\n' +
      '\n' +
      '    // Set User-Agent (required by some servers)\n' +
      '    // See https://github.com/axios/axios/issues/69\n' +
      "    if ('user-agent' in headerNames) {\n" +
      '      // User-Agent is specified; handle case where no UA header is desired\n' +
      "      if (!headers[headerNames['user-agent']]) {\n" +
      "        delete headers[headerNames['user-agent']];\n" +
      '      }\n' +
      '      // Otherwise, use specified value\n' +
      '    } else {\n' +
      "      // Only set header if it hasn't been set in config\n" +
      "      headers['User-Agent'] = 'axios/' + VERSION;\n" +
      '    }\n' +
      '\n' +
      '    // support for https://www.npmjs.com/package/form-data api\n' +
      '    if (utils.isFormData(data) && utils.isFunction(data.getHeaders)) {\n' +
      '      Object.assign(headers, data.getHeaders());\n' +
      '    } else if (data && !utils.isStream(data)) {\n' +
      '      if (Buffer.isBuffer(data)) {\n' +
      '        // Nothing to do...\n' +
      '      } else if (utils.isArrayBuffer(data)) {\n' +
      '        data = Buffer.from(new Uint8Array(data));\n' +
      '      } else if (utils.isString(data)) {\n' +
      "        data = Buffer.from(data, 'utf-8');\n" +
      '      } else {\n' +
      "        return reject(new AxiosError('Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream', AxiosError.ERR_BAD_REQUEST, config));\n" +
      '      }\n' +
      '      if (config.maxBodyLength > -1 && data.length > config.maxBodyLength) {\n' +
      "        return reject(new AxiosError('Request body larger than maxBodyLength limit', AxiosError.ERR_BAD_REQUEST, config));\n" +
      '      }\n' +
      '\n' +
      '      // Add Content-Length header if data exists\n' +
      "      if (!headerNames['content-length']) {\n" +
      "        headers['Content-Length'] = data.length;\n" +
      '      }\n' +
      '    }\n' +
      '\n' +
      '    // HTTP basic authentication\n' +
      '    var auth = undefined;\n' +
      '    if (config.auth) {\n' +
      "      var username = config.auth.username || '';\n" +
      "      var password = config.auth.password || '';\n" +
      "      auth = username + ':' + password;\n" +
      '    }\n' +
      '\n' +
      '    // Parse url\n' +
      '    var fullPath = buildFullPath(config.baseURL, config.url);\n' +
      '    var parsed = url.parse(fullPath);\n' +
      '    var protocol = parsed.protocol || supportedProtocols[0];\n' +
      '    if (supportedProtocols.indexOf(protocol) === -1) {\n' +
      "      return reject(new AxiosError('Unsupported protocol ' + protocol, AxiosError.ERR_BAD_REQUEST, config));\n" +
      '    }\n' +
      '    if (!auth && parsed.auth) {\n' +
      "      var urlAuth = parsed.auth.split(':');\n" +
      "      var urlUsername = urlAuth[0] || '';\n" +
      "      var urlPassword = urlAuth[1] || '';\n" +
      "      auth = urlUsername + ':' + urlPassword;\n" +
      '    }\n' +
      '    if (auth && headerNames.authorization) {\n' +
      '      delete headers[headerNames.authorization];\n' +
      '    }\n' +
      '    var isHttpsRequest = isHttps.test(protocol);\n' +
      '    var agent = isHttpsRequest ? config.httpsAgent : config.httpAgent;\n' +
      '    try {\n' +
      "      buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\\?/, '');\n" +
      '    } catch (err) {\n' +
      '      var customErr = new Error(err.message);\n' +
      '      customErr.config = config;\n' +
      '      customErr.url = config.url;\n' +
      '      customErr.exists = true;\n' +
      '      reject(customErr);\n' +
      '    }\n' +
      '    var options = {\n' +
      "      path: buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\\?/, ''),\n" +
      '      method: config.method.toUpperCase(),\n' +
      '      headers: headers,\n' +
      '      agent: agent,\n' +
      '      agents: {\n' +
      '        http: config.httpAgent,\n' +
      '        https: config.httpsAgent\n' +
      '      },\n' +
      '      auth: auth\n' +
      '    };\n' +
      '    if (config.socketPath) {\n' +
      '      options.socketPath = config.socketPath;\n' +
      '    } else {\n' +
      '      options.hostname = parsed.hostname;\n' +
      '      options.port = parsed.port;\n' +
      '    }\n' +
      '    var proxy = config.proxy;\n' +
      '    if (!proxy && proxy !== false) {\n' +
      "      var proxyEnv = protocol.slice(0, -1) + '_proxy';\n" +
      '      var proxyUrl = process.env[proxyEnv] || process.env[proxyEnv.toUpperCase()];\n' +
      '      if (proxyUrl) {\n' +
      '        var parsedProxyUrl = url.parse(proxyUrl);\n' +
      '        var noProxyEnv = process.env.no_proxy || process.env.NO_PROXY;\n' +
      '        var shouldProxy = true;\n' +
      '        if (noProxyEnv) {\n' +
      "          var noProxy = noProxyEnv.split(',').map(function trim(s) {\n" +
      '            return s.trim();\n' +
      '          });\n' +
      '          shouldProxy = !noProxy.some(function proxyMatch(proxyElement) {\n' +
      '            if (!proxyElement) {\n' +
      '              return false;\n' +
      '            }\n' +
      "            if (proxyElement === '*') {\n" +
      '              return true;\n' +
      '            }\n' +
      "            if (proxyElement[0] === '.' && parsed.hostname.substr(parsed.hostname.length - proxyElement.length) === proxyElement) {\n" +
      '              return true;\n' +
      '            }\n' +
      '            return parsed.hostname === proxyElement;\n' +
      '          });\n' +
      '        }\n' +
      '        if (shouldProxy) {\n' +
      '          proxy = {\n' +
      '            host: parsedProxyUrl.hostname,\n' +
      '            port: parsedProxyUrl.port,\n' +
      '            protocol: parsedProxyUrl.protocol\n' +
      '          };\n' +
      '          if (parsedProxyUrl.auth) {\n' +
      "            var proxyUrlAuth = parsedProxyUrl.auth.split(':');\n" +
      '            proxy.auth = {\n' +
      '              username: proxyUrlAuth[0],\n' +
      '              password: proxyUrlAuth[1]\n' +
      '            };\n' +
      '          }\n' +
      '        }\n' +
      '      }\n' +
      '    }\n' +
      '    if (proxy) {\n' +
      "      options.headers.host = parsed.hostname + (parsed.port ? ':' + parsed.port : '');\n" +
      "      setProxy(options, proxy, protocol + '//' + parsed.hostname + (parsed.port ? ':' + parsed.port : '') + options.path);\n" +
      '    }\n' +
      '    var transport;\n' +
      '    var isHttpsProxy = isHttpsRequest && (proxy ? isHttps.test(proxy.protocol) : true);\n' +
      '    if (config.transport) {\n' +
      '      transport = config.transport;\n' +
      '    } else if (config.maxRedirects === 0) {\n' +
      '      transport = isHttpsProxy ? https : http;\n' +
      '    } else {\n' +
      '      if (config.maxRedirects) {\n' +
      '        options.maxRedirects = config.maxRedirects;\n' +
      '      }\n' +
      '      if (config.beforeRedirect) {\n' +
      '        options.beforeRedirect = config.beforeRedirect;\n' +
      '      }\n' +
      '      transport = isHttpsProxy ? httpsFollow : httpFollow;\n' +
      '    }\n' +
      '    if (config.maxBodyLength > -1) {\n' +
      '      options.maxBodyLength = config.maxBodyLength;\n' +
      '    }\n' +
      '    if (config.insecureHTTPParser) {\n' +
      '      options.insecureHTTPParser = config.insecureHTTPParser;\n' +
      '    }\n' +
      '\n' +
      '    // Create the request\n' +
      '    var req = transport.request(options, function handleResponse(res) {\n' +
      '      if (req.aborted) return;\n' +
      '\n' +
      '      // uncompress the response body transparently if required\n' +
      '      var stream = res;\n' +
      '\n' +
      '      // return the last request in case of redirects\n' +
      '      var lastRequest = res.req || req;\n' +
      '\n' +
      '      // if no content, is HEAD request or decompress disabled we should not decompress\n' +
      "      if (res.statusCode !== 204 && lastRequest.method !== 'HEAD' && config.decompress !== false) {\n" +
      "        switch (res.headers['content-encoding']) {\n" +
      '          /*eslint default-case:0*/\n' +
      "          case 'gzip':\n" +
      "          case 'compress':\n" +
      "          case 'deflate':\n" +
      '            // add the unzipper to the body stream processing pipeline\n' +
      '            stream = stream.pipe(zlib.createUnzip());\n' +
      '\n' +
      '            // remove the content-encoding in order to not confuse downstream operations\n' +
      "            delete res.headers['content-encoding'];\n" +
      '            break;\n' +
      '        }\n' +
      '      }\n' +
      '      var response = {\n' +
      '        status: res.statusCode,\n' +
      '        statusText: res.statusMessage,\n' +
      '        headers: res.headers,\n' +
      '        config: config,\n' +
      '        request: lastRequest\n' +
      '      };\n' +
      "      if (config.responseType === 'stream') {\n" +
      '        response.data = stream;\n' +
      '        settle(resolve, reject, response);\n' +
      '      } else {\n' +
      '        var responseBuffer = [];\n' +
      '        var totalResponseBytes = 0;\n' +
      "        stream.on('data', function handleStreamData(chunk) {\n" +
      '          responseBuffer.push(chunk);\n' +
      '          totalResponseBytes += chunk.length;\n' +
      '\n' +
      '          // make sure the content length is not over the maxContentLength if specified\n' +
      '          if (config.maxContentLength > -1 && totalResponseBytes > config.maxContentLength) {\n' +
      '            // stream.destoy() emit aborted event before calling reject() on Node.js v16\n' +
      '            rejected = true;\n' +
      '            stream.destroy();\n' +
      "            reject(new AxiosError('maxContentLength size of ' + config.maxContentLength + ' exceeded', AxiosError.ERR_BAD_RESPONSE, config, lastRequest));\n" +
      '          }\n' +
      '        });\n' +
      "        stream.on('aborted', function handlerStreamAborted() {\n" +
      '          if (rejected) {\n' +
      '            return;\n' +
      '          }\n' +
      '          stream.destroy();\n' +
      "          reject(new AxiosError('maxContentLength size of ' + config.maxContentLength + ' exceeded', AxiosError.ERR_BAD_RESPONSE, config, lastRequest));\n" +
      '        });\n' +
      "        stream.on('error', function handleStreamError(err) {\n" +
      '          if (req.aborted) return;\n' +
      '          reject(AxiosError.from(err, null, config, lastRequest));\n' +
      '        });\n' +
      "        stream.on('end', function handleStreamEnd() {\n" +
      '          try {\n' +
      '            var responseData = responseBuffer.length === 1 ? responseBuffer[0] : Buffer.concat(responseBuffer);\n' +
      "            if (config.responseType !== 'arraybuffer') {\n" +
      '              responseData = responseData.toString(config.responseEncoding);\n' +
      "              if (!config.responseEncoding || config.responseEncoding === 'utf8') {\n" +
      '                responseData = utils.stripBOM(responseData);\n' +
      '              }\n' +
      '            }\n' +
      '            response.data = responseData;\n' +
      '          } catch (err) {\n' +
      '            reject(AxiosError.from(err, null, config, response.request, response));\n' +
      '          }\n' +
      '          settle(resolve, reject, response);\n' +
      '        });\n' +
      '      }\n' +
      '    });\n' +
      '\n' +
      '    // Handle errors\n' +
      "    req.on('error', function handleRequestError(err) {\n" +
      '      // @todo remove\n' +
      '      // if (req.aborted && err.code !== AxiosError.ERR_FR_TOO_MANY_REDIRECTS) return;\n' +
      '      reject(AxiosError.from(err, null, config, req));\n' +
      '    });\n' +
      '\n' +
      ' '... 2346 more characters,
    transformRequest: [
      '[function] function transformRequest(data, headers) {\n' +
        "    normalizeHeaderName(headers, 'Accept');\n" +
        "    normalizeHeaderName(headers, 'Content-Type');\n" +
        '    if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {\n' +
        '      return data;\n' +
        '    }\n' +
        '    if (utils.isArrayBufferView(data)) {\n' +
        '      return data.buffer;\n' +
        '    }\n' +
        '    if (utils.isURLSearchParams(data)) {\n' +
        "      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');\n" +
        '      return data.toString();\n' +
        '    }\n' +
        '    var isObjectPayload = utils.isObject(data);\n' +
        "    var contentType = headers && headers['Content-Type'];\n" +
        '    var isFileList;\n' +
        "    if ((isFileList = utils.isFileList(data)) || isObjectPayload && contentType === 'multipart/form-data') {\n" +
        '      var _FormData = this.env && this.env.FormData;\n' +
        '      return toFormData(isFileList ? {\n' +
        "        'files[]': data\n" +
        '      } : data, _FormData && new _FormData());\n' +
        "    } else if (isObjectPayload || contentType === 'application/json') {\n" +
        "      setContentTypeIfUnset(headers, 'application/json');\n" +
        '      return stringifySafely(data);\n' +
        '    }\n' +
        '    return data;\n' +
        '  }'
    ],
    transformResponse: [
      '[function] function transformResponse(data) {\n' +
        '    var transitional = this.transitional || defaults.transitional;\n' +
        '    var silentJSONParsing = transitional && transitional.silentJSONParsing;\n' +
        '    var forcedJSONParsing = transitional && transitional.forcedJSONParsing;\n' +
        "    var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';\n" +
        '    if (strictJSONParsing || forcedJSONParsing && utils.isString(data) && data.length) {\n' +
        '      try {\n' +
        '        return JSON.parse(data);\n' +
        '      } catch (e) {\n' +
        '        if (strictJSONParsing) {\n' +
        "          if (e.name === 'SyntaxError') {\n" +
        '            throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);\n' +
        '          }\n' +
        '          throw e;\n' +
        '        }\n' +
        '      }\n' +
        '    }\n' +
        '    return data;\n' +
        '  }'
    ],
    timeout: 0,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
      FormData: '[function] function FormData(options) {\n' +
        '  if (!(this instanceof FormData)) {\n' +
        '    return new FormData(options);\n' +
        '  }\n' +
        '  this._overheadLength = 0;\n' +
        '  this._valueLength = 0;\n' +
        '  this._valuesToMeasure = [];\n' +
        '  CombinedStream.call(this);\n' +
        '  options = options || {};\n' +
        '  for (var option in options) {\n' +
        '    this[option] = options[option];\n' +
        '  }\n' +
        '}'
    },
    validateStatus: '[function] function validateStatus(status) {\n' +
      '    return status >= 200 && status < 300;\n' +
      '  }',
    headers: {
      Accept: 'application/json, text/plain, */*',
      Authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI5OTQ5NmQ4YS0wOTY4LTQ1ZTUtYTg4Ni1lNGNkZjgxYTcwNzYiLCJlbWFpbCI6IjU0OTA2Y2MxLTk5ZTEtNDA2Yi04ZGU4LTFiZDlkNjAwNjI0YyIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2MTQ4NCwiZXhwIjoxNjg5MTQ3ODg0fQ.eA6iiKOi0Eqg3atb2z-kF1Zme28U86ieWdoxlBFxmmU',
      'Content-Type': '',
      'User-Agent': 'axios/0.27.2'
    },
    url: 'https://connect-api.dev.insiteflow.io/v1/connect/container/config?organizationId=711729a8-a473-47bf-b27f-8abc1ee52281&containerType=desktop',
    method: 'get'
  },
  code: 'ERR_BAD_REQUEST',
  status: 401
}
[2023-07-11 13:29:57.271] [info]  Started /home/lnv-75/Documents/insiteFlow/desktop-app-container/test/out AES-128
[2023-07-11 13:29:59.150] [info]  In the catch 
[2023-07-11 13:29:59.151] [error] Unhandled Exception {
  message: 'Request failed with status code 401',
  name: 'UnhandledRejection AxiosError',
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: '[function] function httpAdapter(config) {\n' +
      '  return new Promise(function dispatchHttpRequest(resolvePromise, rejectPromise) {\n' +
      '    var onCanceled;\n' +
      '    function done() {\n' +
      '      if (config.cancelToken) {\n' +
      '        config.cancelToken.unsubscribe(onCanceled);\n' +
      '      }\n' +
      '      if (config.signal) {\n' +
      "        config.signal.removeEventListener('abort', onCanceled);\n" +
      '      }\n' +
      '    }\n' +
      '    var resolve = function resolve(value) {\n' +
      '      done();\n' +
      '      resolvePromise(value);\n' +
      '    };\n' +
      '    var rejected = false;\n' +
      '    var reject = function reject(value) {\n' +
      '      done();\n' +
      '      rejected = true;\n' +
      '      rejectPromise(value);\n' +
      '    };\n' +
      '    var data = config.data;\n' +
      '    var headers = config.headers;\n' +
      '    var headerNames = {};\n' +
      '    Object.keys(headers).forEach(function storeLowerName(name) {\n' +
      '      headerNames[name.toLowerCase()] = name;\n' +
      '    });\n' +
      '\n' +
      '    // Set User-Agent (required by some servers)\n' +
      '    // See https://github.com/axios/axios/issues/69\n' +
      "    if ('user-agent' in headerNames) {\n" +
      '      // User-Agent is specified; handle case where no UA header is desired\n' +
      "      if (!headers[headerNames['user-agent']]) {\n" +
      "        delete headers[headerNames['user-agent']];\n" +
      '      }\n' +
      '      // Otherwise, use specified value\n' +
      '    } else {\n' +
      "      // Only set header if it hasn't been set in config\n" +
      "      headers['User-Agent'] = 'axios/' + VERSION;\n" +
      '    }\n' +
      '\n' +
      '    // support for https://www.npmjs.com/package/form-data api\n' +
      '    if (utils.isFormData(data) && utils.isFunction(data.getHeaders)) {\n' +
      '      Object.assign(headers, data.getHeaders());\n' +
      '    } else if (data && !utils.isStream(data)) {\n' +
      '      if (Buffer.isBuffer(data)) {\n' +
      '        // Nothing to do...\n' +
      '      } else if (utils.isArrayBuffer(data)) {\n' +
      '        data = Buffer.from(new Uint8Array(data));\n' +
      '      } else if (utils.isString(data)) {\n' +
      "        data = Buffer.from(data, 'utf-8');\n" +
      '      } else {\n' +
      "        return reject(new AxiosError('Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream', AxiosError.ERR_BAD_REQUEST, config));\n" +
      '      }\n' +
      '      if (config.maxBodyLength > -1 && data.length > config.maxBodyLength) {\n' +
      "        return reject(new AxiosError('Request body larger than maxBodyLength limit', AxiosError.ERR_BAD_REQUEST, config));\n" +
      '      }\n' +
      '\n' +
      '      // Add Content-Length header if data exists\n' +
      "      if (!headerNames['content-length']) {\n" +
      "        headers['Content-Length'] = data.length;\n" +
      '      }\n' +
      '    }\n' +
      '\n' +
      '    // HTTP basic authentication\n' +
      '    var auth = undefined;\n' +
      '    if (config.auth) {\n' +
      "      var username = config.auth.username || '';\n" +
      "      var password = config.auth.password || '';\n" +
      "      auth = username + ':' + password;\n" +
      '    }\n' +
      '\n' +
      '    // Parse url\n' +
      '    var fullPath = buildFullPath(config.baseURL, config.url);\n' +
      '    var parsed = url.parse(fullPath);\n' +
      '    var protocol = parsed.protocol || supportedProtocols[0];\n' +
      '    if (supportedProtocols.indexOf(protocol) === -1) {\n' +
      "      return reject(new AxiosError('Unsupported protocol ' + protocol, AxiosError.ERR_BAD_REQUEST, config));\n" +
      '    }\n' +
      '    if (!auth && parsed.auth) {\n' +
      "      var urlAuth = parsed.auth.split(':');\n" +
      "      var urlUsername = urlAuth[0] || '';\n" +
      "      var urlPassword = urlAuth[1] || '';\n" +
      "      auth = urlUsername + ':' + urlPassword;\n" +
      '    }\n' +
      '    if (auth && headerNames.authorization) {\n' +
      '      delete headers[headerNames.authorization];\n' +
      '    }\n' +
      '    var isHttpsRequest = isHttps.test(protocol);\n' +
      '    var agent = isHttpsRequest ? config.httpsAgent : config.httpAgent;\n' +
      '    try {\n' +
      "      buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\\?/, '');\n" +
      '    } catch (err) {\n' +
      '      var customErr = new Error(err.message);\n' +
      '      customErr.config = config;\n' +
      '      customErr.url = config.url;\n' +
      '      customErr.exists = true;\n' +
      '      reject(customErr);\n' +
      '    }\n' +
      '    var options = {\n' +
      "      path: buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\\?/, ''),\n" +
      '      method: config.method.toUpperCase(),\n' +
      '      headers: headers,\n' +
      '      agent: agent,\n' +
      '      agents: {\n' +
      '        http: config.httpAgent,\n' +
      '        https: config.httpsAgent\n' +
      '      },\n' +
      '      auth: auth\n' +
      '    };\n' +
      '    if (config.socketPath) {\n' +
      '      options.socketPath = config.socketPath;\n' +
      '    } else {\n' +
      '      options.hostname = parsed.hostname;\n' +
      '      options.port = parsed.port;\n' +
      '    }\n' +
      '    var proxy = config.proxy;\n' +
      '    if (!proxy && proxy !== false) {\n' +
      "      var proxyEnv = protocol.slice(0, -1) + '_proxy';\n" +
      '      var proxyUrl = process.env[proxyEnv] || process.env[proxyEnv.toUpperCase()];\n' +
      '      if (proxyUrl) {\n' +
      '        var parsedProxyUrl = url.parse(proxyUrl);\n' +
      '        var noProxyEnv = process.env.no_proxy || process.env.NO_PROXY;\n' +
      '        var shouldProxy = true;\n' +
      '        if (noProxyEnv) {\n' +
      "          var noProxy = noProxyEnv.split(',').map(function trim(s) {\n" +
      '            return s.trim();\n' +
      '          });\n' +
      '          shouldProxy = !noProxy.some(function proxyMatch(proxyElement) {\n' +
      '            if (!proxyElement) {\n' +
      '              return false;\n' +
      '            }\n' +
      "            if (proxyElement === '*') {\n" +
      '              return true;\n' +
      '            }\n' +
      "            if (proxyElement[0] === '.' && parsed.hostname.substr(parsed.hostname.length - proxyElement.length) === proxyElement) {\n" +
      '              return true;\n' +
      '            }\n' +
      '            return parsed.hostname === proxyElement;\n' +
      '          });\n' +
      '        }\n' +
      '        if (shouldProxy) {\n' +
      '          proxy = {\n' +
      '            host: parsedProxyUrl.hostname,\n' +
      '            port: parsedProxyUrl.port,\n' +
      '            protocol: parsedProxyUrl.protocol\n' +
      '          };\n' +
      '          if (parsedProxyUrl.auth) {\n' +
      "            var proxyUrlAuth = parsedProxyUrl.auth.split(':');\n" +
      '            proxy.auth = {\n' +
      '              username: proxyUrlAuth[0],\n' +
      '              password: proxyUrlAuth[1]\n' +
      '            };\n' +
      '          }\n' +
      '        }\n' +
      '      }\n' +
      '    }\n' +
      '    if (proxy) {\n' +
      "      options.headers.host = parsed.hostname + (parsed.port ? ':' + parsed.port : '');\n" +
      "      setProxy(options, proxy, protocol + '//' + parsed.hostname + (parsed.port ? ':' + parsed.port : '') + options.path);\n" +
      '    }\n' +
      '    var transport;\n' +
      '    var isHttpsProxy = isHttpsRequest && (proxy ? isHttps.test(proxy.protocol) : true);\n' +
      '    if (config.transport) {\n' +
      '      transport = config.transport;\n' +
      '    } else if (config.maxRedirects === 0) {\n' +
      '      transport = isHttpsProxy ? https : http;\n' +
      '    } else {\n' +
      '      if (config.maxRedirects) {\n' +
      '        options.maxRedirects = config.maxRedirects;\n' +
      '      }\n' +
      '      if (config.beforeRedirect) {\n' +
      '        options.beforeRedirect = config.beforeRedirect;\n' +
      '      }\n' +
      '      transport = isHttpsProxy ? httpsFollow : httpFollow;\n' +
      '    }\n' +
      '    if (config.maxBodyLength > -1) {\n' +
      '      options.maxBodyLength = config.maxBodyLength;\n' +
      '    }\n' +
      '    if (config.insecureHTTPParser) {\n' +
      '      options.insecureHTTPParser = config.insecureHTTPParser;\n' +
      '    }\n' +
      '\n' +
      '    // Create the request\n' +
      '    var req = transport.request(options, function handleResponse(res) {\n' +
      '      if (req.aborted) return;\n' +
      '\n' +
      '      // uncompress the response body transparently if required\n' +
      '      var stream = res;\n' +
      '\n' +
      '      // return the last request in case of redirects\n' +
      '      var lastRequest = res.req || req;\n' +
      '\n' +
      '      // if no content, is HEAD request or decompress disabled we should not decompress\n' +
      "      if (res.statusCode !== 204 && lastRequest.method !== 'HEAD' && config.decompress !== false) {\n" +
      "        switch (res.headers['content-encoding']) {\n" +
      '          /*eslint default-case:0*/\n' +
      "          case 'gzip':\n" +
      "          case 'compress':\n" +
      "          case 'deflate':\n" +
      '            // add the unzipper to the body stream processing pipeline\n' +
      '            stream = stream.pipe(zlib.createUnzip());\n' +
      '\n' +
      '            // remove the content-encoding in order to not confuse downstream operations\n' +
      "            delete res.headers['content-encoding'];\n" +
      '            break;\n' +
      '        }\n' +
      '      }\n' +
      '      var response = {\n' +
      '        status: res.statusCode,\n' +
      '        statusText: res.statusMessage,\n' +
      '        headers: res.headers,\n' +
      '        config: config,\n' +
      '        request: lastRequest\n' +
      '      };\n' +
      "      if (config.responseType === 'stream') {\n" +
      '        response.data = stream;\n' +
      '        settle(resolve, reject, response);\n' +
      '      } else {\n' +
      '        var responseBuffer = [];\n' +
      '        var totalResponseBytes = 0;\n' +
      "        stream.on('data', function handleStreamData(chunk) {\n" +
      '          responseBuffer.push(chunk);\n' +
      '          totalResponseBytes += chunk.length;\n' +
      '\n' +
      '          // make sure the content length is not over the maxContentLength if specified\n' +
      '          if (config.maxContentLength > -1 && totalResponseBytes > config.maxContentLength) {\n' +
      '            // stream.destoy() emit aborted event before calling reject() on Node.js v16\n' +
      '            rejected = true;\n' +
      '            stream.destroy();\n' +
      "            reject(new AxiosError('maxContentLength size of ' + config.maxContentLength + ' exceeded', AxiosError.ERR_BAD_RESPONSE, config, lastRequest));\n" +
      '          }\n' +
      '        });\n' +
      "        stream.on('aborted', function handlerStreamAborted() {\n" +
      '          if (rejected) {\n' +
      '            return;\n' +
      '          }\n' +
      '          stream.destroy();\n' +
      "          reject(new AxiosError('maxContentLength size of ' + config.maxContentLength + ' exceeded', AxiosError.ERR_BAD_RESPONSE, config, lastRequest));\n" +
      '        });\n' +
      "        stream.on('error', function handleStreamError(err) {\n" +
      '          if (req.aborted) return;\n' +
      '          reject(AxiosError.from(err, null, config, lastRequest));\n' +
      '        });\n' +
      "        stream.on('end', function handleStreamEnd() {\n" +
      '          try {\n' +
      '            var responseData = responseBuffer.length === 1 ? responseBuffer[0] : Buffer.concat(responseBuffer);\n' +
      "            if (config.responseType !== 'arraybuffer') {\n" +
      '              responseData = responseData.toString(config.responseEncoding);\n' +
      "              if (!config.responseEncoding || config.responseEncoding === 'utf8') {\n" +
      '                responseData = utils.stripBOM(responseData);\n' +
      '              }\n' +
      '            }\n' +
      '            response.data = responseData;\n' +
      '          } catch (err) {\n' +
      '            reject(AxiosError.from(err, null, config, response.request, response));\n' +
      '          }\n' +
      '          settle(resolve, reject, response);\n' +
      '        });\n' +
      '      }\n' +
      '    });\n' +
      '\n' +
      '    // Handle errors\n' +
      "    req.on('error', function handleRequestError(err) {\n" +
      '      // @todo remove\n' +
      '      // if (req.aborted && err.code !== AxiosError.ERR_FR_TOO_MANY_REDIRECTS) return;\n' +
      '      reject(AxiosError.from(err, null, config, req));\n' +
      '    });\n' +
      '\n' +
      ' '... 2346 more characters,
    transformRequest: [
      '[function] function transformRequest(data, headers) {\n' +
        "    normalizeHeaderName(headers, 'Accept');\n" +
        "    normalizeHeaderName(headers, 'Content-Type');\n" +
        '    if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {\n' +
        '      return data;\n' +
        '    }\n' +
        '    if (utils.isArrayBufferView(data)) {\n' +
        '      return data.buffer;\n' +
        '    }\n' +
        '    if (utils.isURLSearchParams(data)) {\n' +
        "      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');\n" +
        '      return data.toString();\n' +
        '    }\n' +
        '    var isObjectPayload = utils.isObject(data);\n' +
        "    var contentType = headers && headers['Content-Type'];\n" +
        '    var isFileList;\n' +
        "    if ((isFileList = utils.isFileList(data)) || isObjectPayload && contentType === 'multipart/form-data') {\n" +
        '      var _FormData = this.env && this.env.FormData;\n' +
        '      return toFormData(isFileList ? {\n' +
        "        'files[]': data\n" +
        '      } : data, _FormData && new _FormData());\n' +
        "    } else if (isObjectPayload || contentType === 'application/json') {\n" +
        "      setContentTypeIfUnset(headers, 'application/json');\n" +
        '      return stringifySafely(data);\n' +
        '    }\n' +
        '    return data;\n' +
        '  }'
    ],
    transformResponse: [
      '[function] function transformResponse(data) {\n' +
        '    var transitional = this.transitional || defaults.transitional;\n' +
        '    var silentJSONParsing = transitional && transitional.silentJSONParsing;\n' +
        '    var forcedJSONParsing = transitional && transitional.forcedJSONParsing;\n' +
        "    var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';\n" +
        '    if (strictJSONParsing || forcedJSONParsing && utils.isString(data) && data.length) {\n' +
        '      try {\n' +
        '        return JSON.parse(data);\n' +
        '      } catch (e) {\n' +
        '        if (strictJSONParsing) {\n' +
        "          if (e.name === 'SyntaxError') {\n" +
        '            throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);\n' +
        '          }\n' +
        '          throw e;\n' +
        '        }\n' +
        '      }\n' +
        '    }\n' +
        '    return data;\n' +
        '  }'
    ],
    timeout: 0,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
      FormData: '[function] function FormData(options) {\n' +
        '  if (!(this instanceof FormData)) {\n' +
        '    return new FormData(options);\n' +
        '  }\n' +
        '  this._overheadLength = 0;\n' +
        '  this._valueLength = 0;\n' +
        '  this._valuesToMeasure = [];\n' +
        '  CombinedStream.call(this);\n' +
        '  options = options || {};\n' +
        '  for (var option in options) {\n' +
        '    this[option] = options[option];\n' +
        '  }\n' +
        '}'
    },
    validateStatus: '[function] function validateStatus(status) {\n' +
      '    return status >= 200 && status < 300;\n' +
      '  }',
    headers: {
      Accept: 'application/json, text/plain, */*',
      Authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2MjM5NywiZXhwIjoxNjg5MTQ4Nzk3fQ.kIQ8BFgEbj1TIf2AlRDJj3LZudPo0Qhs_V_VHzdLl0s',
      'Content-Type': '',
      'User-Agent': 'axios/0.27.2'
    },
    url: 'https://connect-api.dev.insiteflow.io/v1/connect/container/config?organizationId=711729a8-a473-47bf-b27f-8abc1ee52281&containerType=desktop',
    method: 'get'
  },
  code: 'ERR_BAD_REQUEST',
  status: 401
}
[2023-07-11 13:30:03.141] [info]  In the catch 
[2023-07-11 13:30:03.143] [error] Unhandled Exception {
  message: 'Request failed with status code 401',
  name: 'UnhandledRejection AxiosError',
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: '[function] function httpAdapter(config) {\n' +
      '  return new Promise(function dispatchHttpRequest(resolvePromise, rejectPromise) {\n' +
      '    var onCanceled;\n' +
      '    function done() {\n' +
      '      if (config.cancelToken) {\n' +
      '        config.cancelToken.unsubscribe(onCanceled);\n' +
      '      }\n' +
      '      if (config.signal) {\n' +
      "        config.signal.removeEventListener('abort', onCanceled);\n" +
      '      }\n' +
      '    }\n' +
      '    var resolve = function resolve(value) {\n' +
      '      done();\n' +
      '      resolvePromise(value);\n' +
      '    };\n' +
      '    var rejected = false;\n' +
      '    var reject = function reject(value) {\n' +
      '      done();\n' +
      '      rejected = true;\n' +
      '      rejectPromise(value);\n' +
      '    };\n' +
      '    var data = config.data;\n' +
      '    var headers = config.headers;\n' +
      '    var headerNames = {};\n' +
      '    Object.keys(headers).forEach(function storeLowerName(name) {\n' +
      '      headerNames[name.toLowerCase()] = name;\n' +
      '    });\n' +
      '\n' +
      '    // Set User-Agent (required by some servers)\n' +
      '    // See https://github.com/axios/axios/issues/69\n' +
      "    if ('user-agent' in headerNames) {\n" +
      '      // User-Agent is specified; handle case where no UA header is desired\n' +
      "      if (!headers[headerNames['user-agent']]) {\n" +
      "        delete headers[headerNames['user-agent']];\n" +
      '      }\n' +
      '      // Otherwise, use specified value\n' +
      '    } else {\n' +
      "      // Only set header if it hasn't been set in config\n" +
      "      headers['User-Agent'] = 'axios/' + VERSION;\n" +
      '    }\n' +
      '\n' +
      '    // support for https://www.npmjs.com/package/form-data api\n' +
      '    if (utils.isFormData(data) && utils.isFunction(data.getHeaders)) {\n' +
      '      Object.assign(headers, data.getHeaders());\n' +
      '    } else if (data && !utils.isStream(data)) {\n' +
      '      if (Buffer.isBuffer(data)) {\n' +
      '        // Nothing to do...\n' +
      '      } else if (utils.isArrayBuffer(data)) {\n' +
      '        data = Buffer.from(new Uint8Array(data));\n' +
      '      } else if (utils.isString(data)) {\n' +
      "        data = Buffer.from(data, 'utf-8');\n" +
      '      } else {\n' +
      "        return reject(new AxiosError('Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream', AxiosError.ERR_BAD_REQUEST, config));\n" +
      '      }\n' +
      '      if (config.maxBodyLength > -1 && data.length > config.maxBodyLength) {\n' +
      "        return reject(new AxiosError('Request body larger than maxBodyLength limit', AxiosError.ERR_BAD_REQUEST, config));\n" +
      '      }\n' +
      '\n' +
      '      // Add Content-Length header if data exists\n' +
      "      if (!headerNames['content-length']) {\n" +
      "        headers['Content-Length'] = data.length;\n" +
      '      }\n' +
      '    }\n' +
      '\n' +
      '    // HTTP basic authentication\n' +
      '    var auth = undefined;\n' +
      '    if (config.auth) {\n' +
      "      var username = config.auth.username || '';\n" +
      "      var password = config.auth.password || '';\n" +
      "      auth = username + ':' + password;\n" +
      '    }\n' +
      '\n' +
      '    // Parse url\n' +
      '    var fullPath = buildFullPath(config.baseURL, config.url);\n' +
      '    var parsed = url.parse(fullPath);\n' +
      '    var protocol = parsed.protocol || supportedProtocols[0];\n' +
      '    if (supportedProtocols.indexOf(protocol) === -1) {\n' +
      "      return reject(new AxiosError('Unsupported protocol ' + protocol, AxiosError.ERR_BAD_REQUEST, config));\n" +
      '    }\n' +
      '    if (!auth && parsed.auth) {\n' +
      "      var urlAuth = parsed.auth.split(':');\n" +
      "      var urlUsername = urlAuth[0] || '';\n" +
      "      var urlPassword = urlAuth[1] || '';\n" +
      "      auth = urlUsername + ':' + urlPassword;\n" +
      '    }\n' +
      '    if (auth && headerNames.authorization) {\n' +
      '      delete headers[headerNames.authorization];\n' +
      '    }\n' +
      '    var isHttpsRequest = isHttps.test(protocol);\n' +
      '    var agent = isHttpsRequest ? config.httpsAgent : config.httpAgent;\n' +
      '    try {\n' +
      "      buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\\?/, '');\n" +
      '    } catch (err) {\n' +
      '      var customErr = new Error(err.message);\n' +
      '      customErr.config = config;\n' +
      '      customErr.url = config.url;\n' +
      '      customErr.exists = true;\n' +
      '      reject(customErr);\n' +
      '    }\n' +
      '    var options = {\n' +
      "      path: buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\\?/, ''),\n" +
      '      method: config.method.toUpperCase(),\n' +
      '      headers: headers,\n' +
      '      agent: agent,\n' +
      '      agents: {\n' +
      '        http: config.httpAgent,\n' +
      '        https: config.httpsAgent\n' +
      '      },\n' +
      '      auth: auth\n' +
      '    };\n' +
      '    if (config.socketPath) {\n' +
      '      options.socketPath = config.socketPath;\n' +
      '    } else {\n' +
      '      options.hostname = parsed.hostname;\n' +
      '      options.port = parsed.port;\n' +
      '    }\n' +
      '    var proxy = config.proxy;\n' +
      '    if (!proxy && proxy !== false) {\n' +
      "      var proxyEnv = protocol.slice(0, -1) + '_proxy';\n" +
      '      var proxyUrl = process.env[proxyEnv] || process.env[proxyEnv.toUpperCase()];\n' +
      '      if (proxyUrl) {\n' +
      '        var parsedProxyUrl = url.parse(proxyUrl);\n' +
      '        var noProxyEnv = process.env.no_proxy || process.env.NO_PROXY;\n' +
      '        var shouldProxy = true;\n' +
      '        if (noProxyEnv) {\n' +
      "          var noProxy = noProxyEnv.split(',').map(function trim(s) {\n" +
      '            return s.trim();\n' +
      '          });\n' +
      '          shouldProxy = !noProxy.some(function proxyMatch(proxyElement) {\n' +
      '            if (!proxyElement) {\n' +
      '              return false;\n' +
      '            }\n' +
      "            if (proxyElement === '*') {\n" +
      '              return true;\n' +
      '            }\n' +
      "            if (proxyElement[0] === '.' && parsed.hostname.substr(parsed.hostname.length - proxyElement.length) === proxyElement) {\n" +
      '              return true;\n' +
      '            }\n' +
      '            return parsed.hostname === proxyElement;\n' +
      '          });\n' +
      '        }\n' +
      '        if (shouldProxy) {\n' +
      '          proxy = {\n' +
      '            host: parsedProxyUrl.hostname,\n' +
      '            port: parsedProxyUrl.port,\n' +
      '            protocol: parsedProxyUrl.protocol\n' +
      '          };\n' +
      '          if (parsedProxyUrl.auth) {\n' +
      "            var proxyUrlAuth = parsedProxyUrl.auth.split(':');\n" +
      '            proxy.auth = {\n' +
      '              username: proxyUrlAuth[0],\n' +
      '              password: proxyUrlAuth[1]\n' +
      '            };\n' +
      '          }\n' +
      '        }\n' +
      '      }\n' +
      '    }\n' +
      '    if (proxy) {\n' +
      "      options.headers.host = parsed.hostname + (parsed.port ? ':' + parsed.port : '');\n" +
      "      setProxy(options, proxy, protocol + '//' + parsed.hostname + (parsed.port ? ':' + parsed.port : '') + options.path);\n" +
      '    }\n' +
      '    var transport;\n' +
      '    var isHttpsProxy = isHttpsRequest && (proxy ? isHttps.test(proxy.protocol) : true);\n' +
      '    if (config.transport) {\n' +
      '      transport = config.transport;\n' +
      '    } else if (config.maxRedirects === 0) {\n' +
      '      transport = isHttpsProxy ? https : http;\n' +
      '    } else {\n' +
      '      if (config.maxRedirects) {\n' +
      '        options.maxRedirects = config.maxRedirects;\n' +
      '      }\n' +
      '      if (config.beforeRedirect) {\n' +
      '        options.beforeRedirect = config.beforeRedirect;\n' +
      '      }\n' +
      '      transport = isHttpsProxy ? httpsFollow : httpFollow;\n' +
      '    }\n' +
      '    if (config.maxBodyLength > -1) {\n' +
      '      options.maxBodyLength = config.maxBodyLength;\n' +
      '    }\n' +
      '    if (config.insecureHTTPParser) {\n' +
      '      options.insecureHTTPParser = config.insecureHTTPParser;\n' +
      '    }\n' +
      '\n' +
      '    // Create the request\n' +
      '    var req = transport.request(options, function handleResponse(res) {\n' +
      '      if (req.aborted) return;\n' +
      '\n' +
      '      // uncompress the response body transparently if required\n' +
      '      var stream = res;\n' +
      '\n' +
      '      // return the last request in case of redirects\n' +
      '      var lastRequest = res.req || req;\n' +
      '\n' +
      '      // if no content, is HEAD request or decompress disabled we should not decompress\n' +
      "      if (res.statusCode !== 204 && lastRequest.method !== 'HEAD' && config.decompress !== false) {\n" +
      "        switch (res.headers['content-encoding']) {\n" +
      '          /*eslint default-case:0*/\n' +
      "          case 'gzip':\n" +
      "          case 'compress':\n" +
      "          case 'deflate':\n" +
      '            // add the unzipper to the body stream processing pipeline\n' +
      '            stream = stream.pipe(zlib.createUnzip());\n' +
      '\n' +
      '            // remove the content-encoding in order to not confuse downstream operations\n' +
      "            delete res.headers['content-encoding'];\n" +
      '            break;\n' +
      '        }\n' +
      '      }\n' +
      '      var response = {\n' +
      '        status: res.statusCode,\n' +
      '        statusText: res.statusMessage,\n' +
      '        headers: res.headers,\n' +
      '        config: config,\n' +
      '        request: lastRequest\n' +
      '      };\n' +
      "      if (config.responseType === 'stream') {\n" +
      '        response.data = stream;\n' +
      '        settle(resolve, reject, response);\n' +
      '      } else {\n' +
      '        var responseBuffer = [];\n' +
      '        var totalResponseBytes = 0;\n' +
      "        stream.on('data', function handleStreamData(chunk) {\n" +
      '          responseBuffer.push(chunk);\n' +
      '          totalResponseBytes += chunk.length;\n' +
      '\n' +
      '          // make sure the content length is not over the maxContentLength if specified\n' +
      '          if (config.maxContentLength > -1 && totalResponseBytes > config.maxContentLength) {\n' +
      '            // stream.destoy() emit aborted event before calling reject() on Node.js v16\n' +
      '            rejected = true;\n' +
      '            stream.destroy();\n' +
      "            reject(new AxiosError('maxContentLength size of ' + config.maxContentLength + ' exceeded', AxiosError.ERR_BAD_RESPONSE, config, lastRequest));\n" +
      '          }\n' +
      '        });\n' +
      "        stream.on('aborted', function handlerStreamAborted() {\n" +
      '          if (rejected) {\n' +
      '            return;\n' +
      '          }\n' +
      '          stream.destroy();\n' +
      "          reject(new AxiosError('maxContentLength size of ' + config.maxContentLength + ' exceeded', AxiosError.ERR_BAD_RESPONSE, config, lastRequest));\n" +
      '        });\n' +
      "        stream.on('error', function handleStreamError(err) {\n" +
      '          if (req.aborted) return;\n' +
      '          reject(AxiosError.from(err, null, config, lastRequest));\n' +
      '        });\n' +
      "        stream.on('end', function handleStreamEnd() {\n" +
      '          try {\n' +
      '            var responseData = responseBuffer.length === 1 ? responseBuffer[0] : Buffer.concat(responseBuffer);\n' +
      "            if (config.responseType !== 'arraybuffer') {\n" +
      '              responseData = responseData.toString(config.responseEncoding);\n' +
      "              if (!config.responseEncoding || config.responseEncoding === 'utf8') {\n" +
      '                responseData = utils.stripBOM(responseData);\n' +
      '              }\n' +
      '            }\n' +
      '            response.data = responseData;\n' +
      '          } catch (err) {\n' +
      '            reject(AxiosError.from(err, null, config, response.request, response));\n' +
      '          }\n' +
      '          settle(resolve, reject, response);\n' +
      '        });\n' +
      '      }\n' +
      '    });\n' +
      '\n' +
      '    // Handle errors\n' +
      "    req.on('error', function handleRequestError(err) {\n" +
      '      // @todo remove\n' +
      '      // if (req.aborted && err.code !== AxiosError.ERR_FR_TOO_MANY_REDIRECTS) return;\n' +
      '      reject(AxiosError.from(err, null, config, req));\n' +
      '    });\n' +
      '\n' +
      ' '... 2346 more characters,
    transformRequest: [
      '[function] function transformRequest(data, headers) {\n' +
        "    normalizeHeaderName(headers, 'Accept');\n" +
        "    normalizeHeaderName(headers, 'Content-Type');\n" +
        '    if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {\n' +
        '      return data;\n' +
        '    }\n' +
        '    if (utils.isArrayBufferView(data)) {\n' +
        '      return data.buffer;\n' +
        '    }\n' +
        '    if (utils.isURLSearchParams(data)) {\n' +
        "      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');\n" +
        '      return data.toString();\n' +
        '    }\n' +
        '    var isObjectPayload = utils.isObject(data);\n' +
        "    var contentType = headers && headers['Content-Type'];\n" +
        '    var isFileList;\n' +
        "    if ((isFileList = utils.isFileList(data)) || isObjectPayload && contentType === 'multipart/form-data') {\n" +
        '      var _FormData = this.env && this.env.FormData;\n' +
        '      return toFormData(isFileList ? {\n' +
        "        'files[]': data\n" +
        '      } : data, _FormData && new _FormData());\n' +
        "    } else if (isObjectPayload || contentType === 'application/json') {\n" +
        "      setContentTypeIfUnset(headers, 'application/json');\n" +
        '      return stringifySafely(data);\n' +
        '    }\n' +
        '    return data;\n' +
        '  }'
    ],
    transformResponse: [
      '[function] function transformResponse(data) {\n' +
        '    var transitional = this.transitional || defaults.transitional;\n' +
        '    var silentJSONParsing = transitional && transitional.silentJSONParsing;\n' +
        '    var forcedJSONParsing = transitional && transitional.forcedJSONParsing;\n' +
        "    var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';\n" +
        '    if (strictJSONParsing || forcedJSONParsing && utils.isString(data) && data.length) {\n' +
        '      try {\n' +
        '        return JSON.parse(data);\n' +
        '      } catch (e) {\n' +
        '        if (strictJSONParsing) {\n' +
        "          if (e.name === 'SyntaxError') {\n" +
        '            throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);\n' +
        '          }\n' +
        '          throw e;\n' +
        '        }\n' +
        '      }\n' +
        '    }\n' +
        '    return data;\n' +
        '  }'
    ],
    timeout: 0,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
      FormData: '[function] function FormData(options) {\n' +
        '  if (!(this instanceof FormData)) {\n' +
        '    return new FormData(options);\n' +
        '  }\n' +
        '  this._overheadLength = 0;\n' +
        '  this._valueLength = 0;\n' +
        '  this._valuesToMeasure = [];\n' +
        '  CombinedStream.call(this);\n' +
        '  options = options || {};\n' +
        '  for (var option in options) {\n' +
        '    this[option] = options[option];\n' +
        '  }\n' +
        '}'
    },
    validateStatus: '[function] function validateStatus(status) {\n' +
      '    return status >= 200 && status < 300;\n' +
      '  }',
    headers: {
      Accept: 'application/json, text/plain, */*',
      Authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2MjM5NywiZXhwIjoxNjg5MTQ4Nzk3fQ.kIQ8BFgEbj1TIf2AlRDJj3LZudPo0Qhs_V_VHzdLl0s',
      'Content-Type': '',
      'User-Agent': 'axios/0.27.2'
    },
    url: 'https://connect-api.dev.insiteflow.io/v1/connect/container/config?organizationId=711729a8-a473-47bf-b27f-8abc1ee52281&containerType=desktop',
    method: 'get'
  },
  code: 'ERR_BAD_REQUEST',
  status: 401
}
[2023-07-11 13:30:08.052] [info]  In the catch 
[2023-07-11 13:30:08.053] [error] Unhandled Exception {
  message: 'Request failed with status code 401',
  name: 'UnhandledRejection AxiosError',
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: '[function] function httpAdapter(config) {\n' +
      '  return new Promise(function dispatchHttpRequest(resolvePromise, rejectPromise) {\n' +
      '    var onCanceled;\n' +
      '    function done() {\n' +
      '      if (config.cancelToken) {\n' +
      '        config.cancelToken.unsubscribe(onCanceled);\n' +
      '      }\n' +
      '      if (config.signal) {\n' +
      "        config.signal.removeEventListener('abort', onCanceled);\n" +
      '      }\n' +
      '    }\n' +
      '    var resolve = function resolve(value) {\n' +
      '      done();\n' +
      '      resolvePromise(value);\n' +
      '    };\n' +
      '    var rejected = false;\n' +
      '    var reject = function reject(value) {\n' +
      '      done();\n' +
      '      rejected = true;\n' +
      '      rejectPromise(value);\n' +
      '    };\n' +
      '    var data = config.data;\n' +
      '    var headers = config.headers;\n' +
      '    var headerNames = {};\n' +
      '    Object.keys(headers).forEach(function storeLowerName(name) {\n' +
      '      headerNames[name.toLowerCase()] = name;\n' +
      '    });\n' +
      '\n' +
      '    // Set User-Agent (required by some servers)\n' +
      '    // See https://github.com/axios/axios/issues/69\n' +
      "    if ('user-agent' in headerNames) {\n" +
      '      // User-Agent is specified; handle case where no UA header is desired\n' +
      "      if (!headers[headerNames['user-agent']]) {\n" +
      "        delete headers[headerNames['user-agent']];\n" +
      '      }\n' +
      '      // Otherwise, use specified value\n' +
      '    } else {\n' +
      "      // Only set header if it hasn't been set in config\n" +
      "      headers['User-Agent'] = 'axios/' + VERSION;\n" +
      '    }\n' +
      '\n' +
      '    // support for https://www.npmjs.com/package/form-data api\n' +
      '    if (utils.isFormData(data) && utils.isFunction(data.getHeaders)) {\n' +
      '      Object.assign(headers, data.getHeaders());\n' +
      '    } else if (data && !utils.isStream(data)) {\n' +
      '      if (Buffer.isBuffer(data)) {\n' +
      '        // Nothing to do...\n' +
      '      } else if (utils.isArrayBuffer(data)) {\n' +
      '        data = Buffer.from(new Uint8Array(data));\n' +
      '      } else if (utils.isString(data)) {\n' +
      "        data = Buffer.from(data, 'utf-8');\n" +
      '      } else {\n' +
      "        return reject(new AxiosError('Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream', AxiosError.ERR_BAD_REQUEST, config));\n" +
      '      }\n' +
      '      if (config.maxBodyLength > -1 && data.length > config.maxBodyLength) {\n' +
      "        return reject(new AxiosError('Request body larger than maxBodyLength limit', AxiosError.ERR_BAD_REQUEST, config));\n" +
      '      }\n' +
      '\n' +
      '      // Add Content-Length header if data exists\n' +
      "      if (!headerNames['content-length']) {\n" +
      "        headers['Content-Length'] = data.length;\n" +
      '      }\n' +
      '    }\n' +
      '\n' +
      '    // HTTP basic authentication\n' +
      '    var auth = undefined;\n' +
      '    if (config.auth) {\n' +
      "      var username = config.auth.username || '';\n" +
      "      var password = config.auth.password || '';\n" +
      "      auth = username + ':' + password;\n" +
      '    }\n' +
      '\n' +
      '    // Parse url\n' +
      '    var fullPath = buildFullPath(config.baseURL, config.url);\n' +
      '    var parsed = url.parse(fullPath);\n' +
      '    var protocol = parsed.protocol || supportedProtocols[0];\n' +
      '    if (supportedProtocols.indexOf(protocol) === -1) {\n' +
      "      return reject(new AxiosError('Unsupported protocol ' + protocol, AxiosError.ERR_BAD_REQUEST, config));\n" +
      '    }\n' +
      '    if (!auth && parsed.auth) {\n' +
      "      var urlAuth = parsed.auth.split(':');\n" +
      "      var urlUsername = urlAuth[0] || '';\n" +
      "      var urlPassword = urlAuth[1] || '';\n" +
      "      auth = urlUsername + ':' + urlPassword;\n" +
      '    }\n' +
      '    if (auth && headerNames.authorization) {\n' +
      '      delete headers[headerNames.authorization];\n' +
      '    }\n' +
      '    var isHttpsRequest = isHttps.test(protocol);\n' +
      '    var agent = isHttpsRequest ? config.httpsAgent : config.httpAgent;\n' +
      '    try {\n' +
      "      buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\\?/, '');\n" +
      '    } catch (err) {\n' +
      '      var customErr = new Error(err.message);\n' +
      '      customErr.config = config;\n' +
      '      customErr.url = config.url;\n' +
      '      customErr.exists = true;\n' +
      '      reject(customErr);\n' +
      '    }\n' +
      '    var options = {\n' +
      "      path: buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\\?/, ''),\n" +
      '      method: config.method.toUpperCase(),\n' +
      '      headers: headers,\n' +
      '      agent: agent,\n' +
      '      agents: {\n' +
      '        http: config.httpAgent,\n' +
      '        https: config.httpsAgent\n' +
      '      },\n' +
      '      auth: auth\n' +
      '    };\n' +
      '    if (config.socketPath) {\n' +
      '      options.socketPath = config.socketPath;\n' +
      '    } else {\n' +
      '      options.hostname = parsed.hostname;\n' +
      '      options.port = parsed.port;\n' +
      '    }\n' +
      '    var proxy = config.proxy;\n' +
      '    if (!proxy && proxy !== false) {\n' +
      "      var proxyEnv = protocol.slice(0, -1) + '_proxy';\n" +
      '      var proxyUrl = process.env[proxyEnv] || process.env[proxyEnv.toUpperCase()];\n' +
      '      if (proxyUrl) {\n' +
      '        var parsedProxyUrl = url.parse(proxyUrl);\n' +
      '        var noProxyEnv = process.env.no_proxy || process.env.NO_PROXY;\n' +
      '        var shouldProxy = true;\n' +
      '        if (noProxyEnv) {\n' +
      "          var noProxy = noProxyEnv.split(',').map(function trim(s) {\n" +
      '            return s.trim();\n' +
      '          });\n' +
      '          shouldProxy = !noProxy.some(function proxyMatch(proxyElement) {\n' +
      '            if (!proxyElement) {\n' +
      '              return false;\n' +
      '            }\n' +
      "            if (proxyElement === '*') {\n" +
      '              return true;\n' +
      '            }\n' +
      "            if (proxyElement[0] === '.' && parsed.hostname.substr(parsed.hostname.length - proxyElement.length) === proxyElement) {\n" +
      '              return true;\n' +
      '            }\n' +
      '            return parsed.hostname === proxyElement;\n' +
      '          });\n' +
      '        }\n' +
      '        if (shouldProxy) {\n' +
      '          proxy = {\n' +
      '            host: parsedProxyUrl.hostname,\n' +
      '            port: parsedProxyUrl.port,\n' +
      '            protocol: parsedProxyUrl.protocol\n' +
      '          };\n' +
      '          if (parsedProxyUrl.auth) {\n' +
      "            var proxyUrlAuth = parsedProxyUrl.auth.split(':');\n" +
      '            proxy.auth = {\n' +
      '              username: proxyUrlAuth[0],\n' +
      '              password: proxyUrlAuth[1]\n' +
      '            };\n' +
      '          }\n' +
      '        }\n' +
      '      }\n' +
      '    }\n' +
      '    if (proxy) {\n' +
      "      options.headers.host = parsed.hostname + (parsed.port ? ':' + parsed.port : '');\n" +
      "      setProxy(options, proxy, protocol + '//' + parsed.hostname + (parsed.port ? ':' + parsed.port : '') + options.path);\n" +
      '    }\n' +
      '    var transport;\n' +
      '    var isHttpsProxy = isHttpsRequest && (proxy ? isHttps.test(proxy.protocol) : true);\n' +
      '    if (config.transport) {\n' +
      '      transport = config.transport;\n' +
      '    } else if (config.maxRedirects === 0) {\n' +
      '      transport = isHttpsProxy ? https : http;\n' +
      '    } else {\n' +
      '      if (config.maxRedirects) {\n' +
      '        options.maxRedirects = config.maxRedirects;\n' +
      '      }\n' +
      '      if (config.beforeRedirect) {\n' +
      '        options.beforeRedirect = config.beforeRedirect;\n' +
      '      }\n' +
      '      transport = isHttpsProxy ? httpsFollow : httpFollow;\n' +
      '    }\n' +
      '    if (config.maxBodyLength > -1) {\n' +
      '      options.maxBodyLength = config.maxBodyLength;\n' +
      '    }\n' +
      '    if (config.insecureHTTPParser) {\n' +
      '      options.insecureHTTPParser = config.insecureHTTPParser;\n' +
      '    }\n' +
      '\n' +
      '    // Create the request\n' +
      '    var req = transport.request(options, function handleResponse(res) {\n' +
      '      if (req.aborted) return;\n' +
      '\n' +
      '      // uncompress the response body transparently if required\n' +
      '      var stream = res;\n' +
      '\n' +
      '      // return the last request in case of redirects\n' +
      '      var lastRequest = res.req || req;\n' +
      '\n' +
      '      // if no content, is HEAD request or decompress disabled we should not decompress\n' +
      "      if (res.statusCode !== 204 && lastRequest.method !== 'HEAD' && config.decompress !== false) {\n" +
      "        switch (res.headers['content-encoding']) {\n" +
      '          /*eslint default-case:0*/\n' +
      "          case 'gzip':\n" +
      "          case 'compress':\n" +
      "          case 'deflate':\n" +
      '            // add the unzipper to the body stream processing pipeline\n' +
      '            stream = stream.pipe(zlib.createUnzip());\n' +
      '\n' +
      '            // remove the content-encoding in order to not confuse downstream operations\n' +
      "            delete res.headers['content-encoding'];\n" +
      '            break;\n' +
      '        }\n' +
      '      }\n' +
      '      var response = {\n' +
      '        status: res.statusCode,\n' +
      '        statusText: res.statusMessage,\n' +
      '        headers: res.headers,\n' +
      '        config: config,\n' +
      '        request: lastRequest\n' +
      '      };\n' +
      "      if (config.responseType === 'stream') {\n" +
      '        response.data = stream;\n' +
      '        settle(resolve, reject, response);\n' +
      '      } else {\n' +
      '        var responseBuffer = [];\n' +
      '        var totalResponseBytes = 0;\n' +
      "        stream.on('data', function handleStreamData(chunk) {\n" +
      '          responseBuffer.push(chunk);\n' +
      '          totalResponseBytes += chunk.length;\n' +
      '\n' +
      '          // make sure the content length is not over the maxContentLength if specified\n' +
      '          if (config.maxContentLength > -1 && totalResponseBytes > config.maxContentLength) {\n' +
      '            // stream.destoy() emit aborted event before calling reject() on Node.js v16\n' +
      '            rejected = true;\n' +
      '            stream.destroy();\n' +
      "            reject(new AxiosError('maxContentLength size of ' + config.maxContentLength + ' exceeded', AxiosError.ERR_BAD_RESPONSE, config, lastRequest));\n" +
      '          }\n' +
      '        });\n' +
      "        stream.on('aborted', function handlerStreamAborted() {\n" +
      '          if (rejected) {\n' +
      '            return;\n' +
      '          }\n' +
      '          stream.destroy();\n' +
      "          reject(new AxiosError('maxContentLength size of ' + config.maxContentLength + ' exceeded', AxiosError.ERR_BAD_RESPONSE, config, lastRequest));\n" +
      '        });\n' +
      "        stream.on('error', function handleStreamError(err) {\n" +
      '          if (req.aborted) return;\n' +
      '          reject(AxiosError.from(err, null, config, lastRequest));\n' +
      '        });\n' +
      "        stream.on('end', function handleStreamEnd() {\n" +
      '          try {\n' +
      '            var responseData = responseBuffer.length === 1 ? responseBuffer[0] : Buffer.concat(responseBuffer);\n' +
      "            if (config.responseType !== 'arraybuffer') {\n" +
      '              responseData = responseData.toString(config.responseEncoding);\n' +
      "              if (!config.responseEncoding || config.responseEncoding === 'utf8') {\n" +
      '                responseData = utils.stripBOM(responseData);\n' +
      '              }\n' +
      '            }\n' +
      '            response.data = responseData;\n' +
      '          } catch (err) {\n' +
      '            reject(AxiosError.from(err, null, config, response.request, response));\n' +
      '          }\n' +
      '          settle(resolve, reject, response);\n' +
      '        });\n' +
      '      }\n' +
      '    });\n' +
      '\n' +
      '    // Handle errors\n' +
      "    req.on('error', function handleRequestError(err) {\n" +
      '      // @todo remove\n' +
      '      // if (req.aborted && err.code !== AxiosError.ERR_FR_TOO_MANY_REDIRECTS) return;\n' +
      '      reject(AxiosError.from(err, null, config, req));\n' +
      '    });\n' +
      '\n' +
      ' '... 2346 more characters,
    transformRequest: [
      '[function] function transformRequest(data, headers) {\n' +
        "    normalizeHeaderName(headers, 'Accept');\n" +
        "    normalizeHeaderName(headers, 'Content-Type');\n" +
        '    if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {\n' +
        '      return data;\n' +
        '    }\n' +
        '    if (utils.isArrayBufferView(data)) {\n' +
        '      return data.buffer;\n' +
        '    }\n' +
        '    if (utils.isURLSearchParams(data)) {\n' +
        "      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');\n" +
        '      return data.toString();\n' +
        '    }\n' +
        '    var isObjectPayload = utils.isObject(data);\n' +
        "    var contentType = headers && headers['Content-Type'];\n" +
        '    var isFileList;\n' +
        "    if ((isFileList = utils.isFileList(data)) || isObjectPayload && contentType === 'multipart/form-data') {\n" +
        '      var _FormData = this.env && this.env.FormData;\n' +
        '      return toFormData(isFileList ? {\n' +
        "        'files[]': data\n" +
        '      } : data, _FormData && new _FormData());\n' +
        "    } else if (isObjectPayload || contentType === 'application/json') {\n" +
        "      setContentTypeIfUnset(headers, 'application/json');\n" +
        '      return stringifySafely(data);\n' +
        '    }\n' +
        '    return data;\n' +
        '  }'
    ],
    transformResponse: [
      '[function] function transformResponse(data) {\n' +
        '    var transitional = this.transitional || defaults.transitional;\n' +
        '    var silentJSONParsing = transitional && transitional.silentJSONParsing;\n' +
        '    var forcedJSONParsing = transitional && transitional.forcedJSONParsing;\n' +
        "    var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';\n" +
        '    if (strictJSONParsing || forcedJSONParsing && utils.isString(data) && data.length) {\n' +
        '      try {\n' +
        '        return JSON.parse(data);\n' +
        '      } catch (e) {\n' +
        '        if (strictJSONParsing) {\n' +
        "          if (e.name === 'SyntaxError') {\n" +
        '            throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);\n' +
        '          }\n' +
        '          throw e;\n' +
        '        }\n' +
        '      }\n' +
        '    }\n' +
        '    return data;\n' +
        '  }'
    ],
    timeout: 0,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
      FormData: '[function] function FormData(options) {\n' +
        '  if (!(this instanceof FormData)) {\n' +
        '    return new FormData(options);\n' +
        '  }\n' +
        '  this._overheadLength = 0;\n' +
        '  this._valueLength = 0;\n' +
        '  this._valuesToMeasure = [];\n' +
        '  CombinedStream.call(this);\n' +
        '  options = options || {};\n' +
        '  for (var option in options) {\n' +
        '    this[option] = options[option];\n' +
        '  }\n' +
        '}'
    },
    validateStatus: '[function] function validateStatus(status) {\n' +
      '    return status >= 200 && status < 300;\n' +
      '  }',
    headers: {
      Accept: 'application/json, text/plain, */*',
      Authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2MjM5NywiZXhwIjoxNjg5MTQ4Nzk3fQ.kIQ8BFgEbj1TIf2AlRDJj3LZudPo0Qhs_V_VHzdLl0s',
      'Content-Type': '',
      'User-Agent': 'axios/0.27.2'
    },
    url: 'https://connect-api.dev.insiteflow.io/v1/connect/container/config?organizationId=711729a8-a473-47bf-b27f-8abc1ee52281&containerType=desktop',
    method: 'get'
  },
  code: 'ERR_BAD_REQUEST',
  status: 401
}
[2023-07-11 13:30:13.133] [info]  In the catch 
[2023-07-11 13:30:13.134] [error] Unhandled Exception {
  message: 'Request failed with status code 401',
  name: 'UnhandledRejection AxiosError',
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: '[function] function httpAdapter(config) {\n' +
      '  return new Promise(function dispatchHttpRequest(resolvePromise, rejectPromise) {\n' +
      '    var onCanceled;\n' +
      '    function done() {\n' +
      '      if (config.cancelToken) {\n' +
      '        config.cancelToken.unsubscribe(onCanceled);\n' +
      '      }\n' +
      '      if (config.signal) {\n' +
      "        config.signal.removeEventListener('abort', onCanceled);\n" +
      '      }\n' +
      '    }\n' +
      '    var resolve = function resolve(value) {\n' +
      '      done();\n' +
      '      resolvePromise(value);\n' +
      '    };\n' +
      '    var rejected = false;\n' +
      '    var reject = function reject(value) {\n' +
      '      done();\n' +
      '      rejected = true;\n' +
      '      rejectPromise(value);\n' +
      '    };\n' +
      '    var data = config.data;\n' +
      '    var headers = config.headers;\n' +
      '    var headerNames = {};\n' +
      '    Object.keys(headers).forEach(function storeLowerName(name) {\n' +
      '      headerNames[name.toLowerCase()] = name;\n' +
      '    });\n' +
      '\n' +
      '    // Set User-Agent (required by some servers)\n' +
      '    // See https://github.com/axios/axios/issues/69\n' +
      "    if ('user-agent' in headerNames) {\n" +
      '      // User-Agent is specified; handle case where no UA header is desired\n' +
      "      if (!headers[headerNames['user-agent']]) {\n" +
      "        delete headers[headerNames['user-agent']];\n" +
      '      }\n' +
      '      // Otherwise, use specified value\n' +
      '    } else {\n' +
      "      // Only set header if it hasn't been set in config\n" +
      "      headers['User-Agent'] = 'axios/' + VERSION;\n" +
      '    }\n' +
      '\n' +
      '    // support for https://www.npmjs.com/package/form-data api\n' +
      '    if (utils.isFormData(data) && utils.isFunction(data.getHeaders)) {\n' +
      '      Object.assign(headers, data.getHeaders());\n' +
      '    } else if (data && !utils.isStream(data)) {\n' +
      '      if (Buffer.isBuffer(data)) {\n' +
      '        // Nothing to do...\n' +
      '      } else if (utils.isArrayBuffer(data)) {\n' +
      '        data = Buffer.from(new Uint8Array(data));\n' +
      '      } else if (utils.isString(data)) {\n' +
      "        data = Buffer.from(data, 'utf-8');\n" +
      '      } else {\n' +
      "        return reject(new AxiosError('Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream', AxiosError.ERR_BAD_REQUEST, config));\n" +
      '      }\n' +
      '      if (config.maxBodyLength > -1 && data.length > config.maxBodyLength) {\n' +
      "        return reject(new AxiosError('Request body larger than maxBodyLength limit', AxiosError.ERR_BAD_REQUEST, config));\n" +
      '      }\n' +
      '\n' +
      '      // Add Content-Length header if data exists\n' +
      "      if (!headerNames['content-length']) {\n" +
      "        headers['Content-Length'] = data.length;\n" +
      '      }\n' +
      '    }\n' +
      '\n' +
      '    // HTTP basic authentication\n' +
      '    var auth = undefined;\n' +
      '    if (config.auth) {\n' +
      "      var username = config.auth.username || '';\n" +
      "      var password = config.auth.password || '';\n" +
      "      auth = username + ':' + password;\n" +
      '    }\n' +
      '\n' +
      '    // Parse url\n' +
      '    var fullPath = buildFullPath(config.baseURL, config.url);\n' +
      '    var parsed = url.parse(fullPath);\n' +
      '    var protocol = parsed.protocol || supportedProtocols[0];\n' +
      '    if (supportedProtocols.indexOf(protocol) === -1) {\n' +
      "      return reject(new AxiosError('Unsupported protocol ' + protocol, AxiosError.ERR_BAD_REQUEST, config));\n" +
      '    }\n' +
      '    if (!auth && parsed.auth) {\n' +
      "      var urlAuth = parsed.auth.split(':');\n" +
      "      var urlUsername = urlAuth[0] || '';\n" +
      "      var urlPassword = urlAuth[1] || '';\n" +
      "      auth = urlUsername + ':' + urlPassword;\n" +
      '    }\n' +
      '    if (auth && headerNames.authorization) {\n' +
      '      delete headers[headerNames.authorization];\n' +
      '    }\n' +
      '    var isHttpsRequest = isHttps.test(protocol);\n' +
      '    var agent = isHttpsRequest ? config.httpsAgent : config.httpAgent;\n' +
      '    try {\n' +
      "      buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\\?/, '');\n" +
      '    } catch (err) {\n' +
      '      var customErr = new Error(err.message);\n' +
      '      customErr.config = config;\n' +
      '      customErr.url = config.url;\n' +
      '      customErr.exists = true;\n' +
      '      reject(customErr);\n' +
      '    }\n' +
      '    var options = {\n' +
      "      path: buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\\?/, ''),\n" +
      '      method: config.method.toUpperCase(),\n' +
      '      headers: headers,\n' +
      '      agent: agent,\n' +
      '      agents: {\n' +
      '        http: config.httpAgent,\n' +
      '        https: config.httpsAgent\n' +
      '      },\n' +
      '      auth: auth\n' +
      '    };\n' +
      '    if (config.socketPath) {\n' +
      '      options.socketPath = config.socketPath;\n' +
      '    } else {\n' +
      '      options.hostname = parsed.hostname;\n' +
      '      options.port = parsed.port;\n' +
      '    }\n' +
      '    var proxy = config.proxy;\n' +
      '    if (!proxy && proxy !== false) {\n' +
      "      var proxyEnv = protocol.slice(0, -1) + '_proxy';\n" +
      '      var proxyUrl = process.env[proxyEnv] || process.env[proxyEnv.toUpperCase()];\n' +
      '      if (proxyUrl) {\n' +
      '        var parsedProxyUrl = url.parse(proxyUrl);\n' +
      '        var noProxyEnv = process.env.no_proxy || process.env.NO_PROXY;\n' +
      '        var shouldProxy = true;\n' +
      '        if (noProxyEnv) {\n' +
      "          var noProxy = noProxyEnv.split(',').map(function trim(s) {\n" +
      '            return s.trim();\n' +
      '          });\n' +
      '          shouldProxy = !noProxy.some(function proxyMatch(proxyElement) {\n' +
      '            if (!proxyElement) {\n' +
      '              return false;\n' +
      '            }\n' +
      "            if (proxyElement === '*') {\n" +
      '              return true;\n' +
      '            }\n' +
      "            if (proxyElement[0] === '.' && parsed.hostname.substr(parsed.hostname.length - proxyElement.length) === proxyElement) {\n" +
      '              return true;\n' +
      '            }\n' +
      '            return parsed.hostname === proxyElement;\n' +
      '          });\n' +
      '        }\n' +
      '        if (shouldProxy) {\n' +
      '          proxy = {\n' +
      '            host: parsedProxyUrl.hostname,\n' +
      '            port: parsedProxyUrl.port,\n' +
      '            protocol: parsedProxyUrl.protocol\n' +
      '          };\n' +
      '          if (parsedProxyUrl.auth) {\n' +
      "            var proxyUrlAuth = parsedProxyUrl.auth.split(':');\n" +
      '            proxy.auth = {\n' +
      '              username: proxyUrlAuth[0],\n' +
      '              password: proxyUrlAuth[1]\n' +
      '            };\n' +
      '          }\n' +
      '        }\n' +
      '      }\n' +
      '    }\n' +
      '    if (proxy) {\n' +
      "      options.headers.host = parsed.hostname + (parsed.port ? ':' + parsed.port : '');\n" +
      "      setProxy(options, proxy, protocol + '//' + parsed.hostname + (parsed.port ? ':' + parsed.port : '') + options.path);\n" +
      '    }\n' +
      '    var transport;\n' +
      '    var isHttpsProxy = isHttpsRequest && (proxy ? isHttps.test(proxy.protocol) : true);\n' +
      '    if (config.transport) {\n' +
      '      transport = config.transport;\n' +
      '    } else if (config.maxRedirects === 0) {\n' +
      '      transport = isHttpsProxy ? https : http;\n' +
      '    } else {\n' +
      '      if (config.maxRedirects) {\n' +
      '        options.maxRedirects = config.maxRedirects;\n' +
      '      }\n' +
      '      if (config.beforeRedirect) {\n' +
      '        options.beforeRedirect = config.beforeRedirect;\n' +
      '      }\n' +
      '      transport = isHttpsProxy ? httpsFollow : httpFollow;\n' +
      '    }\n' +
      '    if (config.maxBodyLength > -1) {\n' +
      '      options.maxBodyLength = config.maxBodyLength;\n' +
      '    }\n' +
      '    if (config.insecureHTTPParser) {\n' +
      '      options.insecureHTTPParser = config.insecureHTTPParser;\n' +
      '    }\n' +
      '\n' +
      '    // Create the request\n' +
      '    var req = transport.request(options, function handleResponse(res) {\n' +
      '      if (req.aborted) return;\n' +
      '\n' +
      '      // uncompress the response body transparently if required\n' +
      '      var stream = res;\n' +
      '\n' +
      '      // return the last request in case of redirects\n' +
      '      var lastRequest = res.req || req;\n' +
      '\n' +
      '      // if no content, is HEAD request or decompress disabled we should not decompress\n' +
      "      if (res.statusCode !== 204 && lastRequest.method !== 'HEAD' && config.decompress !== false) {\n" +
      "        switch (res.headers['content-encoding']) {\n" +
      '          /*eslint default-case:0*/\n' +
      "          case 'gzip':\n" +
      "          case 'compress':\n" +
      "          case 'deflate':\n" +
      '            // add the unzipper to the body stream processing pipeline\n' +
      '            stream = stream.pipe(zlib.createUnzip());\n' +
      '\n' +
      '            // remove the content-encoding in order to not confuse downstream operations\n' +
      "            delete res.headers['content-encoding'];\n" +
      '            break;\n' +
      '        }\n' +
      '      }\n' +
      '      var response = {\n' +
      '        status: res.statusCode,\n' +
      '        statusText: res.statusMessage,\n' +
      '        headers: res.headers,\n' +
      '        config: config,\n' +
      '        request: lastRequest\n' +
      '      };\n' +
      "      if (config.responseType === 'stream') {\n" +
      '        response.data = stream;\n' +
      '        settle(resolve, reject, response);\n' +
      '      } else {\n' +
      '        var responseBuffer = [];\n' +
      '        var totalResponseBytes = 0;\n' +
      "        stream.on('data', function handleStreamData(chunk) {\n" +
      '          responseBuffer.push(chunk);\n' +
      '          totalResponseBytes += chunk.length;\n' +
      '\n' +
      '          // make sure the content length is not over the maxContentLength if specified\n' +
      '          if (config.maxContentLength > -1 && totalResponseBytes > config.maxContentLength) {\n' +
      '            // stream.destoy() emit aborted event before calling reject() on Node.js v16\n' +
      '            rejected = true;\n' +
      '            stream.destroy();\n' +
      "            reject(new AxiosError('maxContentLength size of ' + config.maxContentLength + ' exceeded', AxiosError.ERR_BAD_RESPONSE, config, lastRequest));\n" +
      '          }\n' +
      '        });\n' +
      "        stream.on('aborted', function handlerStreamAborted() {\n" +
      '          if (rejected) {\n' +
      '            return;\n' +
      '          }\n' +
      '          stream.destroy();\n' +
      "          reject(new AxiosError('maxContentLength size of ' + config.maxContentLength + ' exceeded', AxiosError.ERR_BAD_RESPONSE, config, lastRequest));\n" +
      '        });\n' +
      "        stream.on('error', function handleStreamError(err) {\n" +
      '          if (req.aborted) return;\n' +
      '          reject(AxiosError.from(err, null, config, lastRequest));\n' +
      '        });\n' +
      "        stream.on('end', function handleStreamEnd() {\n" +
      '          try {\n' +
      '            var responseData = responseBuffer.length === 1 ? responseBuffer[0] : Buffer.concat(responseBuffer);\n' +
      "            if (config.responseType !== 'arraybuffer') {\n" +
      '              responseData = responseData.toString(config.responseEncoding);\n' +
      "              if (!config.responseEncoding || config.responseEncoding === 'utf8') {\n" +
      '                responseData = utils.stripBOM(responseData);\n' +
      '              }\n' +
      '            }\n' +
      '            response.data = responseData;\n' +
      '          } catch (err) {\n' +
      '            reject(AxiosError.from(err, null, config, response.request, response));\n' +
      '          }\n' +
      '          settle(resolve, reject, response);\n' +
      '        });\n' +
      '      }\n' +
      '    });\n' +
      '\n' +
      '    // Handle errors\n' +
      "    req.on('error', function handleRequestError(err) {\n" +
      '      // @todo remove\n' +
      '      // if (req.aborted && err.code !== AxiosError.ERR_FR_TOO_MANY_REDIRECTS) return;\n' +
      '      reject(AxiosError.from(err, null, config, req));\n' +
      '    });\n' +
      '\n' +
      ' '... 2346 more characters,
    transformRequest: [
      '[function] function transformRequest(data, headers) {\n' +
        "    normalizeHeaderName(headers, 'Accept');\n" +
        "    normalizeHeaderName(headers, 'Content-Type');\n" +
        '    if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {\n' +
        '      return data;\n' +
        '    }\n' +
        '    if (utils.isArrayBufferView(data)) {\n' +
        '      return data.buffer;\n' +
        '    }\n' +
        '    if (utils.isURLSearchParams(data)) {\n' +
        "      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');\n" +
        '      return data.toString();\n' +
        '    }\n' +
        '    var isObjectPayload = utils.isObject(data);\n' +
        "    var contentType = headers && headers['Content-Type'];\n" +
        '    var isFileList;\n' +
        "    if ((isFileList = utils.isFileList(data)) || isObjectPayload && contentType === 'multipart/form-data') {\n" +
        '      var _FormData = this.env && this.env.FormData;\n' +
        '      return toFormData(isFileList ? {\n' +
        "        'files[]': data\n" +
        '      } : data, _FormData && new _FormData());\n' +
        "    } else if (isObjectPayload || contentType === 'application/json') {\n" +
        "      setContentTypeIfUnset(headers, 'application/json');\n" +
        '      return stringifySafely(data);\n' +
        '    }\n' +
        '    return data;\n' +
        '  }'
    ],
    transformResponse: [
      '[function] function transformResponse(data) {\n' +
        '    var transitional = this.transitional || defaults.transitional;\n' +
        '    var silentJSONParsing = transitional && transitional.silentJSONParsing;\n' +
        '    var forcedJSONParsing = transitional && transitional.forcedJSONParsing;\n' +
        "    var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';\n" +
        '    if (strictJSONParsing || forcedJSONParsing && utils.isString(data) && data.length) {\n' +
        '      try {\n' +
        '        return JSON.parse(data);\n' +
        '      } catch (e) {\n' +
        '        if (strictJSONParsing) {\n' +
        "          if (e.name === 'SyntaxError') {\n" +
        '            throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);\n' +
        '          }\n' +
        '          throw e;\n' +
        '        }\n' +
        '      }\n' +
        '    }\n' +
        '    return data;\n' +
        '  }'
    ],
    timeout: 0,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
      FormData: '[function] function FormData(options) {\n' +
        '  if (!(this instanceof FormData)) {\n' +
        '    return new FormData(options);\n' +
        '  }\n' +
        '  this._overheadLength = 0;\n' +
        '  this._valueLength = 0;\n' +
        '  this._valuesToMeasure = [];\n' +
        '  CombinedStream.call(this);\n' +
        '  options = options || {};\n' +
        '  for (var option in options) {\n' +
        '    this[option] = options[option];\n' +
        '  }\n' +
        '}'
    },
    validateStatus: '[function] function validateStatus(status) {\n' +
      '    return status >= 200 && status < 300;\n' +
      '  }',
    headers: {
      Accept: 'application/json, text/plain, */*',
      Authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2MjM5NywiZXhwIjoxNjg5MTQ4Nzk3fQ.kIQ8BFgEbj1TIf2AlRDJj3LZudPo0Qhs_V_VHzdLl0s',
      'Content-Type': '',
      'User-Agent': 'axios/0.27.2'
    },
    url: 'https://connect-api.dev.insiteflow.io/v1/connect/container/config?organizationId=711729a8-a473-47bf-b27f-8abc1ee52281&containerType=desktop',
    method: 'get'
  },
  code: 'ERR_BAD_REQUEST',
  status: 401
}
[2023-07-11 13:30:17.936] [info]  In the catch 
[2023-07-11 13:30:17.937] [error] Unhandled Exception {
  message: 'Request failed with status code 401',
  name: 'UnhandledRejection AxiosError',
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: '[function] function httpAdapter(config) {\n' +
      '  return new Promise(function dispatchHttpRequest(resolvePromise, rejectPromise) {\n' +
      '    var onCanceled;\n' +
      '    function done() {\n' +
      '      if (config.cancelToken) {\n' +
      '        config.cancelToken.unsubscribe(onCanceled);\n' +
      '      }\n' +
      '      if (config.signal) {\n' +
      "        config.signal.removeEventListener('abort', onCanceled);\n" +
      '      }\n' +
      '    }\n' +
      '    var resolve = function resolve(value) {\n' +
      '      done();\n' +
      '      resolvePromise(value);\n' +
      '    };\n' +
      '    var rejected = false;\n' +
      '    var reject = function reject(value) {\n' +
      '      done();\n' +
      '      rejected = true;\n' +
      '      rejectPromise(value);\n' +
      '    };\n' +
      '    var data = config.data;\n' +
      '    var headers = config.headers;\n' +
      '    var headerNames = {};\n' +
      '    Object.keys(headers).forEach(function storeLowerName(name) {\n' +
      '      headerNames[name.toLowerCase()] = name;\n' +
      '    });\n' +
      '\n' +
      '    // Set User-Agent (required by some servers)\n' +
      '    // See https://github.com/axios/axios/issues/69\n' +
      "    if ('user-agent' in headerNames) {\n" +
      '      // User-Agent is specified; handle case where no UA header is desired\n' +
      "      if (!headers[headerNames['user-agent']]) {\n" +
      "        delete headers[headerNames['user-agent']];\n" +
      '      }\n' +
      '      // Otherwise, use specified value\n' +
      '    } else {\n' +
      "      // Only set header if it hasn't been set in config\n" +
      "      headers['User-Agent'] = 'axios/' + VERSION;\n" +
      '    }\n' +
      '\n' +
      '    // support for https://www.npmjs.com/package/form-data api\n' +
      '    if (utils.isFormData(data) && utils.isFunction(data.getHeaders)) {\n' +
      '      Object.assign(headers, data.getHeaders());\n' +
      '    } else if (data && !utils.isStream(data)) {\n' +
      '      if (Buffer.isBuffer(data)) {\n' +
      '        // Nothing to do...\n' +
      '      } else if (utils.isArrayBuffer(data)) {\n' +
      '        data = Buffer.from(new Uint8Array(data));\n' +
      '      } else if (utils.isString(data)) {\n' +
      "        data = Buffer.from(data, 'utf-8');\n" +
      '      } else {\n' +
      "        return reject(new AxiosError('Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream', AxiosError.ERR_BAD_REQUEST, config));\n" +
      '      }\n' +
      '      if (config.maxBodyLength > -1 && data.length > config.maxBodyLength) {\n' +
      "        return reject(new AxiosError('Request body larger than maxBodyLength limit', AxiosError.ERR_BAD_REQUEST, config));\n" +
      '      }\n' +
      '\n' +
      '      // Add Content-Length header if data exists\n' +
      "      if (!headerNames['content-length']) {\n" +
      "        headers['Content-Length'] = data.length;\n" +
      '      }\n' +
      '    }\n' +
      '\n' +
      '    // HTTP basic authentication\n' +
      '    var auth = undefined;\n' +
      '    if (config.auth) {\n' +
      "      var username = config.auth.username || '';\n" +
      "      var password = config.auth.password || '';\n" +
      "      auth = username + ':' + password;\n" +
      '    }\n' +
      '\n' +
      '    // Parse url\n' +
      '    var fullPath = buildFullPath(config.baseURL, config.url);\n' +
      '    var parsed = url.parse(fullPath);\n' +
      '    var protocol = parsed.protocol || supportedProtocols[0];\n' +
      '    if (supportedProtocols.indexOf(protocol) === -1) {\n' +
      "      return reject(new AxiosError('Unsupported protocol ' + protocol, AxiosError.ERR_BAD_REQUEST, config));\n" +
      '    }\n' +
      '    if (!auth && parsed.auth) {\n' +
      "      var urlAuth = parsed.auth.split(':');\n" +
      "      var urlUsername = urlAuth[0] || '';\n" +
      "      var urlPassword = urlAuth[1] || '';\n" +
      "      auth = urlUsername + ':' + urlPassword;\n" +
      '    }\n' +
      '    if (auth && headerNames.authorization) {\n' +
      '      delete headers[headerNames.authorization];\n' +
      '    }\n' +
      '    var isHttpsRequest = isHttps.test(protocol);\n' +
      '    var agent = isHttpsRequest ? config.httpsAgent : config.httpAgent;\n' +
      '    try {\n' +
      "      buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\\?/, '');\n" +
      '    } catch (err) {\n' +
      '      var customErr = new Error(err.message);\n' +
      '      customErr.config = config;\n' +
      '      customErr.url = config.url;\n' +
      '      customErr.exists = true;\n' +
      '      reject(customErr);\n' +
      '    }\n' +
      '    var options = {\n' +
      "      path: buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\\?/, ''),\n" +
      '      method: config.method.toUpperCase(),\n' +
      '      headers: headers,\n' +
      '      agent: agent,\n' +
      '      agents: {\n' +
      '        http: config.httpAgent,\n' +
      '        https: config.httpsAgent\n' +
      '      },\n' +
      '      auth: auth\n' +
      '    };\n' +
      '    if (config.socketPath) {\n' +
      '      options.socketPath = config.socketPath;\n' +
      '    } else {\n' +
      '      options.hostname = parsed.hostname;\n' +
      '      options.port = parsed.port;\n' +
      '    }\n' +
      '    var proxy = config.proxy;\n' +
      '    if (!proxy && proxy !== false) {\n' +
      "      var proxyEnv = protocol.slice(0, -1) + '_proxy';\n" +
      '      var proxyUrl = process.env[proxyEnv] || process.env[proxyEnv.toUpperCase()];\n' +
      '      if (proxyUrl) {\n' +
      '        var parsedProxyUrl = url.parse(proxyUrl);\n' +
      '        var noProxyEnv = process.env.no_proxy || process.env.NO_PROXY;\n' +
      '        var shouldProxy = true;\n' +
      '        if (noProxyEnv) {\n' +
      "          var noProxy = noProxyEnv.split(',').map(function trim(s) {\n" +
      '            return s.trim();\n' +
      '          });\n' +
      '          shouldProxy = !noProxy.some(function proxyMatch(proxyElement) {\n' +
      '            if (!proxyElement) {\n' +
      '              return false;\n' +
      '            }\n' +
      "            if (proxyElement === '*') {\n" +
      '              return true;\n' +
      '            }\n' +
      "            if (proxyElement[0] === '.' && parsed.hostname.substr(parsed.hostname.length - proxyElement.length) === proxyElement) {\n" +
      '              return true;\n' +
      '            }\n' +
      '            return parsed.hostname === proxyElement;\n' +
      '          });\n' +
      '        }\n' +
      '        if (shouldProxy) {\n' +
      '          proxy = {\n' +
      '            host: parsedProxyUrl.hostname,\n' +
      '            port: parsedProxyUrl.port,\n' +
      '            protocol: parsedProxyUrl.protocol\n' +
      '          };\n' +
      '          if (parsedProxyUrl.auth) {\n' +
      "            var proxyUrlAuth = parsedProxyUrl.auth.split(':');\n" +
      '            proxy.auth = {\n' +
      '              username: proxyUrlAuth[0],\n' +
      '              password: proxyUrlAuth[1]\n' +
      '            };\n' +
      '          }\n' +
      '        }\n' +
      '      }\n' +
      '    }\n' +
      '    if (proxy) {\n' +
      "      options.headers.host = parsed.hostname + (parsed.port ? ':' + parsed.port : '');\n" +
      "      setProxy(options, proxy, protocol + '//' + parsed.hostname + (parsed.port ? ':' + parsed.port : '') + options.path);\n" +
      '    }\n' +
      '    var transport;\n' +
      '    var isHttpsProxy = isHttpsRequest && (proxy ? isHttps.test(proxy.protocol) : true);\n' +
      '    if (config.transport) {\n' +
      '      transport = config.transport;\n' +
      '    } else if (config.maxRedirects === 0) {\n' +
      '      transport = isHttpsProxy ? https : http;\n' +
      '    } else {\n' +
      '      if (config.maxRedirects) {\n' +
      '        options.maxRedirects = config.maxRedirects;\n' +
      '      }\n' +
      '      if (config.beforeRedirect) {\n' +
      '        options.beforeRedirect = config.beforeRedirect;\n' +
      '      }\n' +
      '      transport = isHttpsProxy ? httpsFollow : httpFollow;\n' +
      '    }\n' +
      '    if (config.maxBodyLength > -1) {\n' +
      '      options.maxBodyLength = config.maxBodyLength;\n' +
      '    }\n' +
      '    if (config.insecureHTTPParser) {\n' +
      '      options.insecureHTTPParser = config.insecureHTTPParser;\n' +
      '    }\n' +
      '\n' +
      '    // Create the request\n' +
      '    var req = transport.request(options, function handleResponse(res) {\n' +
      '      if (req.aborted) return;\n' +
      '\n' +
      '      // uncompress the response body transparently if required\n' +
      '      var stream = res;\n' +
      '\n' +
      '      // return the last request in case of redirects\n' +
      '      var lastRequest = res.req || req;\n' +
      '\n' +
      '      // if no content, is HEAD request or decompress disabled we should not decompress\n' +
      "      if (res.statusCode !== 204 && lastRequest.method !== 'HEAD' && config.decompress !== false) {\n" +
      "        switch (res.headers['content-encoding']) {\n" +
      '          /*eslint default-case:0*/\n' +
      "          case 'gzip':\n" +
      "          case 'compress':\n" +
      "          case 'deflate':\n" +
      '            // add the unzipper to the body stream processing pipeline\n' +
      '            stream = stream.pipe(zlib.createUnzip());\n' +
      '\n' +
      '            // remove the content-encoding in order to not confuse downstream operations\n' +
      "            delete res.headers['content-encoding'];\n" +
      '            break;\n' +
      '        }\n' +
      '      }\n' +
      '      var response = {\n' +
      '        status: res.statusCode,\n' +
      '        statusText: res.statusMessage,\n' +
      '        headers: res.headers,\n' +
      '        config: config,\n' +
      '        request: lastRequest\n' +
      '      };\n' +
      "      if (config.responseType === 'stream') {\n" +
      '        response.data = stream;\n' +
      '        settle(resolve, reject, response);\n' +
      '      } else {\n' +
      '        var responseBuffer = [];\n' +
      '        var totalResponseBytes = 0;\n' +
      "        stream.on('data', function handleStreamData(chunk) {\n" +
      '          responseBuffer.push(chunk);\n' +
      '          totalResponseBytes += chunk.length;\n' +
      '\n' +
      '          // make sure the content length is not over the maxContentLength if specified\n' +
      '          if (config.maxContentLength > -1 && totalResponseBytes > config.maxContentLength) {\n' +
      '            // stream.destoy() emit aborted event before calling reject() on Node.js v16\n' +
      '            rejected = true;\n' +
      '            stream.destroy();\n' +
      "            reject(new AxiosError('maxContentLength size of ' + config.maxContentLength + ' exceeded', AxiosError.ERR_BAD_RESPONSE, config, lastRequest));\n" +
      '          }\n' +
      '        });\n' +
      "        stream.on('aborted', function handlerStreamAborted() {\n" +
      '          if (rejected) {\n' +
      '            return;\n' +
      '          }\n' +
      '          stream.destroy();\n' +
      "          reject(new AxiosError('maxContentLength size of ' + config.maxContentLength + ' exceeded', AxiosError.ERR_BAD_RESPONSE, config, lastRequest));\n" +
      '        });\n' +
      "        stream.on('error', function handleStreamError(err) {\n" +
      '          if (req.aborted) return;\n' +
      '          reject(AxiosError.from(err, null, config, lastRequest));\n' +
      '        });\n' +
      "        stream.on('end', function handleStreamEnd() {\n" +
      '          try {\n' +
      '            var responseData = responseBuffer.length === 1 ? responseBuffer[0] : Buffer.concat(responseBuffer);\n' +
      "            if (config.responseType !== 'arraybuffer') {\n" +
      '              responseData = responseData.toString(config.responseEncoding);\n' +
      "              if (!config.responseEncoding || config.responseEncoding === 'utf8') {\n" +
      '                responseData = utils.stripBOM(responseData);\n' +
      '              }\n' +
      '            }\n' +
      '            response.data = responseData;\n' +
      '          } catch (err) {\n' +
      '            reject(AxiosError.from(err, null, config, response.request, response));\n' +
      '          }\n' +
      '          settle(resolve, reject, response);\n' +
      '        });\n' +
      '      }\n' +
      '    });\n' +
      '\n' +
      '    // Handle errors\n' +
      "    req.on('error', function handleRequestError(err) {\n" +
      '      // @todo remove\n' +
      '      // if (req.aborted && err.code !== AxiosError.ERR_FR_TOO_MANY_REDIRECTS) return;\n' +
      '      reject(AxiosError.from(err, null, config, req));\n' +
      '    });\n' +
      '\n' +
      ' '... 2346 more characters,
    transformRequest: [
      '[function] function transformRequest(data, headers) {\n' +
        "    normalizeHeaderName(headers, 'Accept');\n" +
        "    normalizeHeaderName(headers, 'Content-Type');\n" +
        '    if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {\n' +
        '      return data;\n' +
        '    }\n' +
        '    if (utils.isArrayBufferView(data)) {\n' +
        '      return data.buffer;\n' +
        '    }\n' +
        '    if (utils.isURLSearchParams(data)) {\n' +
        "      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');\n" +
        '      return data.toString();\n' +
        '    }\n' +
        '    var isObjectPayload = utils.isObject(data);\n' +
        "    var contentType = headers && headers['Content-Type'];\n" +
        '    var isFileList;\n' +
        "    if ((isFileList = utils.isFileList(data)) || isObjectPayload && contentType === 'multipart/form-data') {\n" +
        '      var _FormData = this.env && this.env.FormData;\n' +
        '      return toFormData(isFileList ? {\n' +
        "        'files[]': data\n" +
        '      } : data, _FormData && new _FormData());\n' +
        "    } else if (isObjectPayload || contentType === 'application/json') {\n" +
        "      setContentTypeIfUnset(headers, 'application/json');\n" +
        '      return stringifySafely(data);\n' +
        '    }\n' +
        '    return data;\n' +
        '  }'
    ],
    transformResponse: [
      '[function] function transformResponse(data) {\n' +
        '    var transitional = this.transitional || defaults.transitional;\n' +
        '    var silentJSONParsing = transitional && transitional.silentJSONParsing;\n' +
        '    var forcedJSONParsing = transitional && transitional.forcedJSONParsing;\n' +
        "    var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';\n" +
        '    if (strictJSONParsing || forcedJSONParsing && utils.isString(data) && data.length) {\n' +
        '      try {\n' +
        '        return JSON.parse(data);\n' +
        '      } catch (e) {\n' +
        '        if (strictJSONParsing) {\n' +
        "          if (e.name === 'SyntaxError') {\n" +
        '            throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);\n' +
        '          }\n' +
        '          throw e;\n' +
        '        }\n' +
        '      }\n' +
        '    }\n' +
        '    return data;\n' +
        '  }'
    ],
    timeout: 0,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
      FormData: '[function] function FormData(options) {\n' +
        '  if (!(this instanceof FormData)) {\n' +
        '    return new FormData(options);\n' +
        '  }\n' +
        '  this._overheadLength = 0;\n' +
        '  this._valueLength = 0;\n' +
        '  this._valuesToMeasure = [];\n' +
        '  CombinedStream.call(this);\n' +
        '  options = options || {};\n' +
        '  for (var option in options) {\n' +
        '    this[option] = options[option];\n' +
        '  }\n' +
        '}'
    },
    validateStatus: '[function] function validateStatus(status) {\n' +
      '    return status >= 200 && status < 300;\n' +
      '  }',
    headers: {
      Accept: 'application/json, text/plain, */*',
      Authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2MjM5NywiZXhwIjoxNjg5MTQ4Nzk3fQ.kIQ8BFgEbj1TIf2AlRDJj3LZudPo0Qhs_V_VHzdLl0s',
      'Content-Type': '',
      'User-Agent': 'axios/0.27.2'
    },
    url: 'https://connect-api.dev.insiteflow.io/v1/connect/container/config?organizationId=711729a8-a473-47bf-b27f-8abc1ee52281&containerType=desktop',
    method: 'get'
  },
  code: 'ERR_BAD_REQUEST',
  status: 401
}
[2023-07-11 13:30:23.316] [info]  In the catch 
[2023-07-11 13:30:23.317] [error] Unhandled Exception {
  message: 'Request failed with status code 401',
  name: 'UnhandledRejection AxiosError',
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: '[function] function httpAdapter(config) {\n' +
      '  return new Promise(function dispatchHttpRequest(resolvePromise, rejectPromise) {\n' +
      '    var onCanceled;\n' +
      '    function done() {\n' +
      '      if (config.cancelToken) {\n' +
      '        config.cancelToken.unsubscribe(onCanceled);\n' +
      '      }\n' +
      '      if (config.signal) {\n' +
      "        config.signal.removeEventListener('abort', onCanceled);\n" +
      '      }\n' +
      '    }\n' +
      '    var resolve = function resolve(value) {\n' +
      '      done();\n' +
      '      resolvePromise(value);\n' +
      '    };\n' +
      '    var rejected = false;\n' +
      '    var reject = function reject(value) {\n' +
      '      done();\n' +
      '      rejected = true;\n' +
      '      rejectPromise(value);\n' +
      '    };\n' +
      '    var data = config.data;\n' +
      '    var headers = config.headers;\n' +
      '    var headerNames = {};\n' +
      '    Object.keys(headers).forEach(function storeLowerName(name) {\n' +
      '      headerNames[name.toLowerCase()] = name;\n' +
      '    });\n' +
      '\n' +
      '    // Set User-Agent (required by some servers)\n' +
      '    // See https://github.com/axios/axios/issues/69\n' +
      "    if ('user-agent' in headerNames) {\n" +
      '      // User-Agent is specified; handle case where no UA header is desired\n' +
      "      if (!headers[headerNames['user-agent']]) {\n" +
      "        delete headers[headerNames['user-agent']];\n" +
      '      }\n' +
      '      // Otherwise, use specified value\n' +
      '    } else {\n' +
      "      // Only set header if it hasn't been set in config\n" +
      "      headers['User-Agent'] = 'axios/' + VERSION;\n" +
      '    }\n' +
      '\n' +
      '    // support for https://www.npmjs.com/package/form-data api\n' +
      '    if (utils.isFormData(data) && utils.isFunction(data.getHeaders)) {\n' +
      '      Object.assign(headers, data.getHeaders());\n' +
      '    } else if (data && !utils.isStream(data)) {\n' +
      '      if (Buffer.isBuffer(data)) {\n' +
      '        // Nothing to do...\n' +
      '      } else if (utils.isArrayBuffer(data)) {\n' +
      '        data = Buffer.from(new Uint8Array(data));\n' +
      '      } else if (utils.isString(data)) {\n' +
      "        data = Buffer.from(data, 'utf-8');\n" +
      '      } else {\n' +
      "        return reject(new AxiosError('Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream', AxiosError.ERR_BAD_REQUEST, config));\n" +
      '      }\n' +
      '      if (config.maxBodyLength > -1 && data.length > config.maxBodyLength) {\n' +
      "        return reject(new AxiosError('Request body larger than maxBodyLength limit', AxiosError.ERR_BAD_REQUEST, config));\n" +
      '      }\n' +
      '\n' +
      '      // Add Content-Length header if data exists\n' +
      "      if (!headerNames['content-length']) {\n" +
      "        headers['Content-Length'] = data.length;\n" +
      '      }\n' +
      '    }\n' +
      '\n' +
      '    // HTTP basic authentication\n' +
      '    var auth = undefined;\n' +
      '    if (config.auth) {\n' +
      "      var username = config.auth.username || '';\n" +
      "      var password = config.auth.password || '';\n" +
      "      auth = username + ':' + password;\n" +
      '    }\n' +
      '\n' +
      '    // Parse url\n' +
      '    var fullPath = buildFullPath(config.baseURL, config.url);\n' +
      '    var parsed = url.parse(fullPath);\n' +
      '    var protocol = parsed.protocol || supportedProtocols[0];\n' +
      '    if (supportedProtocols.indexOf(protocol) === -1) {\n' +
      "      return reject(new AxiosError('Unsupported protocol ' + protocol, AxiosError.ERR_BAD_REQUEST, config));\n" +
      '    }\n' +
      '    if (!auth && parsed.auth) {\n' +
      "      var urlAuth = parsed.auth.split(':');\n" +
      "      var urlUsername = urlAuth[0] || '';\n" +
      "      var urlPassword = urlAuth[1] || '';\n" +
      "      auth = urlUsername + ':' + urlPassword;\n" +
      '    }\n' +
      '    if (auth && headerNames.authorization) {\n' +
      '      delete headers[headerNames.authorization];\n' +
      '    }\n' +
      '    var isHttpsRequest = isHttps.test(protocol);\n' +
      '    var agent = isHttpsRequest ? config.httpsAgent : config.httpAgent;\n' +
      '    try {\n' +
      "      buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\\?/, '');\n" +
      '    } catch (err) {\n' +
      '      var customErr = new Error(err.message);\n' +
      '      customErr.config = config;\n' +
      '      customErr.url = config.url;\n' +
      '      customErr.exists = true;\n' +
      '      reject(customErr);\n' +
      '    }\n' +
      '    var options = {\n' +
      "      path: buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\\?/, ''),\n" +
      '      method: config.method.toUpperCase(),\n' +
      '      headers: headers,\n' +
      '      agent: agent,\n' +
      '      agents: {\n' +
      '        http: config.httpAgent,\n' +
      '        https: config.httpsAgent\n' +
      '      },\n' +
      '      auth: auth\n' +
      '    };\n' +
      '    if (config.socketPath) {\n' +
      '      options.socketPath = config.socketPath;\n' +
      '    } else {\n' +
      '      options.hostname = parsed.hostname;\n' +
      '      options.port = parsed.port;\n' +
      '    }\n' +
      '    var proxy = config.proxy;\n' +
      '    if (!proxy && proxy !== false) {\n' +
      "      var proxyEnv = protocol.slice(0, -1) + '_proxy';\n" +
      '      var proxyUrl = process.env[proxyEnv] || process.env[proxyEnv.toUpperCase()];\n' +
      '      if (proxyUrl) {\n' +
      '        var parsedProxyUrl = url.parse(proxyUrl);\n' +
      '        var noProxyEnv = process.env.no_proxy || process.env.NO_PROXY;\n' +
      '        var shouldProxy = true;\n' +
      '        if (noProxyEnv) {\n' +
      "          var noProxy = noProxyEnv.split(',').map(function trim(s) {\n" +
      '            return s.trim();\n' +
      '          });\n' +
      '          shouldProxy = !noProxy.some(function proxyMatch(proxyElement) {\n' +
      '            if (!proxyElement) {\n' +
      '              return false;\n' +
      '            }\n' +
      "            if (proxyElement === '*') {\n" +
      '              return true;\n' +
      '            }\n' +
      "            if (proxyElement[0] === '.' && parsed.hostname.substr(parsed.hostname.length - proxyElement.length) === proxyElement) {\n" +
      '              return true;\n' +
      '            }\n' +
      '            return parsed.hostname === proxyElement;\n' +
      '          });\n' +
      '        }\n' +
      '        if (shouldProxy) {\n' +
      '          proxy = {\n' +
      '            host: parsedProxyUrl.hostname,\n' +
      '            port: parsedProxyUrl.port,\n' +
      '            protocol: parsedProxyUrl.protocol\n' +
      '          };\n' +
      '          if (parsedProxyUrl.auth) {\n' +
      "            var proxyUrlAuth = parsedProxyUrl.auth.split(':');\n" +
      '            proxy.auth = {\n' +
      '              username: proxyUrlAuth[0],\n' +
      '              password: proxyUrlAuth[1]\n' +
      '            };\n' +
      '          }\n' +
      '        }\n' +
      '      }\n' +
      '    }\n' +
      '    if (proxy) {\n' +
      "      options.headers.host = parsed.hostname + (parsed.port ? ':' + parsed.port : '');\n" +
      "      setProxy(options, proxy, protocol + '//' + parsed.hostname + (parsed.port ? ':' + parsed.port : '') + options.path);\n" +
      '    }\n' +
      '    var transport;\n' +
      '    var isHttpsProxy = isHttpsRequest && (proxy ? isHttps.test(proxy.protocol) : true);\n' +
      '    if (config.transport) {\n' +
      '      transport = config.transport;\n' +
      '    } else if (config.maxRedirects === 0) {\n' +
      '      transport = isHttpsProxy ? https : http;\n' +
      '    } else {\n' +
      '      if (config.maxRedirects) {\n' +
      '        options.maxRedirects = config.maxRedirects;\n' +
      '      }\n' +
      '      if (config.beforeRedirect) {\n' +
      '        options.beforeRedirect = config.beforeRedirect;\n' +
      '      }\n' +
      '      transport = isHttpsProxy ? httpsFollow : httpFollow;\n' +
      '    }\n' +
      '    if (config.maxBodyLength > -1) {\n' +
      '      options.maxBodyLength = config.maxBodyLength;\n' +
      '    }\n' +
      '    if (config.insecureHTTPParser) {\n' +
      '      options.insecureHTTPParser = config.insecureHTTPParser;\n' +
      '    }\n' +
      '\n' +
      '    // Create the request\n' +
      '    var req = transport.request(options, function handleResponse(res) {\n' +
      '      if (req.aborted) return;\n' +
      '\n' +
      '      // uncompress the response body transparently if required\n' +
      '      var stream = res;\n' +
      '\n' +
      '      // return the last request in case of redirects\n' +
      '      var lastRequest = res.req || req;\n' +
      '\n' +
      '      // if no content, is HEAD request or decompress disabled we should not decompress\n' +
      "      if (res.statusCode !== 204 && lastRequest.method !== 'HEAD' && config.decompress !== false) {\n" +
      "        switch (res.headers['content-encoding']) {\n" +
      '          /*eslint default-case:0*/\n' +
      "          case 'gzip':\n" +
      "          case 'compress':\n" +
      "          case 'deflate':\n" +
      '            // add the unzipper to the body stream processing pipeline\n' +
      '            stream = stream.pipe(zlib.createUnzip());\n' +
      '\n' +
      '            // remove the content-encoding in order to not confuse downstream operations\n' +
      "            delete res.headers['content-encoding'];\n" +
      '            break;\n' +
      '        }\n' +
      '      }\n' +
      '      var response = {\n' +
      '        status: res.statusCode,\n' +
      '        statusText: res.statusMessage,\n' +
      '        headers: res.headers,\n' +
      '        config: config,\n' +
      '        request: lastRequest\n' +
      '      };\n' +
      "      if (config.responseType === 'stream') {\n" +
      '        response.data = stream;\n' +
      '        settle(resolve, reject, response);\n' +
      '      } else {\n' +
      '        var responseBuffer = [];\n' +
      '        var totalResponseBytes = 0;\n' +
      "        stream.on('data', function handleStreamData(chunk) {\n" +
      '          responseBuffer.push(chunk);\n' +
      '          totalResponseBytes += chunk.length;\n' +
      '\n' +
      '          // make sure the content length is not over the maxContentLength if specified\n' +
      '          if (config.maxContentLength > -1 && totalResponseBytes > config.maxContentLength) {\n' +
      '            // stream.destoy() emit aborted event before calling reject() on Node.js v16\n' +
      '            rejected = true;\n' +
      '            stream.destroy();\n' +
      "            reject(new AxiosError('maxContentLength size of ' + config.maxContentLength + ' exceeded', AxiosError.ERR_BAD_RESPONSE, config, lastRequest));\n" +
      '          }\n' +
      '        });\n' +
      "        stream.on('aborted', function handlerStreamAborted() {\n" +
      '          if (rejected) {\n' +
      '            return;\n' +
      '          }\n' +
      '          stream.destroy();\n' +
      "          reject(new AxiosError('maxContentLength size of ' + config.maxContentLength + ' exceeded', AxiosError.ERR_BAD_RESPONSE, config, lastRequest));\n" +
      '        });\n' +
      "        stream.on('error', function handleStreamError(err) {\n" +
      '          if (req.aborted) return;\n' +
      '          reject(AxiosError.from(err, null, config, lastRequest));\n' +
      '        });\n' +
      "        stream.on('end', function handleStreamEnd() {\n" +
      '          try {\n' +
      '            var responseData = responseBuffer.length === 1 ? responseBuffer[0] : Buffer.concat(responseBuffer);\n' +
      "            if (config.responseType !== 'arraybuffer') {\n" +
      '              responseData = responseData.toString(config.responseEncoding);\n' +
      "              if (!config.responseEncoding || config.responseEncoding === 'utf8') {\n" +
      '                responseData = utils.stripBOM(responseData);\n' +
      '              }\n' +
      '            }\n' +
      '            response.data = responseData;\n' +
      '          } catch (err) {\n' +
      '            reject(AxiosError.from(err, null, config, response.request, response));\n' +
      '          }\n' +
      '          settle(resolve, reject, response);\n' +
      '        });\n' +
      '      }\n' +
      '    });\n' +
      '\n' +
      '    // Handle errors\n' +
      "    req.on('error', function handleRequestError(err) {\n" +
      '      // @todo remove\n' +
      '      // if (req.aborted && err.code !== AxiosError.ERR_FR_TOO_MANY_REDIRECTS) return;\n' +
      '      reject(AxiosError.from(err, null, config, req));\n' +
      '    });\n' +
      '\n' +
      ' '... 2346 more characters,
    transformRequest: [
      '[function] function transformRequest(data, headers) {\n' +
        "    normalizeHeaderName(headers, 'Accept');\n" +
        "    normalizeHeaderName(headers, 'Content-Type');\n" +
        '    if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {\n' +
        '      return data;\n' +
        '    }\n' +
        '    if (utils.isArrayBufferView(data)) {\n' +
        '      return data.buffer;\n' +
        '    }\n' +
        '    if (utils.isURLSearchParams(data)) {\n' +
        "      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');\n" +
        '      return data.toString();\n' +
        '    }\n' +
        '    var isObjectPayload = utils.isObject(data);\n' +
        "    var contentType = headers && headers['Content-Type'];\n" +
        '    var isFileList;\n' +
        "    if ((isFileList = utils.isFileList(data)) || isObjectPayload && contentType === 'multipart/form-data') {\n" +
        '      var _FormData = this.env && this.env.FormData;\n' +
        '      return toFormData(isFileList ? {\n' +
        "        'files[]': data\n" +
        '      } : data, _FormData && new _FormData());\n' +
        "    } else if (isObjectPayload || contentType === 'application/json') {\n" +
        "      setContentTypeIfUnset(headers, 'application/json');\n" +
        '      return stringifySafely(data);\n' +
        '    }\n' +
        '    return data;\n' +
        '  }'
    ],
    transformResponse: [
      '[function] function transformResponse(data) {\n' +
        '    var transitional = this.transitional || defaults.transitional;\n' +
        '    var silentJSONParsing = transitional && transitional.silentJSONParsing;\n' +
        '    var forcedJSONParsing = transitional && transitional.forcedJSONParsing;\n' +
        "    var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';\n" +
        '    if (strictJSONParsing || forcedJSONParsing && utils.isString(data) && data.length) {\n' +
        '      try {\n' +
        '        return JSON.parse(data);\n' +
        '      } catch (e) {\n' +
        '        if (strictJSONParsing) {\n' +
        "          if (e.name === 'SyntaxError') {\n" +
        '            throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);\n' +
        '          }\n' +
        '          throw e;\n' +
        '        }\n' +
        '      }\n' +
        '    }\n' +
        '    return data;\n' +
        '  }'
    ],
    timeout: 0,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
      FormData: '[function] function FormData(options) {\n' +
        '  if (!(this instanceof FormData)) {\n' +
        '    return new FormData(options);\n' +
        '  }\n' +
        '  this._overheadLength = 0;\n' +
        '  this._valueLength = 0;\n' +
        '  this._valuesToMeasure = [];\n' +
        '  CombinedStream.call(this);\n' +
        '  options = options || {};\n' +
        '  for (var option in options) {\n' +
        '    this[option] = options[option];\n' +
        '  }\n' +
        '}'
    },
    validateStatus: '[function] function validateStatus(status) {\n' +
      '    return status >= 200 && status < 300;\n' +
      '  }',
    headers: {
      Accept: 'application/json, text/plain, */*',
      Authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2MjM5NywiZXhwIjoxNjg5MTQ4Nzk3fQ.kIQ8BFgEbj1TIf2AlRDJj3LZudPo0Qhs_V_VHzdLl0s',
      'Content-Type': '',
      'User-Agent': 'axios/0.27.2'
    },
    url: 'https://connect-api.dev.insiteflow.io/v1/connect/container/config?organizationId=711729a8-a473-47bf-b27f-8abc1ee52281&containerType=desktop',
    method: 'get'
  },
  code: 'ERR_BAD_REQUEST',
  status: 401
}
[2023-07-11 13:30:28.124] [info]  In the catch 
[2023-07-11 13:30:28.125] [error] Unhandled Exception {
  message: 'Request failed with status code 401',
  name: 'UnhandledRejection AxiosError',
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: '[function] function httpAdapter(config) {\n' +
      '  return new Promise(function dispatchHttpRequest(resolvePromise, rejectPromise) {\n' +
      '    var onCanceled;\n' +
      '    function done() {\n' +
      '      if (config.cancelToken) {\n' +
      '        config.cancelToken.unsubscribe(onCanceled);\n' +
      '      }\n' +
      '      if (config.signal) {\n' +
      "        config.signal.removeEventListener('abort', onCanceled);\n" +
      '      }\n' +
      '    }\n' +
      '    var resolve = function resolve(value) {\n' +
      '      done();\n' +
      '      resolvePromise(value);\n' +
      '    };\n' +
      '    var rejected = false;\n' +
      '    var reject = function reject(value) {\n' +
      '      done();\n' +
      '      rejected = true;\n' +
      '      rejectPromise(value);\n' +
      '    };\n' +
      '    var data = config.data;\n' +
      '    var headers = config.headers;\n' +
      '    var headerNames = {};\n' +
      '    Object.keys(headers).forEach(function storeLowerName(name) {\n' +
      '      headerNames[name.toLowerCase()] = name;\n' +
      '    });\n' +
      '\n' +
      '    // Set User-Agent (required by some servers)\n' +
      '    // See https://github.com/axios/axios/issues/69\n' +
      "    if ('user-agent' in headerNames) {\n" +
      '      // User-Agent is specified; handle case where no UA header is desired\n' +
      "      if (!headers[headerNames['user-agent']]) {\n" +
      "        delete headers[headerNames['user-agent']];\n" +
      '      }\n' +
      '      // Otherwise, use specified value\n' +
      '    } else {\n' +
      "      // Only set header if it hasn't been set in config\n" +
      "      headers['User-Agent'] = 'axios/' + VERSION;\n" +
      '    }\n' +
      '\n' +
      '    // support for https://www.npmjs.com/package/form-data api\n' +
      '    if (utils.isFormData(data) && utils.isFunction(data.getHeaders)) {\n' +
      '      Object.assign(headers, data.getHeaders());\n' +
      '    } else if (data && !utils.isStream(data)) {\n' +
      '      if (Buffer.isBuffer(data)) {\n' +
      '        // Nothing to do...\n' +
      '      } else if (utils.isArrayBuffer(data)) {\n' +
      '        data = Buffer.from(new Uint8Array(data));\n' +
      '      } else if (utils.isString(data)) {\n' +
      "        data = Buffer.from(data, 'utf-8');\n" +
      '      } else {\n' +
      "        return reject(new AxiosError('Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream', AxiosError.ERR_BAD_REQUEST, config));\n" +
      '      }\n' +
      '      if (config.maxBodyLength > -1 && data.length > config.maxBodyLength) {\n' +
      "        return reject(new AxiosError('Request body larger than maxBodyLength limit', AxiosError.ERR_BAD_REQUEST, config));\n" +
      '      }\n' +
      '\n' +
      '      // Add Content-Length header if data exists\n' +
      "      if (!headerNames['content-length']) {\n" +
      "        headers['Content-Length'] = data.length;\n" +
      '      }\n' +
      '    }\n' +
      '\n' +
      '    // HTTP basic authentication\n' +
      '    var auth = undefined;\n' +
      '    if (config.auth) {\n' +
      "      var username = config.auth.username || '';\n" +
      "      var password = config.auth.password || '';\n" +
      "      auth = username + ':' + password;\n" +
      '    }\n' +
      '\n' +
      '    // Parse url\n' +
      '    var fullPath = buildFullPath(config.baseURL, config.url);\n' +
      '    var parsed = url.parse(fullPath);\n' +
      '    var protocol = parsed.protocol || supportedProtocols[0];\n' +
      '    if (supportedProtocols.indexOf(protocol) === -1) {\n' +
      "      return reject(new AxiosError('Unsupported protocol ' + protocol, AxiosError.ERR_BAD_REQUEST, config));\n" +
      '    }\n' +
      '    if (!auth && parsed.auth) {\n' +
      "      var urlAuth = parsed.auth.split(':');\n" +
      "      var urlUsername = urlAuth[0] || '';\n" +
      "      var urlPassword = urlAuth[1] || '';\n" +
      "      auth = urlUsername + ':' + urlPassword;\n" +
      '    }\n' +
      '    if (auth && headerNames.authorization) {\n' +
      '      delete headers[headerNames.authorization];\n' +
      '    }\n' +
      '    var isHttpsRequest = isHttps.test(protocol);\n' +
      '    var agent = isHttpsRequest ? config.httpsAgent : config.httpAgent;\n' +
      '    try {\n' +
      "      buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\\?/, '');\n" +
      '    } catch (err) {\n' +
      '      var customErr = new Error(err.message);\n' +
      '      customErr.config = config;\n' +
      '      customErr.url = config.url;\n' +
      '      customErr.exists = true;\n' +
      '      reject(customErr);\n' +
      '    }\n' +
      '    var options = {\n' +
      "      path: buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\\?/, ''),\n" +
      '      method: config.method.toUpperCase(),\n' +
      '      headers: headers,\n' +
      '      agent: agent,\n' +
      '      agents: {\n' +
      '        http: config.httpAgent,\n' +
      '        https: config.httpsAgent\n' +
      '      },\n' +
      '      auth: auth\n' +
      '    };\n' +
      '    if (config.socketPath) {\n' +
      '      options.socketPath = config.socketPath;\n' +
      '    } else {\n' +
      '      options.hostname = parsed.hostname;\n' +
      '      options.port = parsed.port;\n' +
      '    }\n' +
      '    var proxy = config.proxy;\n' +
      '    if (!proxy && proxy !== false) {\n' +
      "      var proxyEnv = protocol.slice(0, -1) + '_proxy';\n" +
      '      var proxyUrl = process.env[proxyEnv] || process.env[proxyEnv.toUpperCase()];\n' +
      '      if (proxyUrl) {\n' +
      '        var parsedProxyUrl = url.parse(proxyUrl);\n' +
      '        var noProxyEnv = process.env.no_proxy || process.env.NO_PROXY;\n' +
      '        var shouldProxy = true;\n' +
      '        if (noProxyEnv) {\n' +
      "          var noProxy = noProxyEnv.split(',').map(function trim(s) {\n" +
      '            return s.trim();\n' +
      '          });\n' +
      '          shouldProxy = !noProxy.some(function proxyMatch(proxyElement) {\n' +
      '            if (!proxyElement) {\n' +
      '              return false;\n' +
      '            }\n' +
      "            if (proxyElement === '*') {\n" +
      '              return true;\n' +
      '            }\n' +
      "            if (proxyElement[0] === '.' && parsed.hostname.substr(parsed.hostname.length - proxyElement.length) === proxyElement) {\n" +
      '              return true;\n' +
      '            }\n' +
      '            return parsed.hostname === proxyElement;\n' +
      '          });\n' +
      '        }\n' +
      '        if (shouldProxy) {\n' +
      '          proxy = {\n' +
      '            host: parsedProxyUrl.hostname,\n' +
      '            port: parsedProxyUrl.port,\n' +
      '            protocol: parsedProxyUrl.protocol\n' +
      '          };\n' +
      '          if (parsedProxyUrl.auth) {\n' +
      "            var proxyUrlAuth = parsedProxyUrl.auth.split(':');\n" +
      '            proxy.auth = {\n' +
      '              username: proxyUrlAuth[0],\n' +
      '              password: proxyUrlAuth[1]\n' +
      '            };\n' +
      '          }\n' +
      '        }\n' +
      '      }\n' +
      '    }\n' +
      '    if (proxy) {\n' +
      "      options.headers.host = parsed.hostname + (parsed.port ? ':' + parsed.port : '');\n" +
      "      setProxy(options, proxy, protocol + '//' + parsed.hostname + (parsed.port ? ':' + parsed.port : '') + options.path);\n" +
      '    }\n' +
      '    var transport;\n' +
      '    var isHttpsProxy = isHttpsRequest && (proxy ? isHttps.test(proxy.protocol) : true);\n' +
      '    if (config.transport) {\n' +
      '      transport = config.transport;\n' +
      '    } else if (config.maxRedirects === 0) {\n' +
      '      transport = isHttpsProxy ? https : http;\n' +
      '    } else {\n' +
      '      if (config.maxRedirects) {\n' +
      '        options.maxRedirects = config.maxRedirects;\n' +
      '      }\n' +
      '      if (config.beforeRedirect) {\n' +
      '        options.beforeRedirect = config.beforeRedirect;\n' +
      '      }\n' +
      '      transport = isHttpsProxy ? httpsFollow : httpFollow;\n' +
      '    }\n' +
      '    if (config.maxBodyLength > -1) {\n' +
      '      options.maxBodyLength = config.maxBodyLength;\n' +
      '    }\n' +
      '    if (config.insecureHTTPParser) {\n' +
      '      options.insecureHTTPParser = config.insecureHTTPParser;\n' +
      '    }\n' +
      '\n' +
      '    // Create the request\n' +
      '    var req = transport.request(options, function handleResponse(res) {\n' +
      '      if (req.aborted) return;\n' +
      '\n' +
      '      // uncompress the response body transparently if required\n' +
      '      var stream = res;\n' +
      '\n' +
      '      // return the last request in case of redirects\n' +
      '      var lastRequest = res.req || req;\n' +
      '\n' +
      '      // if no content, is HEAD request or decompress disabled we should not decompress\n' +
      "      if (res.statusCode !== 204 && lastRequest.method !== 'HEAD' && config.decompress !== false) {\n" +
      "        switch (res.headers['content-encoding']) {\n" +
      '          /*eslint default-case:0*/\n' +
      "          case 'gzip':\n" +
      "          case 'compress':\n" +
      "          case 'deflate':\n" +
      '            // add the unzipper to the body stream processing pipeline\n' +
      '            stream = stream.pipe(zlib.createUnzip());\n' +
      '\n' +
      '            // remove the content-encoding in order to not confuse downstream operations\n' +
      "            delete res.headers['content-encoding'];\n" +
      '            break;\n' +
      '        }\n' +
      '      }\n' +
      '      var response = {\n' +
      '        status: res.statusCode,\n' +
      '        statusText: res.statusMessage,\n' +
      '        headers: res.headers,\n' +
      '        config: config,\n' +
      '        request: lastRequest\n' +
      '      };\n' +
      "      if (config.responseType === 'stream') {\n" +
      '        response.data = stream;\n' +
      '        settle(resolve, reject, response);\n' +
      '      } else {\n' +
      '        var responseBuffer = [];\n' +
      '        var totalResponseBytes = 0;\n' +
      "        stream.on('data', function handleStreamData(chunk) {\n" +
      '          responseBuffer.push(chunk);\n' +
      '          totalResponseBytes += chunk.length;\n' +
      '\n' +
      '          // make sure the content length is not over the maxContentLength if specified\n' +
      '          if (config.maxContentLength > -1 && totalResponseBytes > config.maxContentLength) {\n' +
      '            // stream.destoy() emit aborted event before calling reject() on Node.js v16\n' +
      '            rejected = true;\n' +
      '            stream.destroy();\n' +
      "            reject(new AxiosError('maxContentLength size of ' + config.maxContentLength + ' exceeded', AxiosError.ERR_BAD_RESPONSE, config, lastRequest));\n" +
      '          }\n' +
      '        });\n' +
      "        stream.on('aborted', function handlerStreamAborted() {\n" +
      '          if (rejected) {\n' +
      '            return;\n' +
      '          }\n' +
      '          stream.destroy();\n' +
      "          reject(new AxiosError('maxContentLength size of ' + config.maxContentLength + ' exceeded', AxiosError.ERR_BAD_RESPONSE, config, lastRequest));\n" +
      '        });\n' +
      "        stream.on('error', function handleStreamError(err) {\n" +
      '          if (req.aborted) return;\n' +
      '          reject(AxiosError.from(err, null, config, lastRequest));\n' +
      '        });\n' +
      "        stream.on('end', function handleStreamEnd() {\n" +
      '          try {\n' +
      '            var responseData = responseBuffer.length === 1 ? responseBuffer[0] : Buffer.concat(responseBuffer);\n' +
      "            if (config.responseType !== 'arraybuffer') {\n" +
      '              responseData = responseData.toString(config.responseEncoding);\n' +
      "              if (!config.responseEncoding || config.responseEncoding === 'utf8') {\n" +
      '                responseData = utils.stripBOM(responseData);\n' +
      '              }\n' +
      '            }\n' +
      '            response.data = responseData;\n' +
      '          } catch (err) {\n' +
      '            reject(AxiosError.from(err, null, config, response.request, response));\n' +
      '          }\n' +
      '          settle(resolve, reject, response);\n' +
      '        });\n' +
      '      }\n' +
      '    });\n' +
      '\n' +
      '    // Handle errors\n' +
      "    req.on('error', function handleRequestError(err) {\n" +
      '      // @todo remove\n' +
      '      // if (req.aborted && err.code !== AxiosError.ERR_FR_TOO_MANY_REDIRECTS) return;\n' +
      '      reject(AxiosError.from(err, null, config, req));\n' +
      '    });\n' +
      '\n' +
      ' '... 2346 more characters,
    transformRequest: [
      '[function] function transformRequest(data, headers) {\n' +
        "    normalizeHeaderName(headers, 'Accept');\n" +
        "    normalizeHeaderName(headers, 'Content-Type');\n" +
        '    if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {\n' +
        '      return data;\n' +
        '    }\n' +
        '    if (utils.isArrayBufferView(data)) {\n' +
        '      return data.buffer;\n' +
        '    }\n' +
        '    if (utils.isURLSearchParams(data)) {\n' +
        "      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');\n" +
        '      return data.toString();\n' +
        '    }\n' +
        '    var isObjectPayload = utils.isObject(data);\n' +
        "    var contentType = headers && headers['Content-Type'];\n" +
        '    var isFileList;\n' +
        "    if ((isFileList = utils.isFileList(data)) || isObjectPayload && contentType === 'multipart/form-data') {\n" +
        '      var _FormData = this.env && this.env.FormData;\n' +
        '      return toFormData(isFileList ? {\n' +
        "        'files[]': data\n" +
        '      } : data, _FormData && new _FormData());\n' +
        "    } else if (isObjectPayload || contentType === 'application/json') {\n" +
        "      setContentTypeIfUnset(headers, 'application/json');\n" +
        '      return stringifySafely(data);\n' +
        '    }\n' +
        '    return data;\n' +
        '  }'
    ],
    transformResponse: [
      '[function] function transformResponse(data) {\n' +
        '    var transitional = this.transitional || defaults.transitional;\n' +
        '    var silentJSONParsing = transitional && transitional.silentJSONParsing;\n' +
        '    var forcedJSONParsing = transitional && transitional.forcedJSONParsing;\n' +
        "    var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';\n" +
        '    if (strictJSONParsing || forcedJSONParsing && utils.isString(data) && data.length) {\n' +
        '      try {\n' +
        '        return JSON.parse(data);\n' +
        '      } catch (e) {\n' +
        '        if (strictJSONParsing) {\n' +
        "          if (e.name === 'SyntaxError') {\n" +
        '            throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);\n' +
        '          }\n' +
        '          throw e;\n' +
        '        }\n' +
        '      }\n' +
        '    }\n' +
        '    return data;\n' +
        '  }'
    ],
    timeout: 0,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
      FormData: '[function] function FormData(options) {\n' +
        '  if (!(this instanceof FormData)) {\n' +
        '    return new FormData(options);\n' +
        '  }\n' +
        '  this._overheadLength = 0;\n' +
        '  this._valueLength = 0;\n' +
        '  this._valuesToMeasure = [];\n' +
        '  CombinedStream.call(this);\n' +
        '  options = options || {};\n' +
        '  for (var option in options) {\n' +
        '    this[option] = options[option];\n' +
        '  }\n' +
        '}'
    },
    validateStatus: '[function] function validateStatus(status) {\n' +
      '    return status >= 200 && status < 300;\n' +
      '  }',
    headers: {
      Accept: 'application/json, text/plain, */*',
      Authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2MjM5NywiZXhwIjoxNjg5MTQ4Nzk3fQ.kIQ8BFgEbj1TIf2AlRDJj3LZudPo0Qhs_V_VHzdLl0s',
      'Content-Type': '',
      'User-Agent': 'axios/0.27.2'
    },
    url: 'https://connect-api.dev.insiteflow.io/v1/connect/container/config?organizationId=711729a8-a473-47bf-b27f-8abc1ee52281&containerType=desktop',
    method: 'get'
  },
  code: 'ERR_BAD_REQUEST',
  status: 401
}
[2023-07-11 13:31:00.113] [info]  Started /home/lnv-75/Documents/insiteFlow/desktop-app-container/test/out AES-128
[2023-07-11 13:31:01.304] [info]  In the catch  undefined
[2023-07-11 13:31:01.305] [error] Unhandled Exception {
  message: 'Request failed with status code 401',
  name: 'UnhandledRejection AxiosError',
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: '[function] function httpAdapter(config) {\n' +
      '  return new Promise(function dispatchHttpRequest(resolvePromise, rejectPromise) {\n' +
      '    var onCanceled;\n' +
      '    function done() {\n' +
      '      if (config.cancelToken) {\n' +
      '        config.cancelToken.unsubscribe(onCanceled);\n' +
      '      }\n' +
      '      if (config.signal) {\n' +
      "        config.signal.removeEventListener('abort', onCanceled);\n" +
      '      }\n' +
      '    }\n' +
      '    var resolve = function resolve(value) {\n' +
      '      done();\n' +
      '      resolvePromise(value);\n' +
      '    };\n' +
      '    var rejected = false;\n' +
      '    var reject = function reject(value) {\n' +
      '      done();\n' +
      '      rejected = true;\n' +
      '      rejectPromise(value);\n' +
      '    };\n' +
      '    var data = config.data;\n' +
      '    var headers = config.headers;\n' +
      '    var headerNames = {};\n' +
      '    Object.keys(headers).forEach(function storeLowerName(name) {\n' +
      '      headerNames[name.toLowerCase()] = name;\n' +
      '    });\n' +
      '\n' +
      '    // Set User-Agent (required by some servers)\n' +
      '    // See https://github.com/axios/axios/issues/69\n' +
      "    if ('user-agent' in headerNames) {\n" +
      '      // User-Agent is specified; handle case where no UA header is desired\n' +
      "      if (!headers[headerNames['user-agent']]) {\n" +
      "        delete headers[headerNames['user-agent']];\n" +
      '      }\n' +
      '      // Otherwise, use specified value\n' +
      '    } else {\n' +
      "      // Only set header if it hasn't been set in config\n" +
      "      headers['User-Agent'] = 'axios/' + VERSION;\n" +
      '    }\n' +
      '\n' +
      '    // support for https://www.npmjs.com/package/form-data api\n' +
      '    if (utils.isFormData(data) && utils.isFunction(data.getHeaders)) {\n' +
      '      Object.assign(headers, data.getHeaders());\n' +
      '    } else if (data && !utils.isStream(data)) {\n' +
      '      if (Buffer.isBuffer(data)) {\n' +
      '        // Nothing to do...\n' +
      '      } else if (utils.isArrayBuffer(data)) {\n' +
      '        data = Buffer.from(new Uint8Array(data));\n' +
      '      } else if (utils.isString(data)) {\n' +
      "        data = Buffer.from(data, 'utf-8');\n" +
      '      } else {\n' +
      "        return reject(new AxiosError('Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream', AxiosError.ERR_BAD_REQUEST, config));\n" +
      '      }\n' +
      '      if (config.maxBodyLength > -1 && data.length > config.maxBodyLength) {\n' +
      "        return reject(new AxiosError('Request body larger than maxBodyLength limit', AxiosError.ERR_BAD_REQUEST, config));\n" +
      '      }\n' +
      '\n' +
      '      // Add Content-Length header if data exists\n' +
      "      if (!headerNames['content-length']) {\n" +
      "        headers['Content-Length'] = data.length;\n" +
      '      }\n' +
      '    }\n' +
      '\n' +
      '    // HTTP basic authentication\n' +
      '    var auth = undefined;\n' +
      '    if (config.auth) {\n' +
      "      var username = config.auth.username || '';\n" +
      "      var password = config.auth.password || '';\n" +
      "      auth = username + ':' + password;\n" +
      '    }\n' +
      '\n' +
      '    // Parse url\n' +
      '    var fullPath = buildFullPath(config.baseURL, config.url);\n' +
      '    var parsed = url.parse(fullPath);\n' +
      '    var protocol = parsed.protocol || supportedProtocols[0];\n' +
      '    if (supportedProtocols.indexOf(protocol) === -1) {\n' +
      "      return reject(new AxiosError('Unsupported protocol ' + protocol, AxiosError.ERR_BAD_REQUEST, config));\n" +
      '    }\n' +
      '    if (!auth && parsed.auth) {\n' +
      "      var urlAuth = parsed.auth.split(':');\n" +
      "      var urlUsername = urlAuth[0] || '';\n" +
      "      var urlPassword = urlAuth[1] || '';\n" +
      "      auth = urlUsername + ':' + urlPassword;\n" +
      '    }\n' +
      '    if (auth && headerNames.authorization) {\n' +
      '      delete headers[headerNames.authorization];\n' +
      '    }\n' +
      '    var isHttpsRequest = isHttps.test(protocol);\n' +
      '    var agent = isHttpsRequest ? config.httpsAgent : config.httpAgent;\n' +
      '    try {\n' +
      "      buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\\?/, '');\n" +
      '    } catch (err) {\n' +
      '      var customErr = new Error(err.message);\n' +
      '      customErr.config = config;\n' +
      '      customErr.url = config.url;\n' +
      '      customErr.exists = true;\n' +
      '      reject(customErr);\n' +
      '    }\n' +
      '    var options = {\n' +
      "      path: buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\\?/, ''),\n" +
      '      method: config.method.toUpperCase(),\n' +
      '      headers: headers,\n' +
      '      agent: agent,\n' +
      '      agents: {\n' +
      '        http: config.httpAgent,\n' +
      '        https: config.httpsAgent\n' +
      '      },\n' +
      '      auth: auth\n' +
      '    };\n' +
      '    if (config.socketPath) {\n' +
      '      options.socketPath = config.socketPath;\n' +
      '    } else {\n' +
      '      options.hostname = parsed.hostname;\n' +
      '      options.port = parsed.port;\n' +
      '    }\n' +
      '    var proxy = config.proxy;\n' +
      '    if (!proxy && proxy !== false) {\n' +
      "      var proxyEnv = protocol.slice(0, -1) + '_proxy';\n" +
      '      var proxyUrl = process.env[proxyEnv] || process.env[proxyEnv.toUpperCase()];\n' +
      '      if (proxyUrl) {\n' +
      '        var parsedProxyUrl = url.parse(proxyUrl);\n' +
      '        var noProxyEnv = process.env.no_proxy || process.env.NO_PROXY;\n' +
      '        var shouldProxy = true;\n' +
      '        if (noProxyEnv) {\n' +
      "          var noProxy = noProxyEnv.split(',').map(function trim(s) {\n" +
      '            return s.trim();\n' +
      '          });\n' +
      '          shouldProxy = !noProxy.some(function proxyMatch(proxyElement) {\n' +
      '            if (!proxyElement) {\n' +
      '              return false;\n' +
      '            }\n' +
      "            if (proxyElement === '*') {\n" +
      '              return true;\n' +
      '            }\n' +
      "            if (proxyElement[0] === '.' && parsed.hostname.substr(parsed.hostname.length - proxyElement.length) === proxyElement) {\n" +
      '              return true;\n' +
      '            }\n' +
      '            return parsed.hostname === proxyElement;\n' +
      '          });\n' +
      '        }\n' +
      '        if (shouldProxy) {\n' +
      '          proxy = {\n' +
      '            host: parsedProxyUrl.hostname,\n' +
      '            port: parsedProxyUrl.port,\n' +
      '            protocol: parsedProxyUrl.protocol\n' +
      '          };\n' +
      '          if (parsedProxyUrl.auth) {\n' +
      "            var proxyUrlAuth = parsedProxyUrl.auth.split(':');\n" +
      '            proxy.auth = {\n' +
      '              username: proxyUrlAuth[0],\n' +
      '              password: proxyUrlAuth[1]\n' +
      '            };\n' +
      '          }\n' +
      '        }\n' +
      '      }\n' +
      '    }\n' +
      '    if (proxy) {\n' +
      "      options.headers.host = parsed.hostname + (parsed.port ? ':' + parsed.port : '');\n" +
      "      setProxy(options, proxy, protocol + '//' + parsed.hostname + (parsed.port ? ':' + parsed.port : '') + options.path);\n" +
      '    }\n' +
      '    var transport;\n' +
      '    var isHttpsProxy = isHttpsRequest && (proxy ? isHttps.test(proxy.protocol) : true);\n' +
      '    if (config.transport) {\n' +
      '      transport = config.transport;\n' +
      '    } else if (config.maxRedirects === 0) {\n' +
      '      transport = isHttpsProxy ? https : http;\n' +
      '    } else {\n' +
      '      if (config.maxRedirects) {\n' +
      '        options.maxRedirects = config.maxRedirects;\n' +
      '      }\n' +
      '      if (config.beforeRedirect) {\n' +
      '        options.beforeRedirect = config.beforeRedirect;\n' +
      '      }\n' +
      '      transport = isHttpsProxy ? httpsFollow : httpFollow;\n' +
      '    }\n' +
      '    if (config.maxBodyLength > -1) {\n' +
      '      options.maxBodyLength = config.maxBodyLength;\n' +
      '    }\n' +
      '    if (config.insecureHTTPParser) {\n' +
      '      options.insecureHTTPParser = config.insecureHTTPParser;\n' +
      '    }\n' +
      '\n' +
      '    // Create the request\n' +
      '    var req = transport.request(options, function handleResponse(res) {\n' +
      '      if (req.aborted) return;\n' +
      '\n' +
      '      // uncompress the response body transparently if required\n' +
      '      var stream = res;\n' +
      '\n' +
      '      // return the last request in case of redirects\n' +
      '      var lastRequest = res.req || req;\n' +
      '\n' +
      '      // if no content, is HEAD request or decompress disabled we should not decompress\n' +
      "      if (res.statusCode !== 204 && lastRequest.method !== 'HEAD' && config.decompress !== false) {\n" +
      "        switch (res.headers['content-encoding']) {\n" +
      '          /*eslint default-case:0*/\n' +
      "          case 'gzip':\n" +
      "          case 'compress':\n" +
      "          case 'deflate':\n" +
      '            // add the unzipper to the body stream processing pipeline\n' +
      '            stream = stream.pipe(zlib.createUnzip());\n' +
      '\n' +
      '            // remove the content-encoding in order to not confuse downstream operations\n' +
      "            delete res.headers['content-encoding'];\n" +
      '            break;\n' +
      '        }\n' +
      '      }\n' +
      '      var response = {\n' +
      '        status: res.statusCode,\n' +
      '        statusText: res.statusMessage,\n' +
      '        headers: res.headers,\n' +
      '        config: config,\n' +
      '        request: lastRequest\n' +
      '      };\n' +
      "      if (config.responseType === 'stream') {\n" +
      '        response.data = stream;\n' +
      '        settle(resolve, reject, response);\n' +
      '      } else {\n' +
      '        var responseBuffer = [];\n' +
      '        var totalResponseBytes = 0;\n' +
      "        stream.on('data', function handleStreamData(chunk) {\n" +
      '          responseBuffer.push(chunk);\n' +
      '          totalResponseBytes += chunk.length;\n' +
      '\n' +
      '          // make sure the content length is not over the maxContentLength if specified\n' +
      '          if (config.maxContentLength > -1 && totalResponseBytes > config.maxContentLength) {\n' +
      '            // stream.destoy() emit aborted event before calling reject() on Node.js v16\n' +
      '            rejected = true;\n' +
      '            stream.destroy();\n' +
      "            reject(new AxiosError('maxContentLength size of ' + config.maxContentLength + ' exceeded', AxiosError.ERR_BAD_RESPONSE, config, lastRequest));\n" +
      '          }\n' +
      '        });\n' +
      "        stream.on('aborted', function handlerStreamAborted() {\n" +
      '          if (rejected) {\n' +
      '            return;\n' +
      '          }\n' +
      '          stream.destroy();\n' +
      "          reject(new AxiosError('maxContentLength size of ' + config.maxContentLength + ' exceeded', AxiosError.ERR_BAD_RESPONSE, config, lastRequest));\n" +
      '        });\n' +
      "        stream.on('error', function handleStreamError(err) {\n" +
      '          if (req.aborted) return;\n' +
      '          reject(AxiosError.from(err, null, config, lastRequest));\n' +
      '        });\n' +
      "        stream.on('end', function handleStreamEnd() {\n" +
      '          try {\n' +
      '            var responseData = responseBuffer.length === 1 ? responseBuffer[0] : Buffer.concat(responseBuffer);\n' +
      "            if (config.responseType !== 'arraybuffer') {\n" +
      '              responseData = responseData.toString(config.responseEncoding);\n' +
      "              if (!config.responseEncoding || config.responseEncoding === 'utf8') {\n" +
      '                responseData = utils.stripBOM(responseData);\n' +
      '              }\n' +
      '            }\n' +
      '            response.data = responseData;\n' +
      '          } catch (err) {\n' +
      '            reject(AxiosError.from(err, null, config, response.request, response));\n' +
      '          }\n' +
      '          settle(resolve, reject, response);\n' +
      '        });\n' +
      '      }\n' +
      '    });\n' +
      '\n' +
      '    // Handle errors\n' +
      "    req.on('error', function handleRequestError(err) {\n" +
      '      // @todo remove\n' +
      '      // if (req.aborted && err.code !== AxiosError.ERR_FR_TOO_MANY_REDIRECTS) return;\n' +
      '      reject(AxiosError.from(err, null, config, req));\n' +
      '    });\n' +
      '\n' +
      ' '... 2346 more characters,
    transformRequest: [
      '[function] function transformRequest(data, headers) {\n' +
        "    normalizeHeaderName(headers, 'Accept');\n" +
        "    normalizeHeaderName(headers, 'Content-Type');\n" +
        '    if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {\n' +
        '      return data;\n' +
        '    }\n' +
        '    if (utils.isArrayBufferView(data)) {\n' +
        '      return data.buffer;\n' +
        '    }\n' +
        '    if (utils.isURLSearchParams(data)) {\n' +
        "      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');\n" +
        '      return data.toString();\n' +
        '    }\n' +
        '    var isObjectPayload = utils.isObject(data);\n' +
        "    var contentType = headers && headers['Content-Type'];\n" +
        '    var isFileList;\n' +
        "    if ((isFileList = utils.isFileList(data)) || isObjectPayload && contentType === 'multipart/form-data') {\n" +
        '      var _FormData = this.env && this.env.FormData;\n' +
        '      return toFormData(isFileList ? {\n' +
        "        'files[]': data\n" +
        '      } : data, _FormData && new _FormData());\n' +
        "    } else if (isObjectPayload || contentType === 'application/json') {\n" +
        "      setContentTypeIfUnset(headers, 'application/json');\n" +
        '      return stringifySafely(data);\n' +
        '    }\n' +
        '    return data;\n' +
        '  }'
    ],
    transformResponse: [
      '[function] function transformResponse(data) {\n' +
        '    var transitional = this.transitional || defaults.transitional;\n' +
        '    var silentJSONParsing = transitional && transitional.silentJSONParsing;\n' +
        '    var forcedJSONParsing = transitional && transitional.forcedJSONParsing;\n' +
        "    var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';\n" +
        '    if (strictJSONParsing || forcedJSONParsing && utils.isString(data) && data.length) {\n' +
        '      try {\n' +
        '        return JSON.parse(data);\n' +
        '      } catch (e) {\n' +
        '        if (strictJSONParsing) {\n' +
        "          if (e.name === 'SyntaxError') {\n" +
        '            throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);\n' +
        '          }\n' +
        '          throw e;\n' +
        '        }\n' +
        '      }\n' +
        '    }\n' +
        '    return data;\n' +
        '  }'
    ],
    timeout: 0,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
      FormData: '[function] function FormData(options) {\n' +
        '  if (!(this instanceof FormData)) {\n' +
        '    return new FormData(options);\n' +
        '  }\n' +
        '  this._overheadLength = 0;\n' +
        '  this._valueLength = 0;\n' +
        '  this._valuesToMeasure = [];\n' +
        '  CombinedStream.call(this);\n' +
        '  options = options || {};\n' +
        '  for (var option in options) {\n' +
        '    this[option] = options[option];\n' +
        '  }\n' +
        '}'
    },
    validateStatus: '[function] function validateStatus(status) {\n' +
      '    return status >= 200 && status < 300;\n' +
      '  }',
    headers: {
      Accept: 'application/json, text/plain, */*',
      Authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2MjQ1OSwiZXhwIjoxNjg5MTQ4ODU5fQ.dYlyGYgIl6bI4dTrsoT4_n_6nqUrclfqQi70C3SwhpU',
      'Content-Type': '',
      'User-Agent': 'axios/0.27.2'
    },
    url: 'https://connect-api.dev.insiteflow.io/v1/connect/container/config?organizationId=711729a8-a473-47bf-b27f-8abc1ee52281&containerType=desktop',
    method: 'get'
  },
  code: 'ERR_BAD_REQUEST',
  status: 401
}
[2023-07-11 13:31:06.012] [info]  In the catch  undefined
[2023-07-11 13:31:06.013] [error] Unhandled Exception {
  message: 'Request failed with status code 401',
  name: 'UnhandledRejection AxiosError',
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: '[function] function httpAdapter(config) {\n' +
      '  return new Promise(function dispatchHttpRequest(resolvePromise, rejectPromise) {\n' +
      '    var onCanceled;\n' +
      '    function done() {\n' +
      '      if (config.cancelToken) {\n' +
      '        config.cancelToken.unsubscribe(onCanceled);\n' +
      '      }\n' +
      '      if (config.signal) {\n' +
      "        config.signal.removeEventListener('abort', onCanceled);\n" +
      '      }\n' +
      '    }\n' +
      '    var resolve = function resolve(value) {\n' +
      '      done();\n' +
      '      resolvePromise(value);\n' +
      '    };\n' +
      '    var rejected = false;\n' +
      '    var reject = function reject(value) {\n' +
      '      done();\n' +
      '      rejected = true;\n' +
      '      rejectPromise(value);\n' +
      '    };\n' +
      '    var data = config.data;\n' +
      '    var headers = config.headers;\n' +
      '    var headerNames = {};\n' +
      '    Object.keys(headers).forEach(function storeLowerName(name) {\n' +
      '      headerNames[name.toLowerCase()] = name;\n' +
      '    });\n' +
      '\n' +
      '    // Set User-Agent (required by some servers)\n' +
      '    // See https://github.com/axios/axios/issues/69\n' +
      "    if ('user-agent' in headerNames) {\n" +
      '      // User-Agent is specified; handle case where no UA header is desired\n' +
      "      if (!headers[headerNames['user-agent']]) {\n" +
      "        delete headers[headerNames['user-agent']];\n" +
      '      }\n' +
      '      // Otherwise, use specified value\n' +
      '    } else {\n' +
      "      // Only set header if it hasn't been set in config\n" +
      "      headers['User-Agent'] = 'axios/' + VERSION;\n" +
      '    }\n' +
      '\n' +
      '    // support for https://www.npmjs.com/package/form-data api\n' +
      '    if (utils.isFormData(data) && utils.isFunction(data.getHeaders)) {\n' +
      '      Object.assign(headers, data.getHeaders());\n' +
      '    } else if (data && !utils.isStream(data)) {\n' +
      '      if (Buffer.isBuffer(data)) {\n' +
      '        // Nothing to do...\n' +
      '      } else if (utils.isArrayBuffer(data)) {\n' +
      '        data = Buffer.from(new Uint8Array(data));\n' +
      '      } else if (utils.isString(data)) {\n' +
      "        data = Buffer.from(data, 'utf-8');\n" +
      '      } else {\n' +
      "        return reject(new AxiosError('Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream', AxiosError.ERR_BAD_REQUEST, config));\n" +
      '      }\n' +
      '      if (config.maxBodyLength > -1 && data.length > config.maxBodyLength) {\n' +
      "        return reject(new AxiosError('Request body larger than maxBodyLength limit', AxiosError.ERR_BAD_REQUEST, config));\n" +
      '      }\n' +
      '\n' +
      '      // Add Content-Length header if data exists\n' +
      "      if (!headerNames['content-length']) {\n" +
      "        headers['Content-Length'] = data.length;\n" +
      '      }\n' +
      '    }\n' +
      '\n' +
      '    // HTTP basic authentication\n' +
      '    var auth = undefined;\n' +
      '    if (config.auth) {\n' +
      "      var username = config.auth.username || '';\n" +
      "      var password = config.auth.password || '';\n" +
      "      auth = username + ':' + password;\n" +
      '    }\n' +
      '\n' +
      '    // Parse url\n' +
      '    var fullPath = buildFullPath(config.baseURL, config.url);\n' +
      '    var parsed = url.parse(fullPath);\n' +
      '    var protocol = parsed.protocol || supportedProtocols[0];\n' +
      '    if (supportedProtocols.indexOf(protocol) === -1) {\n' +
      "      return reject(new AxiosError('Unsupported protocol ' + protocol, AxiosError.ERR_BAD_REQUEST, config));\n" +
      '    }\n' +
      '    if (!auth && parsed.auth) {\n' +
      "      var urlAuth = parsed.auth.split(':');\n" +
      "      var urlUsername = urlAuth[0] || '';\n" +
      "      var urlPassword = urlAuth[1] || '';\n" +
      "      auth = urlUsername + ':' + urlPassword;\n" +
      '    }\n' +
      '    if (auth && headerNames.authorization) {\n' +
      '      delete headers[headerNames.authorization];\n' +
      '    }\n' +
      '    var isHttpsRequest = isHttps.test(protocol);\n' +
      '    var agent = isHttpsRequest ? config.httpsAgent : config.httpAgent;\n' +
      '    try {\n' +
      "      buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\\?/, '');\n" +
      '    } catch (err) {\n' +
      '      var customErr = new Error(err.message);\n' +
      '      customErr.config = config;\n' +
      '      customErr.url = config.url;\n' +
      '      customErr.exists = true;\n' +
      '      reject(customErr);\n' +
      '    }\n' +
      '    var options = {\n' +
      "      path: buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\\?/, ''),\n" +
      '      method: config.method.toUpperCase(),\n' +
      '      headers: headers,\n' +
      '      agent: agent,\n' +
      '      agents: {\n' +
      '        http: config.httpAgent,\n' +
      '        https: config.httpsAgent\n' +
      '      },\n' +
      '      auth: auth\n' +
      '    };\n' +
      '    if (config.socketPath) {\n' +
      '      options.socketPath = config.socketPath;\n' +
      '    } else {\n' +
      '      options.hostname = parsed.hostname;\n' +
      '      options.port = parsed.port;\n' +
      '    }\n' +
      '    var proxy = config.proxy;\n' +
      '    if (!proxy && proxy !== false) {\n' +
      "      var proxyEnv = protocol.slice(0, -1) + '_proxy';\n" +
      '      var proxyUrl = process.env[proxyEnv] || process.env[proxyEnv.toUpperCase()];\n' +
      '      if (proxyUrl) {\n' +
      '        var parsedProxyUrl = url.parse(proxyUrl);\n' +
      '        var noProxyEnv = process.env.no_proxy || process.env.NO_PROXY;\n' +
      '        var shouldProxy = true;\n' +
      '        if (noProxyEnv) {\n' +
      "          var noProxy = noProxyEnv.split(',').map(function trim(s) {\n" +
      '            return s.trim();\n' +
      '          });\n' +
      '          shouldProxy = !noProxy.some(function proxyMatch(proxyElement) {\n' +
      '            if (!proxyElement) {\n' +
      '              return false;\n' +
      '            }\n' +
      "            if (proxyElement === '*') {\n" +
      '              return true;\n' +
      '            }\n' +
      "            if (proxyElement[0] === '.' && parsed.hostname.substr(parsed.hostname.length - proxyElement.length) === proxyElement) {\n" +
      '              return true;\n' +
      '            }\n' +
      '            return parsed.hostname === proxyElement;\n' +
      '          });\n' +
      '        }\n' +
      '        if (shouldProxy) {\n' +
      '          proxy = {\n' +
      '            host: parsedProxyUrl.hostname,\n' +
      '            port: parsedProxyUrl.port,\n' +
      '            protocol: parsedProxyUrl.protocol\n' +
      '          };\n' +
      '          if (parsedProxyUrl.auth) {\n' +
      "            var proxyUrlAuth = parsedProxyUrl.auth.split(':');\n" +
      '            proxy.auth = {\n' +
      '              username: proxyUrlAuth[0],\n' +
      '              password: proxyUrlAuth[1]\n' +
      '            };\n' +
      '          }\n' +
      '        }\n' +
      '      }\n' +
      '    }\n' +
      '    if (proxy) {\n' +
      "      options.headers.host = parsed.hostname + (parsed.port ? ':' + parsed.port : '');\n" +
      "      setProxy(options, proxy, protocol + '//' + parsed.hostname + (parsed.port ? ':' + parsed.port : '') + options.path);\n" +
      '    }\n' +
      '    var transport;\n' +
      '    var isHttpsProxy = isHttpsRequest && (proxy ? isHttps.test(proxy.protocol) : true);\n' +
      '    if (config.transport) {\n' +
      '      transport = config.transport;\n' +
      '    } else if (config.maxRedirects === 0) {\n' +
      '      transport = isHttpsProxy ? https : http;\n' +
      '    } else {\n' +
      '      if (config.maxRedirects) {\n' +
      '        options.maxRedirects = config.maxRedirects;\n' +
      '      }\n' +
      '      if (config.beforeRedirect) {\n' +
      '        options.beforeRedirect = config.beforeRedirect;\n' +
      '      }\n' +
      '      transport = isHttpsProxy ? httpsFollow : httpFollow;\n' +
      '    }\n' +
      '    if (config.maxBodyLength > -1) {\n' +
      '      options.maxBodyLength = config.maxBodyLength;\n' +
      '    }\n' +
      '    if (config.insecureHTTPParser) {\n' +
      '      options.insecureHTTPParser = config.insecureHTTPParser;\n' +
      '    }\n' +
      '\n' +
      '    // Create the request\n' +
      '    var req = transport.request(options, function handleResponse(res) {\n' +
      '      if (req.aborted) return;\n' +
      '\n' +
      '      // uncompress the response body transparently if required\n' +
      '      var stream = res;\n' +
      '\n' +
      '      // return the last request in case of redirects\n' +
      '      var lastRequest = res.req || req;\n' +
      '\n' +
      '      // if no content, is HEAD request or decompress disabled we should not decompress\n' +
      "      if (res.statusCode !== 204 && lastRequest.method !== 'HEAD' && config.decompress !== false) {\n" +
      "        switch (res.headers['content-encoding']) {\n" +
      '          /*eslint default-case:0*/\n' +
      "          case 'gzip':\n" +
      "          case 'compress':\n" +
      "          case 'deflate':\n" +
      '            // add the unzipper to the body stream processing pipeline\n' +
      '            stream = stream.pipe(zlib.createUnzip());\n' +
      '\n' +
      '            // remove the content-encoding in order to not confuse downstream operations\n' +
      "            delete res.headers['content-encoding'];\n" +
      '            break;\n' +
      '        }\n' +
      '      }\n' +
      '      var response = {\n' +
      '        status: res.statusCode,\n' +
      '        statusText: res.statusMessage,\n' +
      '        headers: res.headers,\n' +
      '        config: config,\n' +
      '        request: lastRequest\n' +
      '      };\n' +
      "      if (config.responseType === 'stream') {\n" +
      '        response.data = stream;\n' +
      '        settle(resolve, reject, response);\n' +
      '      } else {\n' +
      '        var responseBuffer = [];\n' +
      '        var totalResponseBytes = 0;\n' +
      "        stream.on('data', function handleStreamData(chunk) {\n" +
      '          responseBuffer.push(chunk);\n' +
      '          totalResponseBytes += chunk.length;\n' +
      '\n' +
      '          // make sure the content length is not over the maxContentLength if specified\n' +
      '          if (config.maxContentLength > -1 && totalResponseBytes > config.maxContentLength) {\n' +
      '            // stream.destoy() emit aborted event before calling reject() on Node.js v16\n' +
      '            rejected = true;\n' +
      '            stream.destroy();\n' +
      "            reject(new AxiosError('maxContentLength size of ' + config.maxContentLength + ' exceeded', AxiosError.ERR_BAD_RESPONSE, config, lastRequest));\n" +
      '          }\n' +
      '        });\n' +
      "        stream.on('aborted', function handlerStreamAborted() {\n" +
      '          if (rejected) {\n' +
      '            return;\n' +
      '          }\n' +
      '          stream.destroy();\n' +
      "          reject(new AxiosError('maxContentLength size of ' + config.maxContentLength + ' exceeded', AxiosError.ERR_BAD_RESPONSE, config, lastRequest));\n" +
      '        });\n' +
      "        stream.on('error', function handleStreamError(err) {\n" +
      '          if (req.aborted) return;\n' +
      '          reject(AxiosError.from(err, null, config, lastRequest));\n' +
      '        });\n' +
      "        stream.on('end', function handleStreamEnd() {\n" +
      '          try {\n' +
      '            var responseData = responseBuffer.length === 1 ? responseBuffer[0] : Buffer.concat(responseBuffer);\n' +
      "            if (config.responseType !== 'arraybuffer') {\n" +
      '              responseData = responseData.toString(config.responseEncoding);\n' +
      "              if (!config.responseEncoding || config.responseEncoding === 'utf8') {\n" +
      '                responseData = utils.stripBOM(responseData);\n' +
      '              }\n' +
      '            }\n' +
      '            response.data = responseData;\n' +
      '          } catch (err) {\n' +
      '            reject(AxiosError.from(err, null, config, response.request, response));\n' +
      '          }\n' +
      '          settle(resolve, reject, response);\n' +
      '        });\n' +
      '      }\n' +
      '    });\n' +
      '\n' +
      '    // Handle errors\n' +
      "    req.on('error', function handleRequestError(err) {\n" +
      '      // @todo remove\n' +
      '      // if (req.aborted && err.code !== AxiosError.ERR_FR_TOO_MANY_REDIRECTS) return;\n' +
      '      reject(AxiosError.from(err, null, config, req));\n' +
      '    });\n' +
      '\n' +
      ' '... 2346 more characters,
    transformRequest: [
      '[function] function transformRequest(data, headers) {\n' +
        "    normalizeHeaderName(headers, 'Accept');\n" +
        "    normalizeHeaderName(headers, 'Content-Type');\n" +
        '    if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {\n' +
        '      return data;\n' +
        '    }\n' +
        '    if (utils.isArrayBufferView(data)) {\n' +
        '      return data.buffer;\n' +
        '    }\n' +
        '    if (utils.isURLSearchParams(data)) {\n' +
        "      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');\n" +
        '      return data.toString();\n' +
        '    }\n' +
        '    var isObjectPayload = utils.isObject(data);\n' +
        "    var contentType = headers && headers['Content-Type'];\n" +
        '    var isFileList;\n' +
        "    if ((isFileList = utils.isFileList(data)) || isObjectPayload && contentType === 'multipart/form-data') {\n" +
        '      var _FormData = this.env && this.env.FormData;\n' +
        '      return toFormData(isFileList ? {\n' +
        "        'files[]': data\n" +
        '      } : data, _FormData && new _FormData());\n' +
        "    } else if (isObjectPayload || contentType === 'application/json') {\n" +
        "      setContentTypeIfUnset(headers, 'application/json');\n" +
        '      return stringifySafely(data);\n' +
        '    }\n' +
        '    return data;\n' +
        '  }'
    ],
    transformResponse: [
      '[function] function transformResponse(data) {\n' +
        '    var transitional = this.transitional || defaults.transitional;\n' +
        '    var silentJSONParsing = transitional && transitional.silentJSONParsing;\n' +
        '    var forcedJSONParsing = transitional && transitional.forcedJSONParsing;\n' +
        "    var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';\n" +
        '    if (strictJSONParsing || forcedJSONParsing && utils.isString(data) && data.length) {\n' +
        '      try {\n' +
        '        return JSON.parse(data);\n' +
        '      } catch (e) {\n' +
        '        if (strictJSONParsing) {\n' +
        "          if (e.name === 'SyntaxError') {\n" +
        '            throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);\n' +
        '          }\n' +
        '          throw e;\n' +
        '        }\n' +
        '      }\n' +
        '    }\n' +
        '    return data;\n' +
        '  }'
    ],
    timeout: 0,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
      FormData: '[function] function FormData(options) {\n' +
        '  if (!(this instanceof FormData)) {\n' +
        '    return new FormData(options);\n' +
        '  }\n' +
        '  this._overheadLength = 0;\n' +
        '  this._valueLength = 0;\n' +
        '  this._valuesToMeasure = [];\n' +
        '  CombinedStream.call(this);\n' +
        '  options = options || {};\n' +
        '  for (var option in options) {\n' +
        '    this[option] = options[option];\n' +
        '  }\n' +
        '}'
    },
    validateStatus: '[function] function validateStatus(status) {\n' +
      '    return status >= 200 && status < 300;\n' +
      '  }',
    headers: {
      Accept: 'application/json, text/plain, */*',
      Authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2MjQ1OSwiZXhwIjoxNjg5MTQ4ODU5fQ.dYlyGYgIl6bI4dTrsoT4_n_6nqUrclfqQi70C3SwhpU',
      'Content-Type': '',
      'User-Agent': 'axios/0.27.2'
    },
    url: 'https://connect-api.dev.insiteflow.io/v1/connect/container/config?organizationId=711729a8-a473-47bf-b27f-8abc1ee52281&containerType=desktop',
    method: 'get'
  },
  code: 'ERR_BAD_REQUEST',
  status: 401
}
[2023-07-11 13:31:11.131] [info]  In the catch  undefined
[2023-07-11 13:31:11.131] [error] Unhandled Exception {
  message: 'Request failed with status code 401',
  name: 'UnhandledRejection AxiosError',
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: '[function] function httpAdapter(config) {\n' +
      '  return new Promise(function dispatchHttpRequest(resolvePromise, rejectPromise) {\n' +
      '    var onCanceled;\n' +
      '    function done() {\n' +
      '      if (config.cancelToken) {\n' +
      '        config.cancelToken.unsubscribe(onCanceled);\n' +
      '      }\n' +
      '      if (config.signal) {\n' +
      "        config.signal.removeEventListener('abort', onCanceled);\n" +
      '      }\n' +
      '    }\n' +
      '    var resolve = function resolve(value) {\n' +
      '      done();\n' +
      '      resolvePromise(value);\n' +
      '    };\n' +
      '    var rejected = false;\n' +
      '    var reject = function reject(value) {\n' +
      '      done();\n' +
      '      rejected = true;\n' +
      '      rejectPromise(value);\n' +
      '    };\n' +
      '    var data = config.data;\n' +
      '    var headers = config.headers;\n' +
      '    var headerNames = {};\n' +
      '    Object.keys(headers).forEach(function storeLowerName(name) {\n' +
      '      headerNames[name.toLowerCase()] = name;\n' +
      '    });\n' +
      '\n' +
      '    // Set User-Agent (required by some servers)\n' +
      '    // See https://github.com/axios/axios/issues/69\n' +
      "    if ('user-agent' in headerNames) {\n" +
      '      // User-Agent is specified; handle case where no UA header is desired\n' +
      "      if (!headers[headerNames['user-agent']]) {\n" +
      "        delete headers[headerNames['user-agent']];\n" +
      '      }\n' +
      '      // Otherwise, use specified value\n' +
      '    } else {\n' +
      "      // Only set header if it hasn't been set in config\n" +
      "      headers['User-Agent'] = 'axios/' + VERSION;\n" +
      '    }\n' +
      '\n' +
      '    // support for https://www.npmjs.com/package/form-data api\n' +
      '    if (utils.isFormData(data) && utils.isFunction(data.getHeaders)) {\n' +
      '      Object.assign(headers, data.getHeaders());\n' +
      '    } else if (data && !utils.isStream(data)) {\n' +
      '      if (Buffer.isBuffer(data)) {\n' +
      '        // Nothing to do...\n' +
      '      } else if (utils.isArrayBuffer(data)) {\n' +
      '        data = Buffer.from(new Uint8Array(data));\n' +
      '      } else if (utils.isString(data)) {\n' +
      "        data = Buffer.from(data, 'utf-8');\n" +
      '      } else {\n' +
      "        return reject(new AxiosError('Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream', AxiosError.ERR_BAD_REQUEST, config));\n" +
      '      }\n' +
      '      if (config.maxBodyLength > -1 && data.length > config.maxBodyLength) {\n' +
      "        return reject(new AxiosError('Request body larger than maxBodyLength limit', AxiosError.ERR_BAD_REQUEST, config));\n" +
      '      }\n' +
      '\n' +
      '      // Add Content-Length header if data exists\n' +
      "      if (!headerNames['content-length']) {\n" +
      "        headers['Content-Length'] = data.length;\n" +
      '      }\n' +
      '    }\n' +
      '\n' +
      '    // HTTP basic authentication\n' +
      '    var auth = undefined;\n' +
      '    if (config.auth) {\n' +
      "      var username = config.auth.username || '';\n" +
      "      var password = config.auth.password || '';\n" +
      "      auth = username + ':' + password;\n" +
      '    }\n' +
      '\n' +
      '    // Parse url\n' +
      '    var fullPath = buildFullPath(config.baseURL, config.url);\n' +
      '    var parsed = url.parse(fullPath);\n' +
      '    var protocol = parsed.protocol || supportedProtocols[0];\n' +
      '    if (supportedProtocols.indexOf(protocol) === -1) {\n' +
      "      return reject(new AxiosError('Unsupported protocol ' + protocol, AxiosError.ERR_BAD_REQUEST, config));\n" +
      '    }\n' +
      '    if (!auth && parsed.auth) {\n' +
      "      var urlAuth = parsed.auth.split(':');\n" +
      "      var urlUsername = urlAuth[0] || '';\n" +
      "      var urlPassword = urlAuth[1] || '';\n" +
      "      auth = urlUsername + ':' + urlPassword;\n" +
      '    }\n' +
      '    if (auth && headerNames.authorization) {\n' +
      '      delete headers[headerNames.authorization];\n' +
      '    }\n' +
      '    var isHttpsRequest = isHttps.test(protocol);\n' +
      '    var agent = isHttpsRequest ? config.httpsAgent : config.httpAgent;\n' +
      '    try {\n' +
      "      buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\\?/, '');\n" +
      '    } catch (err) {\n' +
      '      var customErr = new Error(err.message);\n' +
      '      customErr.config = config;\n' +
      '      customErr.url = config.url;\n' +
      '      customErr.exists = true;\n' +
      '      reject(customErr);\n' +
      '    }\n' +
      '    var options = {\n' +
      "      path: buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\\?/, ''),\n" +
      '      method: config.method.toUpperCase(),\n' +
      '      headers: headers,\n' +
      '      agent: agent,\n' +
      '      agents: {\n' +
      '        http: config.httpAgent,\n' +
      '        https: config.httpsAgent\n' +
      '      },\n' +
      '      auth: auth\n' +
      '    };\n' +
      '    if (config.socketPath) {\n' +
      '      options.socketPath = config.socketPath;\n' +
      '    } else {\n' +
      '      options.hostname = parsed.hostname;\n' +
      '      options.port = parsed.port;\n' +
      '    }\n' +
      '    var proxy = config.proxy;\n' +
      '    if (!proxy && proxy !== false) {\n' +
      "      var proxyEnv = protocol.slice(0, -1) + '_proxy';\n" +
      '      var proxyUrl = process.env[proxyEnv] || process.env[proxyEnv.toUpperCase()];\n' +
      '      if (proxyUrl) {\n' +
      '        var parsedProxyUrl = url.parse(proxyUrl);\n' +
      '        var noProxyEnv = process.env.no_proxy || process.env.NO_PROXY;\n' +
      '        var shouldProxy = true;\n' +
      '        if (noProxyEnv) {\n' +
      "          var noProxy = noProxyEnv.split(',').map(function trim(s) {\n" +
      '            return s.trim();\n' +
      '          });\n' +
      '          shouldProxy = !noProxy.some(function proxyMatch(proxyElement) {\n' +
      '            if (!proxyElement) {\n' +
      '              return false;\n' +
      '            }\n' +
      "            if (proxyElement === '*') {\n" +
      '              return true;\n' +
      '            }\n' +
      "            if (proxyElement[0] === '.' && parsed.hostname.substr(parsed.hostname.length - proxyElement.length) === proxyElement) {\n" +
      '              return true;\n' +
      '            }\n' +
      '            return parsed.hostname === proxyElement;\n' +
      '          });\n' +
      '        }\n' +
      '        if (shouldProxy) {\n' +
      '          proxy = {\n' +
      '            host: parsedProxyUrl.hostname,\n' +
      '            port: parsedProxyUrl.port,\n' +
      '            protocol: parsedProxyUrl.protocol\n' +
      '          };\n' +
      '          if (parsedProxyUrl.auth) {\n' +
      "            var proxyUrlAuth = parsedProxyUrl.auth.split(':');\n" +
      '            proxy.auth = {\n' +
      '              username: proxyUrlAuth[0],\n' +
      '              password: proxyUrlAuth[1]\n' +
      '            };\n' +
      '          }\n' +
      '        }\n' +
      '      }\n' +
      '    }\n' +
      '    if (proxy) {\n' +
      "      options.headers.host = parsed.hostname + (parsed.port ? ':' + parsed.port : '');\n" +
      "      setProxy(options, proxy, protocol + '//' + parsed.hostname + (parsed.port ? ':' + parsed.port : '') + options.path);\n" +
      '    }\n' +
      '    var transport;\n' +
      '    var isHttpsProxy = isHttpsRequest && (proxy ? isHttps.test(proxy.protocol) : true);\n' +
      '    if (config.transport) {\n' +
      '      transport = config.transport;\n' +
      '    } else if (config.maxRedirects === 0) {\n' +
      '      transport = isHttpsProxy ? https : http;\n' +
      '    } else {\n' +
      '      if (config.maxRedirects) {\n' +
      '        options.maxRedirects = config.maxRedirects;\n' +
      '      }\n' +
      '      if (config.beforeRedirect) {\n' +
      '        options.beforeRedirect = config.beforeRedirect;\n' +
      '      }\n' +
      '      transport = isHttpsProxy ? httpsFollow : httpFollow;\n' +
      '    }\n' +
      '    if (config.maxBodyLength > -1) {\n' +
      '      options.maxBodyLength = config.maxBodyLength;\n' +
      '    }\n' +
      '    if (config.insecureHTTPParser) {\n' +
      '      options.insecureHTTPParser = config.insecureHTTPParser;\n' +
      '    }\n' +
      '\n' +
      '    // Create the request\n' +
      '    var req = transport.request(options, function handleResponse(res) {\n' +
      '      if (req.aborted) return;\n' +
      '\n' +
      '      // uncompress the response body transparently if required\n' +
      '      var stream = res;\n' +
      '\n' +
      '      // return the last request in case of redirects\n' +
      '      var lastRequest = res.req || req;\n' +
      '\n' +
      '      // if no content, is HEAD request or decompress disabled we should not decompress\n' +
      "      if (res.statusCode !== 204 && lastRequest.method !== 'HEAD' && config.decompress !== false) {\n" +
      "        switch (res.headers['content-encoding']) {\n" +
      '          /*eslint default-case:0*/\n' +
      "          case 'gzip':\n" +
      "          case 'compress':\n" +
      "          case 'deflate':\n" +
      '            // add the unzipper to the body stream processing pipeline\n' +
      '            stream = stream.pipe(zlib.createUnzip());\n' +
      '\n' +
      '            // remove the content-encoding in order to not confuse downstream operations\n' +
      "            delete res.headers['content-encoding'];\n" +
      '            break;\n' +
      '        }\n' +
      '      }\n' +
      '      var response = {\n' +
      '        status: res.statusCode,\n' +
      '        statusText: res.statusMessage,\n' +
      '        headers: res.headers,\n' +
      '        config: config,\n' +
      '        request: lastRequest\n' +
      '      };\n' +
      "      if (config.responseType === 'stream') {\n" +
      '        response.data = stream;\n' +
      '        settle(resolve, reject, response);\n' +
      '      } else {\n' +
      '        var responseBuffer = [];\n' +
      '        var totalResponseBytes = 0;\n' +
      "        stream.on('data', function handleStreamData(chunk) {\n" +
      '          responseBuffer.push(chunk);\n' +
      '          totalResponseBytes += chunk.length;\n' +
      '\n' +
      '          // make sure the content length is not over the maxContentLength if specified\n' +
      '          if (config.maxContentLength > -1 && totalResponseBytes > config.maxContentLength) {\n' +
      '            // stream.destoy() emit aborted event before calling reject() on Node.js v16\n' +
      '            rejected = true;\n' +
      '            stream.destroy();\n' +
      "            reject(new AxiosError('maxContentLength size of ' + config.maxContentLength + ' exceeded', AxiosError.ERR_BAD_RESPONSE, config, lastRequest));\n" +
      '          }\n' +
      '        });\n' +
      "        stream.on('aborted', function handlerStreamAborted() {\n" +
      '          if (rejected) {\n' +
      '            return;\n' +
      '          }\n' +
      '          stream.destroy();\n' +
      "          reject(new AxiosError('maxContentLength size of ' + config.maxContentLength + ' exceeded', AxiosError.ERR_BAD_RESPONSE, config, lastRequest));\n" +
      '        });\n' +
      "        stream.on('error', function handleStreamError(err) {\n" +
      '          if (req.aborted) return;\n' +
      '          reject(AxiosError.from(err, null, config, lastRequest));\n' +
      '        });\n' +
      "        stream.on('end', function handleStreamEnd() {\n" +
      '          try {\n' +
      '            var responseData = responseBuffer.length === 1 ? responseBuffer[0] : Buffer.concat(responseBuffer);\n' +
      "            if (config.responseType !== 'arraybuffer') {\n" +
      '              responseData = responseData.toString(config.responseEncoding);\n' +
      "              if (!config.responseEncoding || config.responseEncoding === 'utf8') {\n" +
      '                responseData = utils.stripBOM(responseData);\n' +
      '              }\n' +
      '            }\n' +
      '            response.data = responseData;\n' +
      '          } catch (err) {\n' +
      '            reject(AxiosError.from(err, null, config, response.request, response));\n' +
      '          }\n' +
      '          settle(resolve, reject, response);\n' +
      '        });\n' +
      '      }\n' +
      '    });\n' +
      '\n' +
      '    // Handle errors\n' +
      "    req.on('error', function handleRequestError(err) {\n" +
      '      // @todo remove\n' +
      '      // if (req.aborted && err.code !== AxiosError.ERR_FR_TOO_MANY_REDIRECTS) return;\n' +
      '      reject(AxiosError.from(err, null, config, req));\n' +
      '    });\n' +
      '\n' +
      ' '... 2346 more characters,
    transformRequest: [
      '[function] function transformRequest(data, headers) {\n' +
        "    normalizeHeaderName(headers, 'Accept');\n" +
        "    normalizeHeaderName(headers, 'Content-Type');\n" +
        '    if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {\n' +
        '      return data;\n' +
        '    }\n' +
        '    if (utils.isArrayBufferView(data)) {\n' +
        '      return data.buffer;\n' +
        '    }\n' +
        '    if (utils.isURLSearchParams(data)) {\n' +
        "      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');\n" +
        '      return data.toString();\n' +
        '    }\n' +
        '    var isObjectPayload = utils.isObject(data);\n' +
        "    var contentType = headers && headers['Content-Type'];\n" +
        '    var isFileList;\n' +
        "    if ((isFileList = utils.isFileList(data)) || isObjectPayload && contentType === 'multipart/form-data') {\n" +
        '      var _FormData = this.env && this.env.FormData;\n' +
        '      return toFormData(isFileList ? {\n' +
        "        'files[]': data\n" +
        '      } : data, _FormData && new _FormData());\n' +
        "    } else if (isObjectPayload || contentType === 'application/json') {\n" +
        "      setContentTypeIfUnset(headers, 'application/json');\n" +
        '      return stringifySafely(data);\n' +
        '    }\n' +
        '    return data;\n' +
        '  }'
    ],
    transformResponse: [
      '[function] function transformResponse(data) {\n' +
        '    var transitional = this.transitional || defaults.transitional;\n' +
        '    var silentJSONParsing = transitional && transitional.silentJSONParsing;\n' +
        '    var forcedJSONParsing = transitional && transitional.forcedJSONParsing;\n' +
        "    var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';\n" +
        '    if (strictJSONParsing || forcedJSONParsing && utils.isString(data) && data.length) {\n' +
        '      try {\n' +
        '        return JSON.parse(data);\n' +
        '      } catch (e) {\n' +
        '        if (strictJSONParsing) {\n' +
        "          if (e.name === 'SyntaxError') {\n" +
        '            throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);\n' +
        '          }\n' +
        '          throw e;\n' +
        '        }\n' +
        '      }\n' +
        '    }\n' +
        '    return data;\n' +
        '  }'
    ],
    timeout: 0,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
      FormData: '[function] function FormData(options) {\n' +
        '  if (!(this instanceof FormData)) {\n' +
        '    return new FormData(options);\n' +
        '  }\n' +
        '  this._overheadLength = 0;\n' +
        '  this._valueLength = 0;\n' +
        '  this._valuesToMeasure = [];\n' +
        '  CombinedStream.call(this);\n' +
        '  options = options || {};\n' +
        '  for (var option in options) {\n' +
        '    this[option] = options[option];\n' +
        '  }\n' +
        '}'
    },
    validateStatus: '[function] function validateStatus(status) {\n' +
      '    return status >= 200 && status < 300;\n' +
      '  }',
    headers: {
      Accept: 'application/json, text/plain, */*',
      Authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2MjQ1OSwiZXhwIjoxNjg5MTQ4ODU5fQ.dYlyGYgIl6bI4dTrsoT4_n_6nqUrclfqQi70C3SwhpU',
      'Content-Type': '',
      'User-Agent': 'axios/0.27.2'
    },
    url: 'https://connect-api.dev.insiteflow.io/v1/connect/container/config?organizationId=711729a8-a473-47bf-b27f-8abc1ee52281&containerType=desktop',
    method: 'get'
  },
  code: 'ERR_BAD_REQUEST',
  status: 401
}
[2023-07-11 13:31:16.045] [info]  In the catch  undefined
[2023-07-11 13:31:16.046] [error] Unhandled Exception {
  message: 'Request failed with status code 401',
  name: 'UnhandledRejection AxiosError',
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: '[function] function httpAdapter(config) {\n' +
      '  return new Promise(function dispatchHttpRequest(resolvePromise, rejectPromise) {\n' +
      '    var onCanceled;\n' +
      '    function done() {\n' +
      '      if (config.cancelToken) {\n' +
      '        config.cancelToken.unsubscribe(onCanceled);\n' +
      '      }\n' +
      '      if (config.signal) {\n' +
      "        config.signal.removeEventListener('abort', onCanceled);\n" +
      '      }\n' +
      '    }\n' +
      '    var resolve = function resolve(value) {\n' +
      '      done();\n' +
      '      resolvePromise(value);\n' +
      '    };\n' +
      '    var rejected = false;\n' +
      '    var reject = function reject(value) {\n' +
      '      done();\n' +
      '      rejected = true;\n' +
      '      rejectPromise(value);\n' +
      '    };\n' +
      '    var data = config.data;\n' +
      '    var headers = config.headers;\n' +
      '    var headerNames = {};\n' +
      '    Object.keys(headers).forEach(function storeLowerName(name) {\n' +
      '      headerNames[name.toLowerCase()] = name;\n' +
      '    });\n' +
      '\n' +
      '    // Set User-Agent (required by some servers)\n' +
      '    // See https://github.com/axios/axios/issues/69\n' +
      "    if ('user-agent' in headerNames) {\n" +
      '      // User-Agent is specified; handle case where no UA header is desired\n' +
      "      if (!headers[headerNames['user-agent']]) {\n" +
      "        delete headers[headerNames['user-agent']];\n" +
      '      }\n' +
      '      // Otherwise, use specified value\n' +
      '    } else {\n' +
      "      // Only set header if it hasn't been set in config\n" +
      "      headers['User-Agent'] = 'axios/' + VERSION;\n" +
      '    }\n' +
      '\n' +
      '    // support for https://www.npmjs.com/package/form-data api\n' +
      '    if (utils.isFormData(data) && utils.isFunction(data.getHeaders)) {\n' +
      '      Object.assign(headers, data.getHeaders());\n' +
      '    } else if (data && !utils.isStream(data)) {\n' +
      '      if (Buffer.isBuffer(data)) {\n' +
      '        // Nothing to do...\n' +
      '      } else if (utils.isArrayBuffer(data)) {\n' +
      '        data = Buffer.from(new Uint8Array(data));\n' +
      '      } else if (utils.isString(data)) {\n' +
      "        data = Buffer.from(data, 'utf-8');\n" +
      '      } else {\n' +
      "        return reject(new AxiosError('Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream', AxiosError.ERR_BAD_REQUEST, config));\n" +
      '      }\n' +
      '      if (config.maxBodyLength > -1 && data.length > config.maxBodyLength) {\n' +
      "        return reject(new AxiosError('Request body larger than maxBodyLength limit', AxiosError.ERR_BAD_REQUEST, config));\n" +
      '      }\n' +
      '\n' +
      '      // Add Content-Length header if data exists\n' +
      "      if (!headerNames['content-length']) {\n" +
      "        headers['Content-Length'] = data.length;\n" +
      '      }\n' +
      '    }\n' +
      '\n' +
      '    // HTTP basic authentication\n' +
      '    var auth = undefined;\n' +
      '    if (config.auth) {\n' +
      "      var username = config.auth.username || '';\n" +
      "      var password = config.auth.password || '';\n" +
      "      auth = username + ':' + password;\n" +
      '    }\n' +
      '\n' +
      '    // Parse url\n' +
      '    var fullPath = buildFullPath(config.baseURL, config.url);\n' +
      '    var parsed = url.parse(fullPath);\n' +
      '    var protocol = parsed.protocol || supportedProtocols[0];\n' +
      '    if (supportedProtocols.indexOf(protocol) === -1) {\n' +
      "      return reject(new AxiosError('Unsupported protocol ' + protocol, AxiosError.ERR_BAD_REQUEST, config));\n" +
      '    }\n' +
      '    if (!auth && parsed.auth) {\n' +
      "      var urlAuth = parsed.auth.split(':');\n" +
      "      var urlUsername = urlAuth[0] || '';\n" +
      "      var urlPassword = urlAuth[1] || '';\n" +
      "      auth = urlUsername + ':' + urlPassword;\n" +
      '    }\n' +
      '    if (auth && headerNames.authorization) {\n' +
      '      delete headers[headerNames.authorization];\n' +
      '    }\n' +
      '    var isHttpsRequest = isHttps.test(protocol);\n' +
      '    var agent = isHttpsRequest ? config.httpsAgent : config.httpAgent;\n' +
      '    try {\n' +
      "      buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\\?/, '');\n" +
      '    } catch (err) {\n' +
      '      var customErr = new Error(err.message);\n' +
      '      customErr.config = config;\n' +
      '      customErr.url = config.url;\n' +
      '      customErr.exists = true;\n' +
      '      reject(customErr);\n' +
      '    }\n' +
      '    var options = {\n' +
      "      path: buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\\?/, ''),\n" +
      '      method: config.method.toUpperCase(),\n' +
      '      headers: headers,\n' +
      '      agent: agent,\n' +
      '      agents: {\n' +
      '        http: config.httpAgent,\n' +
      '        https: config.httpsAgent\n' +
      '      },\n' +
      '      auth: auth\n' +
      '    };\n' +
      '    if (config.socketPath) {\n' +
      '      options.socketPath = config.socketPath;\n' +
      '    } else {\n' +
      '      options.hostname = parsed.hostname;\n' +
      '      options.port = parsed.port;\n' +
      '    }\n' +
      '    var proxy = config.proxy;\n' +
      '    if (!proxy && proxy !== false) {\n' +
      "      var proxyEnv = protocol.slice(0, -1) + '_proxy';\n" +
      '      var proxyUrl = process.env[proxyEnv] || process.env[proxyEnv.toUpperCase()];\n' +
      '      if (proxyUrl) {\n' +
      '        var parsedProxyUrl = url.parse(proxyUrl);\n' +
      '        var noProxyEnv = process.env.no_proxy || process.env.NO_PROXY;\n' +
      '        var shouldProxy = true;\n' +
      '        if (noProxyEnv) {\n' +
      "          var noProxy = noProxyEnv.split(',').map(function trim(s) {\n" +
      '            return s.trim();\n' +
      '          });\n' +
      '          shouldProxy = !noProxy.some(function proxyMatch(proxyElement) {\n' +
      '            if (!proxyElement) {\n' +
      '              return false;\n' +
      '            }\n' +
      "            if (proxyElement === '*') {\n" +
      '              return true;\n' +
      '            }\n' +
      "            if (proxyElement[0] === '.' && parsed.hostname.substr(parsed.hostname.length - proxyElement.length) === proxyElement) {\n" +
      '              return true;\n' +
      '            }\n' +
      '            return parsed.hostname === proxyElement;\n' +
      '          });\n' +
      '        }\n' +
      '        if (shouldProxy) {\n' +
      '          proxy = {\n' +
      '            host: parsedProxyUrl.hostname,\n' +
      '            port: parsedProxyUrl.port,\n' +
      '            protocol: parsedProxyUrl.protocol\n' +
      '          };\n' +
      '          if (parsedProxyUrl.auth) {\n' +
      "            var proxyUrlAuth = parsedProxyUrl.auth.split(':');\n" +
      '            proxy.auth = {\n' +
      '              username: proxyUrlAuth[0],\n' +
      '              password: proxyUrlAuth[1]\n' +
      '            };\n' +
      '          }\n' +
      '        }\n' +
      '      }\n' +
      '    }\n' +
      '    if (proxy) {\n' +
      "      options.headers.host = parsed.hostname + (parsed.port ? ':' + parsed.port : '');\n" +
      "      setProxy(options, proxy, protocol + '//' + parsed.hostname + (parsed.port ? ':' + parsed.port : '') + options.path);\n" +
      '    }\n' +
      '    var transport;\n' +
      '    var isHttpsProxy = isHttpsRequest && (proxy ? isHttps.test(proxy.protocol) : true);\n' +
      '    if (config.transport) {\n' +
      '      transport = config.transport;\n' +
      '    } else if (config.maxRedirects === 0) {\n' +
      '      transport = isHttpsProxy ? https : http;\n' +
      '    } else {\n' +
      '      if (config.maxRedirects) {\n' +
      '        options.maxRedirects = config.maxRedirects;\n' +
      '      }\n' +
      '      if (config.beforeRedirect) {\n' +
      '        options.beforeRedirect = config.beforeRedirect;\n' +
      '      }\n' +
      '      transport = isHttpsProxy ? httpsFollow : httpFollow;\n' +
      '    }\n' +
      '    if (config.maxBodyLength > -1) {\n' +
      '      options.maxBodyLength = config.maxBodyLength;\n' +
      '    }\n' +
      '    if (config.insecureHTTPParser) {\n' +
      '      options.insecureHTTPParser = config.insecureHTTPParser;\n' +
      '    }\n' +
      '\n' +
      '    // Create the request\n' +
      '    var req = transport.request(options, function handleResponse(res) {\n' +
      '      if (req.aborted) return;\n' +
      '\n' +
      '      // uncompress the response body transparently if required\n' +
      '      var stream = res;\n' +
      '\n' +
      '      // return the last request in case of redirects\n' +
      '      var lastRequest = res.req || req;\n' +
      '\n' +
      '      // if no content, is HEAD request or decompress disabled we should not decompress\n' +
      "      if (res.statusCode !== 204 && lastRequest.method !== 'HEAD' && config.decompress !== false) {\n" +
      "        switch (res.headers['content-encoding']) {\n" +
      '          /*eslint default-case:0*/\n' +
      "          case 'gzip':\n" +
      "          case 'compress':\n" +
      "          case 'deflate':\n" +
      '            // add the unzipper to the body stream processing pipeline\n' +
      '            stream = stream.pipe(zlib.createUnzip());\n' +
      '\n' +
      '            // remove the content-encoding in order to not confuse downstream operations\n' +
      "            delete res.headers['content-encoding'];\n" +
      '            break;\n' +
      '        }\n' +
      '      }\n' +
      '      var response = {\n' +
      '        status: res.statusCode,\n' +
      '        statusText: res.statusMessage,\n' +
      '        headers: res.headers,\n' +
      '        config: config,\n' +
      '        request: lastRequest\n' +
      '      };\n' +
      "      if (config.responseType === 'stream') {\n" +
      '        response.data = stream;\n' +
      '        settle(resolve, reject, response);\n' +
      '      } else {\n' +
      '        var responseBuffer = [];\n' +
      '        var totalResponseBytes = 0;\n' +
      "        stream.on('data', function handleStreamData(chunk) {\n" +
      '          responseBuffer.push(chunk);\n' +
      '          totalResponseBytes += chunk.length;\n' +
      '\n' +
      '          // make sure the content length is not over the maxContentLength if specified\n' +
      '          if (config.maxContentLength > -1 && totalResponseBytes > config.maxContentLength) {\n' +
      '            // stream.destoy() emit aborted event before calling reject() on Node.js v16\n' +
      '            rejected = true;\n' +
      '            stream.destroy();\n' +
      "            reject(new AxiosError('maxContentLength size of ' + config.maxContentLength + ' exceeded', AxiosError.ERR_BAD_RESPONSE, config, lastRequest));\n" +
      '          }\n' +
      '        });\n' +
      "        stream.on('aborted', function handlerStreamAborted() {\n" +
      '          if (rejected) {\n' +
      '            return;\n' +
      '          }\n' +
      '          stream.destroy();\n' +
      "          reject(new AxiosError('maxContentLength size of ' + config.maxContentLength + ' exceeded', AxiosError.ERR_BAD_RESPONSE, config, lastRequest));\n" +
      '        });\n' +
      "        stream.on('error', function handleStreamError(err) {\n" +
      '          if (req.aborted) return;\n' +
      '          reject(AxiosError.from(err, null, config, lastRequest));\n' +
      '        });\n' +
      "        stream.on('end', function handleStreamEnd() {\n" +
      '          try {\n' +
      '            var responseData = responseBuffer.length === 1 ? responseBuffer[0] : Buffer.concat(responseBuffer);\n' +
      "            if (config.responseType !== 'arraybuffer') {\n" +
      '              responseData = responseData.toString(config.responseEncoding);\n' +
      "              if (!config.responseEncoding || config.responseEncoding === 'utf8') {\n" +
      '                responseData = utils.stripBOM(responseData);\n' +
      '              }\n' +
      '            }\n' +
      '            response.data = responseData;\n' +
      '          } catch (err) {\n' +
      '            reject(AxiosError.from(err, null, config, response.request, response));\n' +
      '          }\n' +
      '          settle(resolve, reject, response);\n' +
      '        });\n' +
      '      }\n' +
      '    });\n' +
      '\n' +
      '    // Handle errors\n' +
      "    req.on('error', function handleRequestError(err) {\n" +
      '      // @todo remove\n' +
      '      // if (req.aborted && err.code !== AxiosError.ERR_FR_TOO_MANY_REDIRECTS) return;\n' +
      '      reject(AxiosError.from(err, null, config, req));\n' +
      '    });\n' +
      '\n' +
      ' '... 2346 more characters,
    transformRequest: [
      '[function] function transformRequest(data, headers) {\n' +
        "    normalizeHeaderName(headers, 'Accept');\n" +
        "    normalizeHeaderName(headers, 'Content-Type');\n" +
        '    if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {\n' +
        '      return data;\n' +
        '    }\n' +
        '    if (utils.isArrayBufferView(data)) {\n' +
        '      return data.buffer;\n' +
        '    }\n' +
        '    if (utils.isURLSearchParams(data)) {\n' +
        "      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');\n" +
        '      return data.toString();\n' +
        '    }\n' +
        '    var isObjectPayload = utils.isObject(data);\n' +
        "    var contentType = headers && headers['Content-Type'];\n" +
        '    var isFileList;\n' +
        "    if ((isFileList = utils.isFileList(data)) || isObjectPayload && contentType === 'multipart/form-data') {\n" +
        '      var _FormData = this.env && this.env.FormData;\n' +
        '      return toFormData(isFileList ? {\n' +
        "        'files[]': data\n" +
        '      } : data, _FormData && new _FormData());\n' +
        "    } else if (isObjectPayload || contentType === 'application/json') {\n" +
        "      setContentTypeIfUnset(headers, 'application/json');\n" +
        '      return stringifySafely(data);\n' +
        '    }\n' +
        '    return data;\n' +
        '  }'
    ],
    transformResponse: [
      '[function] function transformResponse(data) {\n' +
        '    var transitional = this.transitional || defaults.transitional;\n' +
        '    var silentJSONParsing = transitional && transitional.silentJSONParsing;\n' +
        '    var forcedJSONParsing = transitional && transitional.forcedJSONParsing;\n' +
        "    var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';\n" +
        '    if (strictJSONParsing || forcedJSONParsing && utils.isString(data) && data.length) {\n' +
        '      try {\n' +
        '        return JSON.parse(data);\n' +
        '      } catch (e) {\n' +
        '        if (strictJSONParsing) {\n' +
        "          if (e.name === 'SyntaxError') {\n" +
        '            throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);\n' +
        '          }\n' +
        '          throw e;\n' +
        '        }\n' +
        '      }\n' +
        '    }\n' +
        '    return data;\n' +
        '  }'
    ],
    timeout: 0,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
      FormData: '[function] function FormData(options) {\n' +
        '  if (!(this instanceof FormData)) {\n' +
        '    return new FormData(options);\n' +
        '  }\n' +
        '  this._overheadLength = 0;\n' +
        '  this._valueLength = 0;\n' +
        '  this._valuesToMeasure = [];\n' +
        '  CombinedStream.call(this);\n' +
        '  options = options || {};\n' +
        '  for (var option in options) {\n' +
        '    this[option] = options[option];\n' +
        '  }\n' +
        '}'
    },
    validateStatus: '[function] function validateStatus(status) {\n' +
      '    return status >= 200 && status < 300;\n' +
      '  }',
    headers: {
      Accept: 'application/json, text/plain, */*',
      Authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2MjQ1OSwiZXhwIjoxNjg5MTQ4ODU5fQ.dYlyGYgIl6bI4dTrsoT4_n_6nqUrclfqQi70C3SwhpU',
      'Content-Type': '',
      'User-Agent': 'axios/0.27.2'
    },
    url: 'https://connect-api.dev.insiteflow.io/v1/connect/container/config?organizationId=711729a8-a473-47bf-b27f-8abc1ee52281&containerType=desktop',
    method: 'get'
  },
  code: 'ERR_BAD_REQUEST',
  status: 401
}
[2023-07-11 13:31:20.883] [info]  In the catch  undefined
[2023-07-11 13:31:20.884] [error] Unhandled Exception {
  message: 'Request failed with status code 401',
  name: 'UnhandledRejection AxiosError',
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: '[function] function httpAdapter(config) {\n' +
      '  return new Promise(function dispatchHttpRequest(resolvePromise, rejectPromise) {\n' +
      '    var onCanceled;\n' +
      '    function done() {\n' +
      '      if (config.cancelToken) {\n' +
      '        config.cancelToken.unsubscribe(onCanceled);\n' +
      '      }\n' +
      '      if (config.signal) {\n' +
      "        config.signal.removeEventListener('abort', onCanceled);\n" +
      '      }\n' +
      '    }\n' +
      '    var resolve = function resolve(value) {\n' +
      '      done();\n' +
      '      resolvePromise(value);\n' +
      '    };\n' +
      '    var rejected = false;\n' +
      '    var reject = function reject(value) {\n' +
      '      done();\n' +
      '      rejected = true;\n' +
      '      rejectPromise(value);\n' +
      '    };\n' +
      '    var data = config.data;\n' +
      '    var headers = config.headers;\n' +
      '    var headerNames = {};\n' +
      '    Object.keys(headers).forEach(function storeLowerName(name) {\n' +
      '      headerNames[name.toLowerCase()] = name;\n' +
      '    });\n' +
      '\n' +
      '    // Set User-Agent (required by some servers)\n' +
      '    // See https://github.com/axios/axios/issues/69\n' +
      "    if ('user-agent' in headerNames) {\n" +
      '      // User-Agent is specified; handle case where no UA header is desired\n' +
      "      if (!headers[headerNames['user-agent']]) {\n" +
      "        delete headers[headerNames['user-agent']];\n" +
      '      }\n' +
      '      // Otherwise, use specified value\n' +
      '    } else {\n' +
      "      // Only set header if it hasn't been set in config\n" +
      "      headers['User-Agent'] = 'axios/' + VERSION;\n" +
      '    }\n' +
      '\n' +
      '    // support for https://www.npmjs.com/package/form-data api\n' +
      '    if (utils.isFormData(data) && utils.isFunction(data.getHeaders)) {\n' +
      '      Object.assign(headers, data.getHeaders());\n' +
      '    } else if (data && !utils.isStream(data)) {\n' +
      '      if (Buffer.isBuffer(data)) {\n' +
      '        // Nothing to do...\n' +
      '      } else if (utils.isArrayBuffer(data)) {\n' +
      '        data = Buffer.from(new Uint8Array(data));\n' +
      '      } else if (utils.isString(data)) {\n' +
      "        data = Buffer.from(data, 'utf-8');\n" +
      '      } else {\n' +
      "        return reject(new AxiosError('Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream', AxiosError.ERR_BAD_REQUEST, config));\n" +
      '      }\n' +
      '      if (config.maxBodyLength > -1 && data.length > config.maxBodyLength) {\n' +
      "        return reject(new AxiosError('Request body larger than maxBodyLength limit', AxiosError.ERR_BAD_REQUEST, config));\n" +
      '      }\n' +
      '\n' +
      '      // Add Content-Length header if data exists\n' +
      "      if (!headerNames['content-length']) {\n" +
      "        headers['Content-Length'] = data.length;\n" +
      '      }\n' +
      '    }\n' +
      '\n' +
      '    // HTTP basic authentication\n' +
      '    var auth = undefined;\n' +
      '    if (config.auth) {\n' +
      "      var username = config.auth.username || '';\n" +
      "      var password = config.auth.password || '';\n" +
      "      auth = username + ':' + password;\n" +
      '    }\n' +
      '\n' +
      '    // Parse url\n' +
      '    var fullPath = buildFullPath(config.baseURL, config.url);\n' +
      '    var parsed = url.parse(fullPath);\n' +
      '    var protocol = parsed.protocol || supportedProtocols[0];\n' +
      '    if (supportedProtocols.indexOf(protocol) === -1) {\n' +
      "      return reject(new AxiosError('Unsupported protocol ' + protocol, AxiosError.ERR_BAD_REQUEST, config));\n" +
      '    }\n' +
      '    if (!auth && parsed.auth) {\n' +
      "      var urlAuth = parsed.auth.split(':');\n" +
      "      var urlUsername = urlAuth[0] || '';\n" +
      "      var urlPassword = urlAuth[1] || '';\n" +
      "      auth = urlUsername + ':' + urlPassword;\n" +
      '    }\n' +
      '    if (auth && headerNames.authorization) {\n' +
      '      delete headers[headerNames.authorization];\n' +
      '    }\n' +
      '    var isHttpsRequest = isHttps.test(protocol);\n' +
      '    var agent = isHttpsRequest ? config.httpsAgent : config.httpAgent;\n' +
      '    try {\n' +
      "      buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\\?/, '');\n" +
      '    } catch (err) {\n' +
      '      var customErr = new Error(err.message);\n' +
      '      customErr.config = config;\n' +
      '      customErr.url = config.url;\n' +
      '      customErr.exists = true;\n' +
      '      reject(customErr);\n' +
      '    }\n' +
      '    var options = {\n' +
      "      path: buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\\?/, ''),\n" +
      '      method: config.method.toUpperCase(),\n' +
      '      headers: headers,\n' +
      '      agent: agent,\n' +
      '      agents: {\n' +
      '        http: config.httpAgent,\n' +
      '        https: config.httpsAgent\n' +
      '      },\n' +
      '      auth: auth\n' +
      '    };\n' +
      '    if (config.socketPath) {\n' +
      '      options.socketPath = config.socketPath;\n' +
      '    } else {\n' +
      '      options.hostname = parsed.hostname;\n' +
      '      options.port = parsed.port;\n' +
      '    }\n' +
      '    var proxy = config.proxy;\n' +
      '    if (!proxy && proxy !== false) {\n' +
      "      var proxyEnv = protocol.slice(0, -1) + '_proxy';\n" +
      '      var proxyUrl = process.env[proxyEnv] || process.env[proxyEnv.toUpperCase()];\n' +
      '      if (proxyUrl) {\n' +
      '        var parsedProxyUrl = url.parse(proxyUrl);\n' +
      '        var noProxyEnv = process.env.no_proxy || process.env.NO_PROXY;\n' +
      '        var shouldProxy = true;\n' +
      '        if (noProxyEnv) {\n' +
      "          var noProxy = noProxyEnv.split(',').map(function trim(s) {\n" +
      '            return s.trim();\n' +
      '          });\n' +
      '          shouldProxy = !noProxy.some(function proxyMatch(proxyElement) {\n' +
      '            if (!proxyElement) {\n' +
      '              return false;\n' +
      '            }\n' +
      "            if (proxyElement === '*') {\n" +
      '              return true;\n' +
      '            }\n' +
      "            if (proxyElement[0] === '.' && parsed.hostname.substr(parsed.hostname.length - proxyElement.length) === proxyElement) {\n" +
      '              return true;\n' +
      '            }\n' +
      '            return parsed.hostname === proxyElement;\n' +
      '          });\n' +
      '        }\n' +
      '        if (shouldProxy) {\n' +
      '          proxy = {\n' +
      '            host: parsedProxyUrl.hostname,\n' +
      '            port: parsedProxyUrl.port,\n' +
      '            protocol: parsedProxyUrl.protocol\n' +
      '          };\n' +
      '          if (parsedProxyUrl.auth) {\n' +
      "            var proxyUrlAuth = parsedProxyUrl.auth.split(':');\n" +
      '            proxy.auth = {\n' +
      '              username: proxyUrlAuth[0],\n' +
      '              password: proxyUrlAuth[1]\n' +
      '            };\n' +
      '          }\n' +
      '        }\n' +
      '      }\n' +
      '    }\n' +
      '    if (proxy) {\n' +
      "      options.headers.host = parsed.hostname + (parsed.port ? ':' + parsed.port : '');\n" +
      "      setProxy(options, proxy, protocol + '//' + parsed.hostname + (parsed.port ? ':' + parsed.port : '') + options.path);\n" +
      '    }\n' +
      '    var transport;\n' +
      '    var isHttpsProxy = isHttpsRequest && (proxy ? isHttps.test(proxy.protocol) : true);\n' +
      '    if (config.transport) {\n' +
      '      transport = config.transport;\n' +
      '    } else if (config.maxRedirects === 0) {\n' +
      '      transport = isHttpsProxy ? https : http;\n' +
      '    } else {\n' +
      '      if (config.maxRedirects) {\n' +
      '        options.maxRedirects = config.maxRedirects;\n' +
      '      }\n' +
      '      if (config.beforeRedirect) {\n' +
      '        options.beforeRedirect = config.beforeRedirect;\n' +
      '      }\n' +
      '      transport = isHttpsProxy ? httpsFollow : httpFollow;\n' +
      '    }\n' +
      '    if (config.maxBodyLength > -1) {\n' +
      '      options.maxBodyLength = config.maxBodyLength;\n' +
      '    }\n' +
      '    if (config.insecureHTTPParser) {\n' +
      '      options.insecureHTTPParser = config.insecureHTTPParser;\n' +
      '    }\n' +
      '\n' +
      '    // Create the request\n' +
      '    var req = transport.request(options, function handleResponse(res) {\n' +
      '      if (req.aborted) return;\n' +
      '\n' +
      '      // uncompress the response body transparently if required\n' +
      '      var stream = res;\n' +
      '\n' +
      '      // return the last request in case of redirects\n' +
      '      var lastRequest = res.req || req;\n' +
      '\n' +
      '      // if no content, is HEAD request or decompress disabled we should not decompress\n' +
      "      if (res.statusCode !== 204 && lastRequest.method !== 'HEAD' && config.decompress !== false) {\n" +
      "        switch (res.headers['content-encoding']) {\n" +
      '          /*eslint default-case:0*/\n' +
      "          case 'gzip':\n" +
      "          case 'compress':\n" +
      "          case 'deflate':\n" +
      '            // add the unzipper to the body stream processing pipeline\n' +
      '            stream = stream.pipe(zlib.createUnzip());\n' +
      '\n' +
      '            // remove the content-encoding in order to not confuse downstream operations\n' +
      "            delete res.headers['content-encoding'];\n" +
      '            break;\n' +
      '        }\n' +
      '      }\n' +
      '      var response = {\n' +
      '        status: res.statusCode,\n' +
      '        statusText: res.statusMessage,\n' +
      '        headers: res.headers,\n' +
      '        config: config,\n' +
      '        request: lastRequest\n' +
      '      };\n' +
      "      if (config.responseType === 'stream') {\n" +
      '        response.data = stream;\n' +
      '        settle(resolve, reject, response);\n' +
      '      } else {\n' +
      '        var responseBuffer = [];\n' +
      '        var totalResponseBytes = 0;\n' +
      "        stream.on('data', function handleStreamData(chunk) {\n" +
      '          responseBuffer.push(chunk);\n' +
      '          totalResponseBytes += chunk.length;\n' +
      '\n' +
      '          // make sure the content length is not over the maxContentLength if specified\n' +
      '          if (config.maxContentLength > -1 && totalResponseBytes > config.maxContentLength) {\n' +
      '            // stream.destoy() emit aborted event before calling reject() on Node.js v16\n' +
      '            rejected = true;\n' +
      '            stream.destroy();\n' +
      "            reject(new AxiosError('maxContentLength size of ' + config.maxContentLength + ' exceeded', AxiosError.ERR_BAD_RESPONSE, config, lastRequest));\n" +
      '          }\n' +
      '        });\n' +
      "        stream.on('aborted', function handlerStreamAborted() {\n" +
      '          if (rejected) {\n' +
      '            return;\n' +
      '          }\n' +
      '          stream.destroy();\n' +
      "          reject(new AxiosError('maxContentLength size of ' + config.maxContentLength + ' exceeded', AxiosError.ERR_BAD_RESPONSE, config, lastRequest));\n" +
      '        });\n' +
      "        stream.on('error', function handleStreamError(err) {\n" +
      '          if (req.aborted) return;\n' +
      '          reject(AxiosError.from(err, null, config, lastRequest));\n' +
      '        });\n' +
      "        stream.on('end', function handleStreamEnd() {\n" +
      '          try {\n' +
      '            var responseData = responseBuffer.length === 1 ? responseBuffer[0] : Buffer.concat(responseBuffer);\n' +
      "            if (config.responseType !== 'arraybuffer') {\n" +
      '              responseData = responseData.toString(config.responseEncoding);\n' +
      "              if (!config.responseEncoding || config.responseEncoding === 'utf8') {\n" +
      '                responseData = utils.stripBOM(responseData);\n' +
      '              }\n' +
      '            }\n' +
      '            response.data = responseData;\n' +
      '          } catch (err) {\n' +
      '            reject(AxiosError.from(err, null, config, response.request, response));\n' +
      '          }\n' +
      '          settle(resolve, reject, response);\n' +
      '        });\n' +
      '      }\n' +
      '    });\n' +
      '\n' +
      '    // Handle errors\n' +
      "    req.on('error', function handleRequestError(err) {\n" +
      '      // @todo remove\n' +
      '      // if (req.aborted && err.code !== AxiosError.ERR_FR_TOO_MANY_REDIRECTS) return;\n' +
      '      reject(AxiosError.from(err, null, config, req));\n' +
      '    });\n' +
      '\n' +
      ' '... 2346 more characters,
    transformRequest: [
      '[function] function transformRequest(data, headers) {\n' +
        "    normalizeHeaderName(headers, 'Accept');\n" +
        "    normalizeHeaderName(headers, 'Content-Type');\n" +
        '    if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {\n' +
        '      return data;\n' +
        '    }\n' +
        '    if (utils.isArrayBufferView(data)) {\n' +
        '      return data.buffer;\n' +
        '    }\n' +
        '    if (utils.isURLSearchParams(data)) {\n' +
        "      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');\n" +
        '      return data.toString();\n' +
        '    }\n' +
        '    var isObjectPayload = utils.isObject(data);\n' +
        "    var contentType = headers && headers['Content-Type'];\n" +
        '    var isFileList;\n' +
        "    if ((isFileList = utils.isFileList(data)) || isObjectPayload && contentType === 'multipart/form-data') {\n" +
        '      var _FormData = this.env && this.env.FormData;\n' +
        '      return toFormData(isFileList ? {\n' +
        "        'files[]': data\n" +
        '      } : data, _FormData && new _FormData());\n' +
        "    } else if (isObjectPayload || contentType === 'application/json') {\n" +
        "      setContentTypeIfUnset(headers, 'application/json');\n" +
        '      return stringifySafely(data);\n' +
        '    }\n' +
        '    return data;\n' +
        '  }'
    ],
    transformResponse: [
      '[function] function transformResponse(data) {\n' +
        '    var transitional = this.transitional || defaults.transitional;\n' +
        '    var silentJSONParsing = transitional && transitional.silentJSONParsing;\n' +
        '    var forcedJSONParsing = transitional && transitional.forcedJSONParsing;\n' +
        "    var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';\n" +
        '    if (strictJSONParsing || forcedJSONParsing && utils.isString(data) && data.length) {\n' +
        '      try {\n' +
        '        return JSON.parse(data);\n' +
        '      } catch (e) {\n' +
        '        if (strictJSONParsing) {\n' +
        "          if (e.name === 'SyntaxError') {\n" +
        '            throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);\n' +
        '          }\n' +
        '          throw e;\n' +
        '        }\n' +
        '      }\n' +
        '    }\n' +
        '    return data;\n' +
        '  }'
    ],
    timeout: 0,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
      FormData: '[function] function FormData(options) {\n' +
        '  if (!(this instanceof FormData)) {\n' +
        '    return new FormData(options);\n' +
        '  }\n' +
        '  this._overheadLength = 0;\n' +
        '  this._valueLength = 0;\n' +
        '  this._valuesToMeasure = [];\n' +
        '  CombinedStream.call(this);\n' +
        '  options = options || {};\n' +
        '  for (var option in options) {\n' +
        '    this[option] = options[option];\n' +
        '  }\n' +
        '}'
    },
    validateStatus: '[function] function validateStatus(status) {\n' +
      '    return status >= 200 && status < 300;\n' +
      '  }',
    headers: {
      Accept: 'application/json, text/plain, */*',
      Authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2MjQ1OSwiZXhwIjoxNjg5MTQ4ODU5fQ.dYlyGYgIl6bI4dTrsoT4_n_6nqUrclfqQi70C3SwhpU',
      'Content-Type': '',
      'User-Agent': 'axios/0.27.2'
    },
    url: 'https://connect-api.dev.insiteflow.io/v1/connect/container/config?organizationId=711729a8-a473-47bf-b27f-8abc1ee52281&containerType=desktop',
    method: 'get'
  },
  code: 'ERR_BAD_REQUEST',
  status: 401
}
[2023-07-11 13:31:25.986] [info]  In the catch  undefined
[2023-07-11 13:31:25.987] [error] Unhandled Exception {
  message: 'Request failed with status code 401',
  name: 'UnhandledRejection AxiosError',
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: '[function] function httpAdapter(config) {\n' +
      '  return new Promise(function dispatchHttpRequest(resolvePromise, rejectPromise) {\n' +
      '    var onCanceled;\n' +
      '    function done() {\n' +
      '      if (config.cancelToken) {\n' +
      '        config.cancelToken.unsubscribe(onCanceled);\n' +
      '      }\n' +
      '      if (config.signal) {\n' +
      "        config.signal.removeEventListener('abort', onCanceled);\n" +
      '      }\n' +
      '    }\n' +
      '    var resolve = function resolve(value) {\n' +
      '      done();\n' +
      '      resolvePromise(value);\n' +
      '    };\n' +
      '    var rejected = false;\n' +
      '    var reject = function reject(value) {\n' +
      '      done();\n' +
      '      rejected = true;\n' +
      '      rejectPromise(value);\n' +
      '    };\n' +
      '    var data = config.data;\n' +
      '    var headers = config.headers;\n' +
      '    var headerNames = {};\n' +
      '    Object.keys(headers).forEach(function storeLowerName(name) {\n' +
      '      headerNames[name.toLowerCase()] = name;\n' +
      '    });\n' +
      '\n' +
      '    // Set User-Agent (required by some servers)\n' +
      '    // See https://github.com/axios/axios/issues/69\n' +
      "    if ('user-agent' in headerNames) {\n" +
      '      // User-Agent is specified; handle case where no UA header is desired\n' +
      "      if (!headers[headerNames['user-agent']]) {\n" +
      "        delete headers[headerNames['user-agent']];\n" +
      '      }\n' +
      '      // Otherwise, use specified value\n' +
      '    } else {\n' +
      "      // Only set header if it hasn't been set in config\n" +
      "      headers['User-Agent'] = 'axios/' + VERSION;\n" +
      '    }\n' +
      '\n' +
      '    // support for https://www.npmjs.com/package/form-data api\n' +
      '    if (utils.isFormData(data) && utils.isFunction(data.getHeaders)) {\n' +
      '      Object.assign(headers, data.getHeaders());\n' +
      '    } else if (data && !utils.isStream(data)) {\n' +
      '      if (Buffer.isBuffer(data)) {\n' +
      '        // Nothing to do...\n' +
      '      } else if (utils.isArrayBuffer(data)) {\n' +
      '        data = Buffer.from(new Uint8Array(data));\n' +
      '      } else if (utils.isString(data)) {\n' +
      "        data = Buffer.from(data, 'utf-8');\n" +
      '      } else {\n' +
      "        return reject(new AxiosError('Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream', AxiosError.ERR_BAD_REQUEST, config));\n" +
      '      }\n' +
      '      if (config.maxBodyLength > -1 && data.length > config.maxBodyLength) {\n' +
      "        return reject(new AxiosError('Request body larger than maxBodyLength limit', AxiosError.ERR_BAD_REQUEST, config));\n" +
      '      }\n' +
      '\n' +
      '      // Add Content-Length header if data exists\n' +
      "      if (!headerNames['content-length']) {\n" +
      "        headers['Content-Length'] = data.length;\n" +
      '      }\n' +
      '    }\n' +
      '\n' +
      '    // HTTP basic authentication\n' +
      '    var auth = undefined;\n' +
      '    if (config.auth) {\n' +
      "      var username = config.auth.username || '';\n" +
      "      var password = config.auth.password || '';\n" +
      "      auth = username + ':' + password;\n" +
      '    }\n' +
      '\n' +
      '    // Parse url\n' +
      '    var fullPath = buildFullPath(config.baseURL, config.url);\n' +
      '    var parsed = url.parse(fullPath);\n' +
      '    var protocol = parsed.protocol || supportedProtocols[0];\n' +
      '    if (supportedProtocols.indexOf(protocol) === -1) {\n' +
      "      return reject(new AxiosError('Unsupported protocol ' + protocol, AxiosError.ERR_BAD_REQUEST, config));\n" +
      '    }\n' +
      '    if (!auth && parsed.auth) {\n' +
      "      var urlAuth = parsed.auth.split(':');\n" +
      "      var urlUsername = urlAuth[0] || '';\n" +
      "      var urlPassword = urlAuth[1] || '';\n" +
      "      auth = urlUsername + ':' + urlPassword;\n" +
      '    }\n' +
      '    if (auth && headerNames.authorization) {\n' +
      '      delete headers[headerNames.authorization];\n' +
      '    }\n' +
      '    var isHttpsRequest = isHttps.test(protocol);\n' +
      '    var agent = isHttpsRequest ? config.httpsAgent : config.httpAgent;\n' +
      '    try {\n' +
      "      buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\\?/, '');\n" +
      '    } catch (err) {\n' +
      '      var customErr = new Error(err.message);\n' +
      '      customErr.config = config;\n' +
      '      customErr.url = config.url;\n' +
      '      customErr.exists = true;\n' +
      '      reject(customErr);\n' +
      '    }\n' +
      '    var options = {\n' +
      "      path: buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\\?/, ''),\n" +
      '      method: config.method.toUpperCase(),\n' +
      '      headers: headers,\n' +
      '      agent: agent,\n' +
      '      agents: {\n' +
      '        http: config.httpAgent,\n' +
      '        https: config.httpsAgent\n' +
      '      },\n' +
      '      auth: auth\n' +
      '    };\n' +
      '    if (config.socketPath) {\n' +
      '      options.socketPath = config.socketPath;\n' +
      '    } else {\n' +
      '      options.hostname = parsed.hostname;\n' +
      '      options.port = parsed.port;\n' +
      '    }\n' +
      '    var proxy = config.proxy;\n' +
      '    if (!proxy && proxy !== false) {\n' +
      "      var proxyEnv = protocol.slice(0, -1) + '_proxy';\n" +
      '      var proxyUrl = process.env[proxyEnv] || process.env[proxyEnv.toUpperCase()];\n' +
      '      if (proxyUrl) {\n' +
      '        var parsedProxyUrl = url.parse(proxyUrl);\n' +
      '        var noProxyEnv = process.env.no_proxy || process.env.NO_PROXY;\n' +
      '        var shouldProxy = true;\n' +
      '        if (noProxyEnv) {\n' +
      "          var noProxy = noProxyEnv.split(',').map(function trim(s) {\n" +
      '            return s.trim();\n' +
      '          });\n' +
      '          shouldProxy = !noProxy.some(function proxyMatch(proxyElement) {\n' +
      '            if (!proxyElement) {\n' +
      '              return false;\n' +
      '            }\n' +
      "            if (proxyElement === '*') {\n" +
      '              return true;\n' +
      '            }\n' +
      "            if (proxyElement[0] === '.' && parsed.hostname.substr(parsed.hostname.length - proxyElement.length) === proxyElement) {\n" +
      '              return true;\n' +
      '            }\n' +
      '            return parsed.hostname === proxyElement;\n' +
      '          });\n' +
      '        }\n' +
      '        if (shouldProxy) {\n' +
      '          proxy = {\n' +
      '            host: parsedProxyUrl.hostname,\n' +
      '            port: parsedProxyUrl.port,\n' +
      '            protocol: parsedProxyUrl.protocol\n' +
      '          };\n' +
      '          if (parsedProxyUrl.auth) {\n' +
      "            var proxyUrlAuth = parsedProxyUrl.auth.split(':');\n" +
      '            proxy.auth = {\n' +
      '              username: proxyUrlAuth[0],\n' +
      '              password: proxyUrlAuth[1]\n' +
      '            };\n' +
      '          }\n' +
      '        }\n' +
      '      }\n' +
      '    }\n' +
      '    if (proxy) {\n' +
      "      options.headers.host = parsed.hostname + (parsed.port ? ':' + parsed.port : '');\n" +
      "      setProxy(options, proxy, protocol + '//' + parsed.hostname + (parsed.port ? ':' + parsed.port : '') + options.path);\n" +
      '    }\n' +
      '    var transport;\n' +
      '    var isHttpsProxy = isHttpsRequest && (proxy ? isHttps.test(proxy.protocol) : true);\n' +
      '    if (config.transport) {\n' +
      '      transport = config.transport;\n' +
      '    } else if (config.maxRedirects === 0) {\n' +
      '      transport = isHttpsProxy ? https : http;\n' +
      '    } else {\n' +
      '      if (config.maxRedirects) {\n' +
      '        options.maxRedirects = config.maxRedirects;\n' +
      '      }\n' +
      '      if (config.beforeRedirect) {\n' +
      '        options.beforeRedirect = config.beforeRedirect;\n' +
      '      }\n' +
      '      transport = isHttpsProxy ? httpsFollow : httpFollow;\n' +
      '    }\n' +
      '    if (config.maxBodyLength > -1) {\n' +
      '      options.maxBodyLength = config.maxBodyLength;\n' +
      '    }\n' +
      '    if (config.insecureHTTPParser) {\n' +
      '      options.insecureHTTPParser = config.insecureHTTPParser;\n' +
      '    }\n' +
      '\n' +
      '    // Create the request\n' +
      '    var req = transport.request(options, function handleResponse(res) {\n' +
      '      if (req.aborted) return;\n' +
      '\n' +
      '      // uncompress the response body transparently if required\n' +
      '      var stream = res;\n' +
      '\n' +
      '      // return the last request in case of redirects\n' +
      '      var lastRequest = res.req || req;\n' +
      '\n' +
      '      // if no content, is HEAD request or decompress disabled we should not decompress\n' +
      "      if (res.statusCode !== 204 && lastRequest.method !== 'HEAD' && config.decompress !== false) {\n" +
      "        switch (res.headers['content-encoding']) {\n" +
      '          /*eslint default-case:0*/\n' +
      "          case 'gzip':\n" +
      "          case 'compress':\n" +
      "          case 'deflate':\n" +
      '            // add the unzipper to the body stream processing pipeline\n' +
      '            stream = stream.pipe(zlib.createUnzip());\n' +
      '\n' +
      '            // remove the content-encoding in order to not confuse downstream operations\n' +
      "            delete res.headers['content-encoding'];\n" +
      '            break;\n' +
      '        }\n' +
      '      }\n' +
      '      var response = {\n' +
      '        status: res.statusCode,\n' +
      '        statusText: res.statusMessage,\n' +
      '        headers: res.headers,\n' +
      '        config: config,\n' +
      '        request: lastRequest\n' +
      '      };\n' +
      "      if (config.responseType === 'stream') {\n" +
      '        response.data = stream;\n' +
      '        settle(resolve, reject, response);\n' +
      '      } else {\n' +
      '        var responseBuffer = [];\n' +
      '        var totalResponseBytes = 0;\n' +
      "        stream.on('data', function handleStreamData(chunk) {\n" +
      '          responseBuffer.push(chunk);\n' +
      '          totalResponseBytes += chunk.length;\n' +
      '\n' +
      '          // make sure the content length is not over the maxContentLength if specified\n' +
      '          if (config.maxContentLength > -1 && totalResponseBytes > config.maxContentLength) {\n' +
      '            // stream.destoy() emit aborted event before calling reject() on Node.js v16\n' +
      '            rejected = true;\n' +
      '            stream.destroy();\n' +
      "            reject(new AxiosError('maxContentLength size of ' + config.maxContentLength + ' exceeded', AxiosError.ERR_BAD_RESPONSE, config, lastRequest));\n" +
      '          }\n' +
      '        });\n' +
      "        stream.on('aborted', function handlerStreamAborted() {\n" +
      '          if (rejected) {\n' +
      '            return;\n' +
      '          }\n' +
      '          stream.destroy();\n' +
      "          reject(new AxiosError('maxContentLength size of ' + config.maxContentLength + ' exceeded', AxiosError.ERR_BAD_RESPONSE, config, lastRequest));\n" +
      '        });\n' +
      "        stream.on('error', function handleStreamError(err) {\n" +
      '          if (req.aborted) return;\n' +
      '          reject(AxiosError.from(err, null, config, lastRequest));\n' +
      '        });\n' +
      "        stream.on('end', function handleStreamEnd() {\n" +
      '          try {\n' +
      '            var responseData = responseBuffer.length === 1 ? responseBuffer[0] : Buffer.concat(responseBuffer);\n' +
      "            if (config.responseType !== 'arraybuffer') {\n" +
      '              responseData = responseData.toString(config.responseEncoding);\n' +
      "              if (!config.responseEncoding || config.responseEncoding === 'utf8') {\n" +
      '                responseData = utils.stripBOM(responseData);\n' +
      '              }\n' +
      '            }\n' +
      '            response.data = responseData;\n' +
      '          } catch (err) {\n' +
      '            reject(AxiosError.from(err, null, config, response.request, response));\n' +
      '          }\n' +
      '          settle(resolve, reject, response);\n' +
      '        });\n' +
      '      }\n' +
      '    });\n' +
      '\n' +
      '    // Handle errors\n' +
      "    req.on('error', function handleRequestError(err) {\n" +
      '      // @todo remove\n' +
      '      // if (req.aborted && err.code !== AxiosError.ERR_FR_TOO_MANY_REDIRECTS) return;\n' +
      '      reject(AxiosError.from(err, null, config, req));\n' +
      '    });\n' +
      '\n' +
      ' '... 2346 more characters,
    transformRequest: [
      '[function] function transformRequest(data, headers) {\n' +
        "    normalizeHeaderName(headers, 'Accept');\n" +
        "    normalizeHeaderName(headers, 'Content-Type');\n" +
        '    if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {\n' +
        '      return data;\n' +
        '    }\n' +
        '    if (utils.isArrayBufferView(data)) {\n' +
        '      return data.buffer;\n' +
        '    }\n' +
        '    if (utils.isURLSearchParams(data)) {\n' +
        "      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');\n" +
        '      return data.toString();\n' +
        '    }\n' +
        '    var isObjectPayload = utils.isObject(data);\n' +
        "    var contentType = headers && headers['Content-Type'];\n" +
        '    var isFileList;\n' +
        "    if ((isFileList = utils.isFileList(data)) || isObjectPayload && contentType === 'multipart/form-data') {\n" +
        '      var _FormData = this.env && this.env.FormData;\n' +
        '      return toFormData(isFileList ? {\n' +
        "        'files[]': data\n" +
        '      } : data, _FormData && new _FormData());\n' +
        "    } else if (isObjectPayload || contentType === 'application/json') {\n" +
        "      setContentTypeIfUnset(headers, 'application/json');\n" +
        '      return stringifySafely(data);\n' +
        '    }\n' +
        '    return data;\n' +
        '  }'
    ],
    transformResponse: [
      '[function] function transformResponse(data) {\n' +
        '    var transitional = this.transitional || defaults.transitional;\n' +
        '    var silentJSONParsing = transitional && transitional.silentJSONParsing;\n' +
        '    var forcedJSONParsing = transitional && transitional.forcedJSONParsing;\n' +
        "    var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';\n" +
        '    if (strictJSONParsing || forcedJSONParsing && utils.isString(data) && data.length) {\n' +
        '      try {\n' +
        '        return JSON.parse(data);\n' +
        '      } catch (e) {\n' +
        '        if (strictJSONParsing) {\n' +
        "          if (e.name === 'SyntaxError') {\n" +
        '            throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);\n' +
        '          }\n' +
        '          throw e;\n' +
        '        }\n' +
        '      }\n' +
        '    }\n' +
        '    return data;\n' +
        '  }'
    ],
    timeout: 0,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
      FormData: '[function] function FormData(options) {\n' +
        '  if (!(this instanceof FormData)) {\n' +
        '    return new FormData(options);\n' +
        '  }\n' +
        '  this._overheadLength = 0;\n' +
        '  this._valueLength = 0;\n' +
        '  this._valuesToMeasure = [];\n' +
        '  CombinedStream.call(this);\n' +
        '  options = options || {};\n' +
        '  for (var option in options) {\n' +
        '    this[option] = options[option];\n' +
        '  }\n' +
        '}'
    },
    validateStatus: '[function] function validateStatus(status) {\n' +
      '    return status >= 200 && status < 300;\n' +
      '  }',
    headers: {
      Accept: 'application/json, text/plain, */*',
      Authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2MjQ1OSwiZXhwIjoxNjg5MTQ4ODU5fQ.dYlyGYgIl6bI4dTrsoT4_n_6nqUrclfqQi70C3SwhpU',
      'Content-Type': '',
      'User-Agent': 'axios/0.27.2'
    },
    url: 'https://connect-api.dev.insiteflow.io/v1/connect/container/config?organizationId=711729a8-a473-47bf-b27f-8abc1ee52281&containerType=desktop',
    method: 'get'
  },
  code: 'ERR_BAD_REQUEST',
  status: 401
}
[2023-07-11 13:31:30.899] [info]  In the catch  undefined
[2023-07-11 13:31:30.900] [error] Unhandled Exception {
  message: 'Request failed with status code 401',
  name: 'UnhandledRejection AxiosError',
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: '[function] function httpAdapter(config) {\n' +
      '  return new Promise(function dispatchHttpRequest(resolvePromise, rejectPromise) {\n' +
      '    var onCanceled;\n' +
      '    function done() {\n' +
      '      if (config.cancelToken) {\n' +
      '        config.cancelToken.unsubscribe(onCanceled);\n' +
      '      }\n' +
      '      if (config.signal) {\n' +
      "        config.signal.removeEventListener('abort', onCanceled);\n" +
      '      }\n' +
      '    }\n' +
      '    var resolve = function resolve(value) {\n' +
      '      done();\n' +
      '      resolvePromise(value);\n' +
      '    };\n' +
      '    var rejected = false;\n' +
      '    var reject = function reject(value) {\n' +
      '      done();\n' +
      '      rejected = true;\n' +
      '      rejectPromise(value);\n' +
      '    };\n' +
      '    var data = config.data;\n' +
      '    var headers = config.headers;\n' +
      '    var headerNames = {};\n' +
      '    Object.keys(headers).forEach(function storeLowerName(name) {\n' +
      '      headerNames[name.toLowerCase()] = name;\n' +
      '    });\n' +
      '\n' +
      '    // Set User-Agent (required by some servers)\n' +
      '    // See https://github.com/axios/axios/issues/69\n' +
      "    if ('user-agent' in headerNames) {\n" +
      '      // User-Agent is specified; handle case where no UA header is desired\n' +
      "      if (!headers[headerNames['user-agent']]) {\n" +
      "        delete headers[headerNames['user-agent']];\n" +
      '      }\n' +
      '      // Otherwise, use specified value\n' +
      '    } else {\n' +
      "      // Only set header if it hasn't been set in config\n" +
      "      headers['User-Agent'] = 'axios/' + VERSION;\n" +
      '    }\n' +
      '\n' +
      '    // support for https://www.npmjs.com/package/form-data api\n' +
      '    if (utils.isFormData(data) && utils.isFunction(data.getHeaders)) {\n' +
      '      Object.assign(headers, data.getHeaders());\n' +
      '    } else if (data && !utils.isStream(data)) {\n' +
      '      if (Buffer.isBuffer(data)) {\n' +
      '        // Nothing to do...\n' +
      '      } else if (utils.isArrayBuffer(data)) {\n' +
      '        data = Buffer.from(new Uint8Array(data));\n' +
      '      } else if (utils.isString(data)) {\n' +
      "        data = Buffer.from(data, 'utf-8');\n" +
      '      } else {\n' +
      "        return reject(new AxiosError('Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream', AxiosError.ERR_BAD_REQUEST, config));\n" +
      '      }\n' +
      '      if (config.maxBodyLength > -1 && data.length > config.maxBodyLength) {\n' +
      "        return reject(new AxiosError('Request body larger than maxBodyLength limit', AxiosError.ERR_BAD_REQUEST, config));\n" +
      '      }\n' +
      '\n' +
      '      // Add Content-Length header if data exists\n' +
      "      if (!headerNames['content-length']) {\n" +
      "        headers['Content-Length'] = data.length;\n" +
      '      }\n' +
      '    }\n' +
      '\n' +
      '    // HTTP basic authentication\n' +
      '    var auth = undefined;\n' +
      '    if (config.auth) {\n' +
      "      var username = config.auth.username || '';\n" +
      "      var password = config.auth.password || '';\n" +
      "      auth = username + ':' + password;\n" +
      '    }\n' +
      '\n' +
      '    // Parse url\n' +
      '    var fullPath = buildFullPath(config.baseURL, config.url);\n' +
      '    var parsed = url.parse(fullPath);\n' +
      '    var protocol = parsed.protocol || supportedProtocols[0];\n' +
      '    if (supportedProtocols.indexOf(protocol) === -1) {\n' +
      "      return reject(new AxiosError('Unsupported protocol ' + protocol, AxiosError.ERR_BAD_REQUEST, config));\n" +
      '    }\n' +
      '    if (!auth && parsed.auth) {\n' +
      "      var urlAuth = parsed.auth.split(':');\n" +
      "      var urlUsername = urlAuth[0] || '';\n" +
      "      var urlPassword = urlAuth[1] || '';\n" +
      "      auth = urlUsername + ':' + urlPassword;\n" +
      '    }\n' +
      '    if (auth && headerNames.authorization) {\n' +
      '      delete headers[headerNames.authorization];\n' +
      '    }\n' +
      '    var isHttpsRequest = isHttps.test(protocol);\n' +
      '    var agent = isHttpsRequest ? config.httpsAgent : config.httpAgent;\n' +
      '    try {\n' +
      "      buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\\?/, '');\n" +
      '    } catch (err) {\n' +
      '      var customErr = new Error(err.message);\n' +
      '      customErr.config = config;\n' +
      '      customErr.url = config.url;\n' +
      '      customErr.exists = true;\n' +
      '      reject(customErr);\n' +
      '    }\n' +
      '    var options = {\n' +
      "      path: buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\\?/, ''),\n" +
      '      method: config.method.toUpperCase(),\n' +
      '      headers: headers,\n' +
      '      agent: agent,\n' +
      '      agents: {\n' +
      '        http: config.httpAgent,\n' +
      '        https: config.httpsAgent\n' +
      '      },\n' +
      '      auth: auth\n' +
      '    };\n' +
      '    if (config.socketPath) {\n' +
      '      options.socketPath = config.socketPath;\n' +
      '    } else {\n' +
      '      options.hostname = parsed.hostname;\n' +
      '      options.port = parsed.port;\n' +
      '    }\n' +
      '    var proxy = config.proxy;\n' +
      '    if (!proxy && proxy !== false) {\n' +
      "      var proxyEnv = protocol.slice(0, -1) + '_proxy';\n" +
      '      var proxyUrl = process.env[proxyEnv] || process.env[proxyEnv.toUpperCase()];\n' +
      '      if (proxyUrl) {\n' +
      '        var parsedProxyUrl = url.parse(proxyUrl);\n' +
      '        var noProxyEnv = process.env.no_proxy || process.env.NO_PROXY;\n' +
      '        var shouldProxy = true;\n' +
      '        if (noProxyEnv) {\n' +
      "          var noProxy = noProxyEnv.split(',').map(function trim(s) {\n" +
      '            return s.trim();\n' +
      '          });\n' +
      '          shouldProxy = !noProxy.some(function proxyMatch(proxyElement) {\n' +
      '            if (!proxyElement) {\n' +
      '              return false;\n' +
      '            }\n' +
      "            if (proxyElement === '*') {\n" +
      '              return true;\n' +
      '            }\n' +
      "            if (proxyElement[0] === '.' && parsed.hostname.substr(parsed.hostname.length - proxyElement.length) === proxyElement) {\n" +
      '              return true;\n' +
      '            }\n' +
      '            return parsed.hostname === proxyElement;\n' +
      '          });\n' +
      '        }\n' +
      '        if (shouldProxy) {\n' +
      '          proxy = {\n' +
      '            host: parsedProxyUrl.hostname,\n' +
      '            port: parsedProxyUrl.port,\n' +
      '            protocol: parsedProxyUrl.protocol\n' +
      '          };\n' +
      '          if (parsedProxyUrl.auth) {\n' +
      "            var proxyUrlAuth = parsedProxyUrl.auth.split(':');\n" +
      '            proxy.auth = {\n' +
      '              username: proxyUrlAuth[0],\n' +
      '              password: proxyUrlAuth[1]\n' +
      '            };\n' +
      '          }\n' +
      '        }\n' +
      '      }\n' +
      '    }\n' +
      '    if (proxy) {\n' +
      "      options.headers.host = parsed.hostname + (parsed.port ? ':' + parsed.port : '');\n" +
      "      setProxy(options, proxy, protocol + '//' + parsed.hostname + (parsed.port ? ':' + parsed.port : '') + options.path);\n" +
      '    }\n' +
      '    var transport;\n' +
      '    var isHttpsProxy = isHttpsRequest && (proxy ? isHttps.test(proxy.protocol) : true);\n' +
      '    if (config.transport) {\n' +
      '      transport = config.transport;\n' +
      '    } else if (config.maxRedirects === 0) {\n' +
      '      transport = isHttpsProxy ? https : http;\n' +
      '    } else {\n' +
      '      if (config.maxRedirects) {\n' +
      '        options.maxRedirects = config.maxRedirects;\n' +
      '      }\n' +
      '      if (config.beforeRedirect) {\n' +
      '        options.beforeRedirect = config.beforeRedirect;\n' +
      '      }\n' +
      '      transport = isHttpsProxy ? httpsFollow : httpFollow;\n' +
      '    }\n' +
      '    if (config.maxBodyLength > -1) {\n' +
      '      options.maxBodyLength = config.maxBodyLength;\n' +
      '    }\n' +
      '    if (config.insecureHTTPParser) {\n' +
      '      options.insecureHTTPParser = config.insecureHTTPParser;\n' +
      '    }\n' +
      '\n' +
      '    // Create the request\n' +
      '    var req = transport.request(options, function handleResponse(res) {\n' +
      '      if (req.aborted) return;\n' +
      '\n' +
      '      // uncompress the response body transparently if required\n' +
      '      var stream = res;\n' +
      '\n' +
      '      // return the last request in case of redirects\n' +
      '      var lastRequest = res.req || req;\n' +
      '\n' +
      '      // if no content, is HEAD request or decompress disabled we should not decompress\n' +
      "      if (res.statusCode !== 204 && lastRequest.method !== 'HEAD' && config.decompress !== false) {\n" +
      "        switch (res.headers['content-encoding']) {\n" +
      '          /*eslint default-case:0*/\n' +
      "          case 'gzip':\n" +
      "          case 'compress':\n" +
      "          case 'deflate':\n" +
      '            // add the unzipper to the body stream processing pipeline\n' +
      '            stream = stream.pipe(zlib.createUnzip());\n' +
      '\n' +
      '            // remove the content-encoding in order to not confuse downstream operations\n' +
      "            delete res.headers['content-encoding'];\n" +
      '            break;\n' +
      '        }\n' +
      '      }\n' +
      '      var response = {\n' +
      '        status: res.statusCode,\n' +
      '        statusText: res.statusMessage,\n' +
      '        headers: res.headers,\n' +
      '        config: config,\n' +
      '        request: lastRequest\n' +
      '      };\n' +
      "      if (config.responseType === 'stream') {\n" +
      '        response.data = stream;\n' +
      '        settle(resolve, reject, response);\n' +
      '      } else {\n' +
      '        var responseBuffer = [];\n' +
      '        var totalResponseBytes = 0;\n' +
      "        stream.on('data', function handleStreamData(chunk) {\n" +
      '          responseBuffer.push(chunk);\n' +
      '          totalResponseBytes += chunk.length;\n' +
      '\n' +
      '          // make sure the content length is not over the maxContentLength if specified\n' +
      '          if (config.maxContentLength > -1 && totalResponseBytes > config.maxContentLength) {\n' +
      '            // stream.destoy() emit aborted event before calling reject() on Node.js v16\n' +
      '            rejected = true;\n' +
      '            stream.destroy();\n' +
      "            reject(new AxiosError('maxContentLength size of ' + config.maxContentLength + ' exceeded', AxiosError.ERR_BAD_RESPONSE, config, lastRequest));\n" +
      '          }\n' +
      '        });\n' +
      "        stream.on('aborted', function handlerStreamAborted() {\n" +
      '          if (rejected) {\n' +
      '            return;\n' +
      '          }\n' +
      '          stream.destroy();\n' +
      "          reject(new AxiosError('maxContentLength size of ' + config.maxContentLength + ' exceeded', AxiosError.ERR_BAD_RESPONSE, config, lastRequest));\n" +
      '        });\n' +
      "        stream.on('error', function handleStreamError(err) {\n" +
      '          if (req.aborted) return;\n' +
      '          reject(AxiosError.from(err, null, config, lastRequest));\n' +
      '        });\n' +
      "        stream.on('end', function handleStreamEnd() {\n" +
      '          try {\n' +
      '            var responseData = responseBuffer.length === 1 ? responseBuffer[0] : Buffer.concat(responseBuffer);\n' +
      "            if (config.responseType !== 'arraybuffer') {\n" +
      '              responseData = responseData.toString(config.responseEncoding);\n' +
      "              if (!config.responseEncoding || config.responseEncoding === 'utf8') {\n" +
      '                responseData = utils.stripBOM(responseData);\n' +
      '              }\n' +
      '            }\n' +
      '            response.data = responseData;\n' +
      '          } catch (err) {\n' +
      '            reject(AxiosError.from(err, null, config, response.request, response));\n' +
      '          }\n' +
      '          settle(resolve, reject, response);\n' +
      '        });\n' +
      '      }\n' +
      '    });\n' +
      '\n' +
      '    // Handle errors\n' +
      "    req.on('error', function handleRequestError(err) {\n" +
      '      // @todo remove\n' +
      '      // if (req.aborted && err.code !== AxiosError.ERR_FR_TOO_MANY_REDIRECTS) return;\n' +
      '      reject(AxiosError.from(err, null, config, req));\n' +
      '    });\n' +
      '\n' +
      ' '... 2346 more characters,
    transformRequest: [
      '[function] function transformRequest(data, headers) {\n' +
        "    normalizeHeaderName(headers, 'Accept');\n" +
        "    normalizeHeaderName(headers, 'Content-Type');\n" +
        '    if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {\n' +
        '      return data;\n' +
        '    }\n' +
        '    if (utils.isArrayBufferView(data)) {\n' +
        '      return data.buffer;\n' +
        '    }\n' +
        '    if (utils.isURLSearchParams(data)) {\n' +
        "      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');\n" +
        '      return data.toString();\n' +
        '    }\n' +
        '    var isObjectPayload = utils.isObject(data);\n' +
        "    var contentType = headers && headers['Content-Type'];\n" +
        '    var isFileList;\n' +
        "    if ((isFileList = utils.isFileList(data)) || isObjectPayload && contentType === 'multipart/form-data') {\n" +
        '      var _FormData = this.env && this.env.FormData;\n' +
        '      return toFormData(isFileList ? {\n' +
        "        'files[]': data\n" +
        '      } : data, _FormData && new _FormData());\n' +
        "    } else if (isObjectPayload || contentType === 'application/json') {\n" +
        "      setContentTypeIfUnset(headers, 'application/json');\n" +
        '      return stringifySafely(data);\n' +
        '    }\n' +
        '    return data;\n' +
        '  }'
    ],
    transformResponse: [
      '[function] function transformResponse(data) {\n' +
        '    var transitional = this.transitional || defaults.transitional;\n' +
        '    var silentJSONParsing = transitional && transitional.silentJSONParsing;\n' +
        '    var forcedJSONParsing = transitional && transitional.forcedJSONParsing;\n' +
        "    var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';\n" +
        '    if (strictJSONParsing || forcedJSONParsing && utils.isString(data) && data.length) {\n' +
        '      try {\n' +
        '        return JSON.parse(data);\n' +
        '      } catch (e) {\n' +
        '        if (strictJSONParsing) {\n' +
        "          if (e.name === 'SyntaxError') {\n" +
        '            throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);\n' +
        '          }\n' +
        '          throw e;\n' +
        '        }\n' +
        '      }\n' +
        '    }\n' +
        '    return data;\n' +
        '  }'
    ],
    timeout: 0,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
      FormData: '[function] function FormData(options) {\n' +
        '  if (!(this instanceof FormData)) {\n' +
        '    return new FormData(options);\n' +
        '  }\n' +
        '  this._overheadLength = 0;\n' +
        '  this._valueLength = 0;\n' +
        '  this._valuesToMeasure = [];\n' +
        '  CombinedStream.call(this);\n' +
        '  options = options || {};\n' +
        '  for (var option in options) {\n' +
        '    this[option] = options[option];\n' +
        '  }\n' +
        '}'
    },
    validateStatus: '[function] function validateStatus(status) {\n' +
      '    return status >= 200 && status < 300;\n' +
      '  }',
    headers: {
      Accept: 'application/json, text/plain, */*',
      Authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2MjQ1OSwiZXhwIjoxNjg5MTQ4ODU5fQ.dYlyGYgIl6bI4dTrsoT4_n_6nqUrclfqQi70C3SwhpU',
      'Content-Type': '',
      'User-Agent': 'axios/0.27.2'
    },
    url: 'https://connect-api.dev.insiteflow.io/v1/connect/container/config?organizationId=711729a8-a473-47bf-b27f-8abc1ee52281&containerType=desktop',
    method: 'get'
  },
  code: 'ERR_BAD_REQUEST',
  status: 401
}
[2023-07-11 13:32:19.418] [info]  Started /home/lnv-75/Documents/insiteFlow/desktop-app-container/test/out AES-128
[2023-07-11 13:32:20.557] [info]  In the catch  undefined
[2023-07-11 13:32:20.558] [error] Unhandled Exception {
  message: 'Request failed with status code 401',
  name: 'UnhandledRejection AxiosError',
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: '[function] function httpAdapter(config) {\n' +
      '  return new Promise(function dispatchHttpRequest(resolvePromise, rejectPromise) {\n' +
      '    var onCanceled;\n' +
      '    function done() {\n' +
      '      if (config.cancelToken) {\n' +
      '        config.cancelToken.unsubscribe(onCanceled);\n' +
      '      }\n' +
      '      if (config.signal) {\n' +
      "        config.signal.removeEventListener('abort', onCanceled);\n" +
      '      }\n' +
      '    }\n' +
      '    var resolve = function resolve(value) {\n' +
      '      done();\n' +
      '      resolvePromise(value);\n' +
      '    };\n' +
      '    var rejected = false;\n' +
      '    var reject = function reject(value) {\n' +
      '      done();\n' +
      '      rejected = true;\n' +
      '      rejectPromise(value);\n' +
      '    };\n' +
      '    var data = config.data;\n' +
      '    var headers = config.headers;\n' +
      '    var headerNames = {};\n' +
      '    Object.keys(headers).forEach(function storeLowerName(name) {\n' +
      '      headerNames[name.toLowerCase()] = name;\n' +
      '    });\n' +
      '\n' +
      '    // Set User-Agent (required by some servers)\n' +
      '    // See https://github.com/axios/axios/issues/69\n' +
      "    if ('user-agent' in headerNames) {\n" +
      '      // User-Agent is specified; handle case where no UA header is desired\n' +
      "      if (!headers[headerNames['user-agent']]) {\n" +
      "        delete headers[headerNames['user-agent']];\n" +
      '      }\n' +
      '      // Otherwise, use specified value\n' +
      '    } else {\n' +
      "      // Only set header if it hasn't been set in config\n" +
      "      headers['User-Agent'] = 'axios/' + VERSION;\n" +
      '    }\n' +
      '\n' +
      '    // support for https://www.npmjs.com/package/form-data api\n' +
      '    if (utils.isFormData(data) && utils.isFunction(data.getHeaders)) {\n' +
      '      Object.assign(headers, data.getHeaders());\n' +
      '    } else if (data && !utils.isStream(data)) {\n' +
      '      if (Buffer.isBuffer(data)) {\n' +
      '        // Nothing to do...\n' +
      '      } else if (utils.isArrayBuffer(data)) {\n' +
      '        data = Buffer.from(new Uint8Array(data));\n' +
      '      } else if (utils.isString(data)) {\n' +
      "        data = Buffer.from(data, 'utf-8');\n" +
      '      } else {\n' +
      "        return reject(new AxiosError('Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream', AxiosError.ERR_BAD_REQUEST, config));\n" +
      '      }\n' +
      '      if (config.maxBodyLength > -1 && data.length > config.maxBodyLength) {\n' +
      "        return reject(new AxiosError('Request body larger than maxBodyLength limit', AxiosError.ERR_BAD_REQUEST, config));\n" +
      '      }\n' +
      '\n' +
      '      // Add Content-Length header if data exists\n' +
      "      if (!headerNames['content-length']) {\n" +
      "        headers['Content-Length'] = data.length;\n" +
      '      }\n' +
      '    }\n' +
      '\n' +
      '    // HTTP basic authentication\n' +
      '    var auth = undefined;\n' +
      '    if (config.auth) {\n' +
      "      var username = config.auth.username || '';\n" +
      "      var password = config.auth.password || '';\n" +
      "      auth = username + ':' + password;\n" +
      '    }\n' +
      '\n' +
      '    // Parse url\n' +
      '    var fullPath = buildFullPath(config.baseURL, config.url);\n' +
      '    var parsed = url.parse(fullPath);\n' +
      '    var protocol = parsed.protocol || supportedProtocols[0];\n' +
      '    if (supportedProtocols.indexOf(protocol) === -1) {\n' +
      "      return reject(new AxiosError('Unsupported protocol ' + protocol, AxiosError.ERR_BAD_REQUEST, config));\n" +
      '    }\n' +
      '    if (!auth && parsed.auth) {\n' +
      "      var urlAuth = parsed.auth.split(':');\n" +
      "      var urlUsername = urlAuth[0] || '';\n" +
      "      var urlPassword = urlAuth[1] || '';\n" +
      "      auth = urlUsername + ':' + urlPassword;\n" +
      '    }\n' +
      '    if (auth && headerNames.authorization) {\n' +
      '      delete headers[headerNames.authorization];\n' +
      '    }\n' +
      '    var isHttpsRequest = isHttps.test(protocol);\n' +
      '    var agent = isHttpsRequest ? config.httpsAgent : config.httpAgent;\n' +
      '    try {\n' +
      "      buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\\?/, '');\n" +
      '    } catch (err) {\n' +
      '      var customErr = new Error(err.message);\n' +
      '      customErr.config = config;\n' +
      '      customErr.url = config.url;\n' +
      '      customErr.exists = true;\n' +
      '      reject(customErr);\n' +
      '    }\n' +
      '    var options = {\n' +
      "      path: buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\\?/, ''),\n" +
      '      method: config.method.toUpperCase(),\n' +
      '      headers: headers,\n' +
      '      agent: agent,\n' +
      '      agents: {\n' +
      '        http: config.httpAgent,\n' +
      '        https: config.httpsAgent\n' +
      '      },\n' +
      '      auth: auth\n' +
      '    };\n' +
      '    if (config.socketPath) {\n' +
      '      options.socketPath = config.socketPath;\n' +
      '    } else {\n' +
      '      options.hostname = parsed.hostname;\n' +
      '      options.port = parsed.port;\n' +
      '    }\n' +
      '    var proxy = config.proxy;\n' +
      '    if (!proxy && proxy !== false) {\n' +
      "      var proxyEnv = protocol.slice(0, -1) + '_proxy';\n" +
      '      var proxyUrl = process.env[proxyEnv] || process.env[proxyEnv.toUpperCase()];\n' +
      '      if (proxyUrl) {\n' +
      '        var parsedProxyUrl = url.parse(proxyUrl);\n' +
      '        var noProxyEnv = process.env.no_proxy || process.env.NO_PROXY;\n' +
      '        var shouldProxy = true;\n' +
      '        if (noProxyEnv) {\n' +
      "          var noProxy = noProxyEnv.split(',').map(function trim(s) {\n" +
      '            return s.trim();\n' +
      '          });\n' +
      '          shouldProxy = !noProxy.some(function proxyMatch(proxyElement) {\n' +
      '            if (!proxyElement) {\n' +
      '              return false;\n' +
      '            }\n' +
      "            if (proxyElement === '*') {\n" +
      '              return true;\n' +
      '            }\n' +
      "            if (proxyElement[0] === '.' && parsed.hostname.substr(parsed.hostname.length - proxyElement.length) === proxyElement) {\n" +
      '              return true;\n' +
      '            }\n' +
      '            return parsed.hostname === proxyElement;\n' +
      '          });\n' +
      '        }\n' +
      '        if (shouldProxy) {\n' +
      '          proxy = {\n' +
      '            host: parsedProxyUrl.hostname,\n' +
      '            port: parsedProxyUrl.port,\n' +
      '            protocol: parsedProxyUrl.protocol\n' +
      '          };\n' +
      '          if (parsedProxyUrl.auth) {\n' +
      "            var proxyUrlAuth = parsedProxyUrl.auth.split(':');\n" +
      '            proxy.auth = {\n' +
      '              username: proxyUrlAuth[0],\n' +
      '              password: proxyUrlAuth[1]\n' +
      '            };\n' +
      '          }\n' +
      '        }\n' +
      '      }\n' +
      '    }\n' +
      '    if (proxy) {\n' +
      "      options.headers.host = parsed.hostname + (parsed.port ? ':' + parsed.port : '');\n" +
      "      setProxy(options, proxy, protocol + '//' + parsed.hostname + (parsed.port ? ':' + parsed.port : '') + options.path);\n" +
      '    }\n' +
      '    var transport;\n' +
      '    var isHttpsProxy = isHttpsRequest && (proxy ? isHttps.test(proxy.protocol) : true);\n' +
      '    if (config.transport) {\n' +
      '      transport = config.transport;\n' +
      '    } else if (config.maxRedirects === 0) {\n' +
      '      transport = isHttpsProxy ? https : http;\n' +
      '    } else {\n' +
      '      if (config.maxRedirects) {\n' +
      '        options.maxRedirects = config.maxRedirects;\n' +
      '      }\n' +
      '      if (config.beforeRedirect) {\n' +
      '        options.beforeRedirect = config.beforeRedirect;\n' +
      '      }\n' +
      '      transport = isHttpsProxy ? httpsFollow : httpFollow;\n' +
      '    }\n' +
      '    if (config.maxBodyLength > -1) {\n' +
      '      options.maxBodyLength = config.maxBodyLength;\n' +
      '    }\n' +
      '    if (config.insecureHTTPParser) {\n' +
      '      options.insecureHTTPParser = config.insecureHTTPParser;\n' +
      '    }\n' +
      '\n' +
      '    // Create the request\n' +
      '    var req = transport.request(options, function handleResponse(res) {\n' +
      '      if (req.aborted) return;\n' +
      '\n' +
      '      // uncompress the response body transparently if required\n' +
      '      var stream = res;\n' +
      '\n' +
      '      // return the last request in case of redirects\n' +
      '      var lastRequest = res.req || req;\n' +
      '\n' +
      '      // if no content, is HEAD request or decompress disabled we should not decompress\n' +
      "      if (res.statusCode !== 204 && lastRequest.method !== 'HEAD' && config.decompress !== false) {\n" +
      "        switch (res.headers['content-encoding']) {\n" +
      '          /*eslint default-case:0*/\n' +
      "          case 'gzip':\n" +
      "          case 'compress':\n" +
      "          case 'deflate':\n" +
      '            // add the unzipper to the body stream processing pipeline\n' +
      '            stream = stream.pipe(zlib.createUnzip());\n' +
      '\n' +
      '            // remove the content-encoding in order to not confuse downstream operations\n' +
      "            delete res.headers['content-encoding'];\n" +
      '            break;\n' +
      '        }\n' +
      '      }\n' +
      '      var response = {\n' +
      '        status: res.statusCode,\n' +
      '        statusText: res.statusMessage,\n' +
      '        headers: res.headers,\n' +
      '        config: config,\n' +
      '        request: lastRequest\n' +
      '      };\n' +
      "      if (config.responseType === 'stream') {\n" +
      '        response.data = stream;\n' +
      '        settle(resolve, reject, response);\n' +
      '      } else {\n' +
      '        var responseBuffer = [];\n' +
      '        var totalResponseBytes = 0;\n' +
      "        stream.on('data', function handleStreamData(chunk) {\n" +
      '          responseBuffer.push(chunk);\n' +
      '          totalResponseBytes += chunk.length;\n' +
      '\n' +
      '          // make sure the content length is not over the maxContentLength if specified\n' +
      '          if (config.maxContentLength > -1 && totalResponseBytes > config.maxContentLength) {\n' +
      '            // stream.destoy() emit aborted event before calling reject() on Node.js v16\n' +
      '            rejected = true;\n' +
      '            stream.destroy();\n' +
      "            reject(new AxiosError('maxContentLength size of ' + config.maxContentLength + ' exceeded', AxiosError.ERR_BAD_RESPONSE, config, lastRequest));\n" +
      '          }\n' +
      '        });\n' +
      "        stream.on('aborted', function handlerStreamAborted() {\n" +
      '          if (rejected) {\n' +
      '            return;\n' +
      '          }\n' +
      '          stream.destroy();\n' +
      "          reject(new AxiosError('maxContentLength size of ' + config.maxContentLength + ' exceeded', AxiosError.ERR_BAD_RESPONSE, config, lastRequest));\n" +
      '        });\n' +
      "        stream.on('error', function handleStreamError(err) {\n" +
      '          if (req.aborted) return;\n' +
      '          reject(AxiosError.from(err, null, config, lastRequest));\n' +
      '        });\n' +
      "        stream.on('end', function handleStreamEnd() {\n" +
      '          try {\n' +
      '            var responseData = responseBuffer.length === 1 ? responseBuffer[0] : Buffer.concat(responseBuffer);\n' +
      "            if (config.responseType !== 'arraybuffer') {\n" +
      '              responseData = responseData.toString(config.responseEncoding);\n' +
      "              if (!config.responseEncoding || config.responseEncoding === 'utf8') {\n" +
      '                responseData = utils.stripBOM(responseData);\n' +
      '              }\n' +
      '            }\n' +
      '            response.data = responseData;\n' +
      '          } catch (err) {\n' +
      '            reject(AxiosError.from(err, null, config, response.request, response));\n' +
      '          }\n' +
      '          settle(resolve, reject, response);\n' +
      '        });\n' +
      '      }\n' +
      '    });\n' +
      '\n' +
      '    // Handle errors\n' +
      "    req.on('error', function handleRequestError(err) {\n" +
      '      // @todo remove\n' +
      '      // if (req.aborted && err.code !== AxiosError.ERR_FR_TOO_MANY_REDIRECTS) return;\n' +
      '      reject(AxiosError.from(err, null, config, req));\n' +
      '    });\n' +
      '\n' +
      ' '... 2346 more characters,
    transformRequest: [
      '[function] function transformRequest(data, headers) {\n' +
        "    normalizeHeaderName(headers, 'Accept');\n" +
        "    normalizeHeaderName(headers, 'Content-Type');\n" +
        '    if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {\n' +
        '      return data;\n' +
        '    }\n' +
        '    if (utils.isArrayBufferView(data)) {\n' +
        '      return data.buffer;\n' +
        '    }\n' +
        '    if (utils.isURLSearchParams(data)) {\n' +
        "      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');\n" +
        '      return data.toString();\n' +
        '    }\n' +
        '    var isObjectPayload = utils.isObject(data);\n' +
        "    var contentType = headers && headers['Content-Type'];\n" +
        '    var isFileList;\n' +
        "    if ((isFileList = utils.isFileList(data)) || isObjectPayload && contentType === 'multipart/form-data') {\n" +
        '      var _FormData = this.env && this.env.FormData;\n' +
        '      return toFormData(isFileList ? {\n' +
        "        'files[]': data\n" +
        '      } : data, _FormData && new _FormData());\n' +
        "    } else if (isObjectPayload || contentType === 'application/json') {\n" +
        "      setContentTypeIfUnset(headers, 'application/json');\n" +
        '      return stringifySafely(data);\n' +
        '    }\n' +
        '    return data;\n' +
        '  }'
    ],
    transformResponse: [
      '[function] function transformResponse(data) {\n' +
        '    var transitional = this.transitional || defaults.transitional;\n' +
        '    var silentJSONParsing = transitional && transitional.silentJSONParsing;\n' +
        '    var forcedJSONParsing = transitional && transitional.forcedJSONParsing;\n' +
        "    var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';\n" +
        '    if (strictJSONParsing || forcedJSONParsing && utils.isString(data) && data.length) {\n' +
        '      try {\n' +
        '        return JSON.parse(data);\n' +
        '      } catch (e) {\n' +
        '        if (strictJSONParsing) {\n' +
        "          if (e.name === 'SyntaxError') {\n" +
        '            throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);\n' +
        '          }\n' +
        '          throw e;\n' +
        '        }\n' +
        '      }\n' +
        '    }\n' +
        '    return data;\n' +
        '  }'
    ],
    timeout: 0,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
      FormData: '[function] function FormData(options) {\n' +
        '  if (!(this instanceof FormData)) {\n' +
        '    return new FormData(options);\n' +
        '  }\n' +
        '  this._overheadLength = 0;\n' +
        '  this._valueLength = 0;\n' +
        '  this._valuesToMeasure = [];\n' +
        '  CombinedStream.call(this);\n' +
        '  options = options || {};\n' +
        '  for (var option in options) {\n' +
        '    this[option] = options[option];\n' +
        '  }\n' +
        '}'
    },
    validateStatus: '[function] function validateStatus(status) {\n' +
      '    return status >= 200 && status < 300;\n' +
      '  }',
    headers: {
      Accept: 'application/json, text/plain, */*',
      Authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2MjUzOSwiZXhwIjoxNjg5MTQ4OTM5fQ.bHdIab-YYNIqMQQCI8uLOOljuVCJsN6UrO8OIT9j8Rw',
      'Content-Type': '',
      'User-Agent': 'axios/0.27.2'
    },
    url: 'https://connect-api.dev.insiteflow.io/v1/connect/container/config?organizationId=711729a8-a473-47bf-b27f-8abc1ee52281&containerType=desktop',
    method: 'get'
  },
  code: 'ERR_BAD_REQUEST',
  status: 401
}
[2023-07-11 13:32:25.273] [info]  In the catch  undefined
[2023-07-11 13:32:25.274] [error] Unhandled Exception {
  message: 'Request failed with status code 401',
  name: 'UnhandledRejection AxiosError',
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: '[function] function httpAdapter(config) {\n' +
      '  return new Promise(function dispatchHttpRequest(resolvePromise, rejectPromise) {\n' +
      '    var onCanceled;\n' +
      '    function done() {\n' +
      '      if (config.cancelToken) {\n' +
      '        config.cancelToken.unsubscribe(onCanceled);\n' +
      '      }\n' +
      '      if (config.signal) {\n' +
      "        config.signal.removeEventListener('abort', onCanceled);\n" +
      '      }\n' +
      '    }\n' +
      '    var resolve = function resolve(value) {\n' +
      '      done();\n' +
      '      resolvePromise(value);\n' +
      '    };\n' +
      '    var rejected = false;\n' +
      '    var reject = function reject(value) {\n' +
      '      done();\n' +
      '      rejected = true;\n' +
      '      rejectPromise(value);\n' +
      '    };\n' +
      '    var data = config.data;\n' +
      '    var headers = config.headers;\n' +
      '    var headerNames = {};\n' +
      '    Object.keys(headers).forEach(function storeLowerName(name) {\n' +
      '      headerNames[name.toLowerCase()] = name;\n' +
      '    });\n' +
      '\n' +
      '    // Set User-Agent (required by some servers)\n' +
      '    // See https://github.com/axios/axios/issues/69\n' +
      "    if ('user-agent' in headerNames) {\n" +
      '      // User-Agent is specified; handle case where no UA header is desired\n' +
      "      if (!headers[headerNames['user-agent']]) {\n" +
      "        delete headers[headerNames['user-agent']];\n" +
      '      }\n' +
      '      // Otherwise, use specified value\n' +
      '    } else {\n' +
      "      // Only set header if it hasn't been set in config\n" +
      "      headers['User-Agent'] = 'axios/' + VERSION;\n" +
      '    }\n' +
      '\n' +
      '    // support for https://www.npmjs.com/package/form-data api\n' +
      '    if (utils.isFormData(data) && utils.isFunction(data.getHeaders)) {\n' +
      '      Object.assign(headers, data.getHeaders());\n' +
      '    } else if (data && !utils.isStream(data)) {\n' +
      '      if (Buffer.isBuffer(data)) {\n' +
      '        // Nothing to do...\n' +
      '      } else if (utils.isArrayBuffer(data)) {\n' +
      '        data = Buffer.from(new Uint8Array(data));\n' +
      '      } else if (utils.isString(data)) {\n' +
      "        data = Buffer.from(data, 'utf-8');\n" +
      '      } else {\n' +
      "        return reject(new AxiosError('Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream', AxiosError.ERR_BAD_REQUEST, config));\n" +
      '      }\n' +
      '      if (config.maxBodyLength > -1 && data.length > config.maxBodyLength) {\n' +
      "        return reject(new AxiosError('Request body larger than maxBodyLength limit', AxiosError.ERR_BAD_REQUEST, config));\n" +
      '      }\n' +
      '\n' +
      '      // Add Content-Length header if data exists\n' +
      "      if (!headerNames['content-length']) {\n" +
      "        headers['Content-Length'] = data.length;\n" +
      '      }\n' +
      '    }\n' +
      '\n' +
      '    // HTTP basic authentication\n' +
      '    var auth = undefined;\n' +
      '    if (config.auth) {\n' +
      "      var username = config.auth.username || '';\n" +
      "      var password = config.auth.password || '';\n" +
      "      auth = username + ':' + password;\n" +
      '    }\n' +
      '\n' +
      '    // Parse url\n' +
      '    var fullPath = buildFullPath(config.baseURL, config.url);\n' +
      '    var parsed = url.parse(fullPath);\n' +
      '    var protocol = parsed.protocol || supportedProtocols[0];\n' +
      '    if (supportedProtocols.indexOf(protocol) === -1) {\n' +
      "      return reject(new AxiosError('Unsupported protocol ' + protocol, AxiosError.ERR_BAD_REQUEST, config));\n" +
      '    }\n' +
      '    if (!auth && parsed.auth) {\n' +
      "      var urlAuth = parsed.auth.split(':');\n" +
      "      var urlUsername = urlAuth[0] || '';\n" +
      "      var urlPassword = urlAuth[1] || '';\n" +
      "      auth = urlUsername + ':' + urlPassword;\n" +
      '    }\n' +
      '    if (auth && headerNames.authorization) {\n' +
      '      delete headers[headerNames.authorization];\n' +
      '    }\n' +
      '    var isHttpsRequest = isHttps.test(protocol);\n' +
      '    var agent = isHttpsRequest ? config.httpsAgent : config.httpAgent;\n' +
      '    try {\n' +
      "      buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\\?/, '');\n" +
      '    } catch (err) {\n' +
      '      var customErr = new Error(err.message);\n' +
      '      customErr.config = config;\n' +
      '      customErr.url = config.url;\n' +
      '      customErr.exists = true;\n' +
      '      reject(customErr);\n' +
      '    }\n' +
      '    var options = {\n' +
      "      path: buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\\?/, ''),\n" +
      '      method: config.method.toUpperCase(),\n' +
      '      headers: headers,\n' +
      '      agent: agent,\n' +
      '      agents: {\n' +
      '        http: config.httpAgent,\n' +
      '        https: config.httpsAgent\n' +
      '      },\n' +
      '      auth: auth\n' +
      '    };\n' +
      '    if (config.socketPath) {\n' +
      '      options.socketPath = config.socketPath;\n' +
      '    } else {\n' +
      '      options.hostname = parsed.hostname;\n' +
      '      options.port = parsed.port;\n' +
      '    }\n' +
      '    var proxy = config.proxy;\n' +
      '    if (!proxy && proxy !== false) {\n' +
      "      var proxyEnv = protocol.slice(0, -1) + '_proxy';\n" +
      '      var proxyUrl = process.env[proxyEnv] || process.env[proxyEnv.toUpperCase()];\n' +
      '      if (proxyUrl) {\n' +
      '        var parsedProxyUrl = url.parse(proxyUrl);\n' +
      '        var noProxyEnv = process.env.no_proxy || process.env.NO_PROXY;\n' +
      '        var shouldProxy = true;\n' +
      '        if (noProxyEnv) {\n' +
      "          var noProxy = noProxyEnv.split(',').map(function trim(s) {\n" +
      '            return s.trim();\n' +
      '          });\n' +
      '          shouldProxy = !noProxy.some(function proxyMatch(proxyElement) {\n' +
      '            if (!proxyElement) {\n' +
      '              return false;\n' +
      '            }\n' +
      "            if (proxyElement === '*') {\n" +
      '              return true;\n' +
      '            }\n' +
      "            if (proxyElement[0] === '.' && parsed.hostname.substr(parsed.hostname.length - proxyElement.length) === proxyElement) {\n" +
      '              return true;\n' +
      '            }\n' +
      '            return parsed.hostname === proxyElement;\n' +
      '          });\n' +
      '        }\n' +
      '        if (shouldProxy) {\n' +
      '          proxy = {\n' +
      '            host: parsedProxyUrl.hostname,\n' +
      '            port: parsedProxyUrl.port,\n' +
      '            protocol: parsedProxyUrl.protocol\n' +
      '          };\n' +
      '          if (parsedProxyUrl.auth) {\n' +
      "            var proxyUrlAuth = parsedProxyUrl.auth.split(':');\n" +
      '            proxy.auth = {\n' +
      '              username: proxyUrlAuth[0],\n' +
      '              password: proxyUrlAuth[1]\n' +
      '            };\n' +
      '          }\n' +
      '        }\n' +
      '      }\n' +
      '    }\n' +
      '    if (proxy) {\n' +
      "      options.headers.host = parsed.hostname + (parsed.port ? ':' + parsed.port : '');\n" +
      "      setProxy(options, proxy, protocol + '//' + parsed.hostname + (parsed.port ? ':' + parsed.port : '') + options.path);\n" +
      '    }\n' +
      '    var transport;\n' +
      '    var isHttpsProxy = isHttpsRequest && (proxy ? isHttps.test(proxy.protocol) : true);\n' +
      '    if (config.transport) {\n' +
      '      transport = config.transport;\n' +
      '    } else if (config.maxRedirects === 0) {\n' +
      '      transport = isHttpsProxy ? https : http;\n' +
      '    } else {\n' +
      '      if (config.maxRedirects) {\n' +
      '        options.maxRedirects = config.maxRedirects;\n' +
      '      }\n' +
      '      if (config.beforeRedirect) {\n' +
      '        options.beforeRedirect = config.beforeRedirect;\n' +
      '      }\n' +
      '      transport = isHttpsProxy ? httpsFollow : httpFollow;\n' +
      '    }\n' +
      '    if (config.maxBodyLength > -1) {\n' +
      '      options.maxBodyLength = config.maxBodyLength;\n' +
      '    }\n' +
      '    if (config.insecureHTTPParser) {\n' +
      '      options.insecureHTTPParser = config.insecureHTTPParser;\n' +
      '    }\n' +
      '\n' +
      '    // Create the request\n' +
      '    var req = transport.request(options, function handleResponse(res) {\n' +
      '      if (req.aborted) return;\n' +
      '\n' +
      '      // uncompress the response body transparently if required\n' +
      '      var stream = res;\n' +
      '\n' +
      '      // return the last request in case of redirects\n' +
      '      var lastRequest = res.req || req;\n' +
      '\n' +
      '      // if no content, is HEAD request or decompress disabled we should not decompress\n' +
      "      if (res.statusCode !== 204 && lastRequest.method !== 'HEAD' && config.decompress !== false) {\n" +
      "        switch (res.headers['content-encoding']) {\n" +
      '          /*eslint default-case:0*/\n' +
      "          case 'gzip':\n" +
      "          case 'compress':\n" +
      "          case 'deflate':\n" +
      '            // add the unzipper to the body stream processing pipeline\n' +
      '            stream = stream.pipe(zlib.createUnzip());\n' +
      '\n' +
      '            // remove the content-encoding in order to not confuse downstream operations\n' +
      "            delete res.headers['content-encoding'];\n" +
      '            break;\n' +
      '        }\n' +
      '      }\n' +
      '      var response = {\n' +
      '        status: res.statusCode,\n' +
      '        statusText: res.statusMessage,\n' +
      '        headers: res.headers,\n' +
      '        config: config,\n' +
      '        request: lastRequest\n' +
      '      };\n' +
      "      if (config.responseType === 'stream') {\n" +
      '        response.data = stream;\n' +
      '        settle(resolve, reject, response);\n' +
      '      } else {\n' +
      '        var responseBuffer = [];\n' +
      '        var totalResponseBytes = 0;\n' +
      "        stream.on('data', function handleStreamData(chunk) {\n" +
      '          responseBuffer.push(chunk);\n' +
      '          totalResponseBytes += chunk.length;\n' +
      '\n' +
      '          // make sure the content length is not over the maxContentLength if specified\n' +
      '          if (config.maxContentLength > -1 && totalResponseBytes > config.maxContentLength) {\n' +
      '            // stream.destoy() emit aborted event before calling reject() on Node.js v16\n' +
      '            rejected = true;\n' +
      '            stream.destroy();\n' +
      "            reject(new AxiosError('maxContentLength size of ' + config.maxContentLength + ' exceeded', AxiosError.ERR_BAD_RESPONSE, config, lastRequest));\n" +
      '          }\n' +
      '        });\n' +
      "        stream.on('aborted', function handlerStreamAborted() {\n" +
      '          if (rejected) {\n' +
      '            return;\n' +
      '          }\n' +
      '          stream.destroy();\n' +
      "          reject(new AxiosError('maxContentLength size of ' + config.maxContentLength + ' exceeded', AxiosError.ERR_BAD_RESPONSE, config, lastRequest));\n" +
      '        });\n' +
      "        stream.on('error', function handleStreamError(err) {\n" +
      '          if (req.aborted) return;\n' +
      '          reject(AxiosError.from(err, null, config, lastRequest));\n' +
      '        });\n' +
      "        stream.on('end', function handleStreamEnd() {\n" +
      '          try {\n' +
      '            var responseData = responseBuffer.length === 1 ? responseBuffer[0] : Buffer.concat(responseBuffer);\n' +
      "            if (config.responseType !== 'arraybuffer') {\n" +
      '              responseData = responseData.toString(config.responseEncoding);\n' +
      "              if (!config.responseEncoding || config.responseEncoding === 'utf8') {\n" +
      '                responseData = utils.stripBOM(responseData);\n' +
      '              }\n' +
      '            }\n' +
      '            response.data = responseData;\n' +
      '          } catch (err) {\n' +
      '            reject(AxiosError.from(err, null, config, response.request, response));\n' +
      '          }\n' +
      '          settle(resolve, reject, response);\n' +
      '        });\n' +
      '      }\n' +
      '    });\n' +
      '\n' +
      '    // Handle errors\n' +
      "    req.on('error', function handleRequestError(err) {\n" +
      '      // @todo remove\n' +
      '      // if (req.aborted && err.code !== AxiosError.ERR_FR_TOO_MANY_REDIRECTS) return;\n' +
      '      reject(AxiosError.from(err, null, config, req));\n' +
      '    });\n' +
      '\n' +
      ' '... 2346 more characters,
    transformRequest: [
      '[function] function transformRequest(data, headers) {\n' +
        "    normalizeHeaderName(headers, 'Accept');\n" +
        "    normalizeHeaderName(headers, 'Content-Type');\n" +
        '    if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {\n' +
        '      return data;\n' +
        '    }\n' +
        '    if (utils.isArrayBufferView(data)) {\n' +
        '      return data.buffer;\n' +
        '    }\n' +
        '    if (utils.isURLSearchParams(data)) {\n' +
        "      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');\n" +
        '      return data.toString();\n' +
        '    }\n' +
        '    var isObjectPayload = utils.isObject(data);\n' +
        "    var contentType = headers && headers['Content-Type'];\n" +
        '    var isFileList;\n' +
        "    if ((isFileList = utils.isFileList(data)) || isObjectPayload && contentType === 'multipart/form-data') {\n" +
        '      var _FormData = this.env && this.env.FormData;\n' +
        '      return toFormData(isFileList ? {\n' +
        "        'files[]': data\n" +
        '      } : data, _FormData && new _FormData());\n' +
        "    } else if (isObjectPayload || contentType === 'application/json') {\n" +
        "      setContentTypeIfUnset(headers, 'application/json');\n" +
        '      return stringifySafely(data);\n' +
        '    }\n' +
        '    return data;\n' +
        '  }'
    ],
    transformResponse: [
      '[function] function transformResponse(data) {\n' +
        '    var transitional = this.transitional || defaults.transitional;\n' +
        '    var silentJSONParsing = transitional && transitional.silentJSONParsing;\n' +
        '    var forcedJSONParsing = transitional && transitional.forcedJSONParsing;\n' +
        "    var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';\n" +
        '    if (strictJSONParsing || forcedJSONParsing && utils.isString(data) && data.length) {\n' +
        '      try {\n' +
        '        return JSON.parse(data);\n' +
        '      } catch (e) {\n' +
        '        if (strictJSONParsing) {\n' +
        "          if (e.name === 'SyntaxError') {\n" +
        '            throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);\n' +
        '          }\n' +
        '          throw e;\n' +
        '        }\n' +
        '      }\n' +
        '    }\n' +
        '    return data;\n' +
        '  }'
    ],
    timeout: 0,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
      FormData: '[function] function FormData(options) {\n' +
        '  if (!(this instanceof FormData)) {\n' +
        '    return new FormData(options);\n' +
        '  }\n' +
        '  this._overheadLength = 0;\n' +
        '  this._valueLength = 0;\n' +
        '  this._valuesToMeasure = [];\n' +
        '  CombinedStream.call(this);\n' +
        '  options = options || {};\n' +
        '  for (var option in options) {\n' +
        '    this[option] = options[option];\n' +
        '  }\n' +
        '}'
    },
    validateStatus: '[function] function validateStatus(status) {\n' +
      '    return status >= 200 && status < 300;\n' +
      '  }',
    headers: {
      Accept: 'application/json, text/plain, */*',
      Authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2MjUzOSwiZXhwIjoxNjg5MTQ4OTM5fQ.bHdIab-YYNIqMQQCI8uLOOljuVCJsN6UrO8OIT9j8Rw',
      'Content-Type': '',
      'User-Agent': 'axios/0.27.2'
    },
    url: 'https://connect-api.dev.insiteflow.io/v1/connect/container/config?organizationId=711729a8-a473-47bf-b27f-8abc1ee52281&containerType=desktop',
    method: 'get'
  },
  code: 'ERR_BAD_REQUEST',
  status: 401
}
[2023-07-11 13:32:30.298] [info]  In the catch  undefined
[2023-07-11 13:32:30.299] [error] Unhandled Exception {
  message: 'Request failed with status code 401',
  name: 'UnhandledRejection AxiosError',
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: '[function] function httpAdapter(config) {\n' +
      '  return new Promise(function dispatchHttpRequest(resolvePromise, rejectPromise) {\n' +
      '    var onCanceled;\n' +
      '    function done() {\n' +
      '      if (config.cancelToken) {\n' +
      '        config.cancelToken.unsubscribe(onCanceled);\n' +
      '      }\n' +
      '      if (config.signal) {\n' +
      "        config.signal.removeEventListener('abort', onCanceled);\n" +
      '      }\n' +
      '    }\n' +
      '    var resolve = function resolve(value) {\n' +
      '      done();\n' +
      '      resolvePromise(value);\n' +
      '    };\n' +
      '    var rejected = false;\n' +
      '    var reject = function reject(value) {\n' +
      '      done();\n' +
      '      rejected = true;\n' +
      '      rejectPromise(value);\n' +
      '    };\n' +
      '    var data = config.data;\n' +
      '    var headers = config.headers;\n' +
      '    var headerNames = {};\n' +
      '    Object.keys(headers).forEach(function storeLowerName(name) {\n' +
      '      headerNames[name.toLowerCase()] = name;\n' +
      '    });\n' +
      '\n' +
      '    // Set User-Agent (required by some servers)\n' +
      '    // See https://github.com/axios/axios/issues/69\n' +
      "    if ('user-agent' in headerNames) {\n" +
      '      // User-Agent is specified; handle case where no UA header is desired\n' +
      "      if (!headers[headerNames['user-agent']]) {\n" +
      "        delete headers[headerNames['user-agent']];\n" +
      '      }\n' +
      '      // Otherwise, use specified value\n' +
      '    } else {\n' +
      "      // Only set header if it hasn't been set in config\n" +
      "      headers['User-Agent'] = 'axios/' + VERSION;\n" +
      '    }\n' +
      '\n' +
      '    // support for https://www.npmjs.com/package/form-data api\n' +
      '    if (utils.isFormData(data) && utils.isFunction(data.getHeaders)) {\n' +
      '      Object.assign(headers, data.getHeaders());\n' +
      '    } else if (data && !utils.isStream(data)) {\n' +
      '      if (Buffer.isBuffer(data)) {\n' +
      '        // Nothing to do...\n' +
      '      } else if (utils.isArrayBuffer(data)) {\n' +
      '        data = Buffer.from(new Uint8Array(data));\n' +
      '      } else if (utils.isString(data)) {\n' +
      "        data = Buffer.from(data, 'utf-8');\n" +
      '      } else {\n' +
      "        return reject(new AxiosError('Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream', AxiosError.ERR_BAD_REQUEST, config));\n" +
      '      }\n' +
      '      if (config.maxBodyLength > -1 && data.length > config.maxBodyLength) {\n' +
      "        return reject(new AxiosError('Request body larger than maxBodyLength limit', AxiosError.ERR_BAD_REQUEST, config));\n" +
      '      }\n' +
      '\n' +
      '      // Add Content-Length header if data exists\n' +
      "      if (!headerNames['content-length']) {\n" +
      "        headers['Content-Length'] = data.length;\n" +
      '      }\n' +
      '    }\n' +
      '\n' +
      '    // HTTP basic authentication\n' +
      '    var auth = undefined;\n' +
      '    if (config.auth) {\n' +
      "      var username = config.auth.username || '';\n" +
      "      var password = config.auth.password || '';\n" +
      "      auth = username + ':' + password;\n" +
      '    }\n' +
      '\n' +
      '    // Parse url\n' +
      '    var fullPath = buildFullPath(config.baseURL, config.url);\n' +
      '    var parsed = url.parse(fullPath);\n' +
      '    var protocol = parsed.protocol || supportedProtocols[0];\n' +
      '    if (supportedProtocols.indexOf(protocol) === -1) {\n' +
      "      return reject(new AxiosError('Unsupported protocol ' + protocol, AxiosError.ERR_BAD_REQUEST, config));\n" +
      '    }\n' +
      '    if (!auth && parsed.auth) {\n' +
      "      var urlAuth = parsed.auth.split(':');\n" +
      "      var urlUsername = urlAuth[0] || '';\n" +
      "      var urlPassword = urlAuth[1] || '';\n" +
      "      auth = urlUsername + ':' + urlPassword;\n" +
      '    }\n' +
      '    if (auth && headerNames.authorization) {\n' +
      '      delete headers[headerNames.authorization];\n' +
      '    }\n' +
      '    var isHttpsRequest = isHttps.test(protocol);\n' +
      '    var agent = isHttpsRequest ? config.httpsAgent : config.httpAgent;\n' +
      '    try {\n' +
      "      buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\\?/, '');\n" +
      '    } catch (err) {\n' +
      '      var customErr = new Error(err.message);\n' +
      '      customErr.config = config;\n' +
      '      customErr.url = config.url;\n' +
      '      customErr.exists = true;\n' +
      '      reject(customErr);\n' +
      '    }\n' +
      '    var options = {\n' +
      "      path: buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\\?/, ''),\n" +
      '      method: config.method.toUpperCase(),\n' +
      '      headers: headers,\n' +
      '      agent: agent,\n' +
      '      agents: {\n' +
      '        http: config.httpAgent,\n' +
      '        https: config.httpsAgent\n' +
      '      },\n' +
      '      auth: auth\n' +
      '    };\n' +
      '    if (config.socketPath) {\n' +
      '      options.socketPath = config.socketPath;\n' +
      '    } else {\n' +
      '      options.hostname = parsed.hostname;\n' +
      '      options.port = parsed.port;\n' +
      '    }\n' +
      '    var proxy = config.proxy;\n' +
      '    if (!proxy && proxy !== false) {\n' +
      "      var proxyEnv = protocol.slice(0, -1) + '_proxy';\n" +
      '      var proxyUrl = process.env[proxyEnv] || process.env[proxyEnv.toUpperCase()];\n' +
      '      if (proxyUrl) {\n' +
      '        var parsedProxyUrl = url.parse(proxyUrl);\n' +
      '        var noProxyEnv = process.env.no_proxy || process.env.NO_PROXY;\n' +
      '        var shouldProxy = true;\n' +
      '        if (noProxyEnv) {\n' +
      "          var noProxy = noProxyEnv.split(',').map(function trim(s) {\n" +
      '            return s.trim();\n' +
      '          });\n' +
      '          shouldProxy = !noProxy.some(function proxyMatch(proxyElement) {\n' +
      '            if (!proxyElement) {\n' +
      '              return false;\n' +
      '            }\n' +
      "            if (proxyElement === '*') {\n" +
      '              return true;\n' +
      '            }\n' +
      "            if (proxyElement[0] === '.' && parsed.hostname.substr(parsed.hostname.length - proxyElement.length) === proxyElement) {\n" +
      '              return true;\n' +
      '            }\n' +
      '            return parsed.hostname === proxyElement;\n' +
      '          });\n' +
      '        }\n' +
      '        if (shouldProxy) {\n' +
      '          proxy = {\n' +
      '            host: parsedProxyUrl.hostname,\n' +
      '            port: parsedProxyUrl.port,\n' +
      '            protocol: parsedProxyUrl.protocol\n' +
      '          };\n' +
      '          if (parsedProxyUrl.auth) {\n' +
      "            var proxyUrlAuth = parsedProxyUrl.auth.split(':');\n" +
      '            proxy.auth = {\n' +
      '              username: proxyUrlAuth[0],\n' +
      '              password: proxyUrlAuth[1]\n' +
      '            };\n' +
      '          }\n' +
      '        }\n' +
      '      }\n' +
      '    }\n' +
      '    if (proxy) {\n' +
      "      options.headers.host = parsed.hostname + (parsed.port ? ':' + parsed.port : '');\n" +
      "      setProxy(options, proxy, protocol + '//' + parsed.hostname + (parsed.port ? ':' + parsed.port : '') + options.path);\n" +
      '    }\n' +
      '    var transport;\n' +
      '    var isHttpsProxy = isHttpsRequest && (proxy ? isHttps.test(proxy.protocol) : true);\n' +
      '    if (config.transport) {\n' +
      '      transport = config.transport;\n' +
      '    } else if (config.maxRedirects === 0) {\n' +
      '      transport = isHttpsProxy ? https : http;\n' +
      '    } else {\n' +
      '      if (config.maxRedirects) {\n' +
      '        options.maxRedirects = config.maxRedirects;\n' +
      '      }\n' +
      '      if (config.beforeRedirect) {\n' +
      '        options.beforeRedirect = config.beforeRedirect;\n' +
      '      }\n' +
      '      transport = isHttpsProxy ? httpsFollow : httpFollow;\n' +
      '    }\n' +
      '    if (config.maxBodyLength > -1) {\n' +
      '      options.maxBodyLength = config.maxBodyLength;\n' +
      '    }\n' +
      '    if (config.insecureHTTPParser) {\n' +
      '      options.insecureHTTPParser = config.insecureHTTPParser;\n' +
      '    }\n' +
      '\n' +
      '    // Create the request\n' +
      '    var req = transport.request(options, function handleResponse(res) {\n' +
      '      if (req.aborted) return;\n' +
      '\n' +
      '      // uncompress the response body transparently if required\n' +
      '      var stream = res;\n' +
      '\n' +
      '      // return the last request in case of redirects\n' +
      '      var lastRequest = res.req || req;\n' +
      '\n' +
      '      // if no content, is HEAD request or decompress disabled we should not decompress\n' +
      "      if (res.statusCode !== 204 && lastRequest.method !== 'HEAD' && config.decompress !== false) {\n" +
      "        switch (res.headers['content-encoding']) {\n" +
      '          /*eslint default-case:0*/\n' +
      "          case 'gzip':\n" +
      "          case 'compress':\n" +
      "          case 'deflate':\n" +
      '            // add the unzipper to the body stream processing pipeline\n' +
      '            stream = stream.pipe(zlib.createUnzip());\n' +
      '\n' +
      '            // remove the content-encoding in order to not confuse downstream operations\n' +
      "            delete res.headers['content-encoding'];\n" +
      '            break;\n' +
      '        }\n' +
      '      }\n' +
      '      var response = {\n' +
      '        status: res.statusCode,\n' +
      '        statusText: res.statusMessage,\n' +
      '        headers: res.headers,\n' +
      '        config: config,\n' +
      '        request: lastRequest\n' +
      '      };\n' +
      "      if (config.responseType === 'stream') {\n" +
      '        response.data = stream;\n' +
      '        settle(resolve, reject, response);\n' +
      '      } else {\n' +
      '        var responseBuffer = [];\n' +
      '        var totalResponseBytes = 0;\n' +
      "        stream.on('data', function handleStreamData(chunk) {\n" +
      '          responseBuffer.push(chunk);\n' +
      '          totalResponseBytes += chunk.length;\n' +
      '\n' +
      '          // make sure the content length is not over the maxContentLength if specified\n' +
      '          if (config.maxContentLength > -1 && totalResponseBytes > config.maxContentLength) {\n' +
      '            // stream.destoy() emit aborted event before calling reject() on Node.js v16\n' +
      '            rejected = true;\n' +
      '            stream.destroy();\n' +
      "            reject(new AxiosError('maxContentLength size of ' + config.maxContentLength + ' exceeded', AxiosError.ERR_BAD_RESPONSE, config, lastRequest));\n" +
      '          }\n' +
      '        });\n' +
      "        stream.on('aborted', function handlerStreamAborted() {\n" +
      '          if (rejected) {\n' +
      '            return;\n' +
      '          }\n' +
      '          stream.destroy();\n' +
      "          reject(new AxiosError('maxContentLength size of ' + config.maxContentLength + ' exceeded', AxiosError.ERR_BAD_RESPONSE, config, lastRequest));\n" +
      '        });\n' +
      "        stream.on('error', function handleStreamError(err) {\n" +
      '          if (req.aborted) return;\n' +
      '          reject(AxiosError.from(err, null, config, lastRequest));\n' +
      '        });\n' +
      "        stream.on('end', function handleStreamEnd() {\n" +
      '          try {\n' +
      '            var responseData = responseBuffer.length === 1 ? responseBuffer[0] : Buffer.concat(responseBuffer);\n' +
      "            if (config.responseType !== 'arraybuffer') {\n" +
      '              responseData = responseData.toString(config.responseEncoding);\n' +
      "              if (!config.responseEncoding || config.responseEncoding === 'utf8') {\n" +
      '                responseData = utils.stripBOM(responseData);\n' +
      '              }\n' +
      '            }\n' +
      '            response.data = responseData;\n' +
      '          } catch (err) {\n' +
      '            reject(AxiosError.from(err, null, config, response.request, response));\n' +
      '          }\n' +
      '          settle(resolve, reject, response);\n' +
      '        });\n' +
      '      }\n' +
      '    });\n' +
      '\n' +
      '    // Handle errors\n' +
      "    req.on('error', function handleRequestError(err) {\n" +
      '      // @todo remove\n' +
      '      // if (req.aborted && err.code !== AxiosError.ERR_FR_TOO_MANY_REDIRECTS) return;\n' +
      '      reject(AxiosError.from(err, null, config, req));\n' +
      '    });\n' +
      '\n' +
      ' '... 2346 more characters,
    transformRequest: [
      '[function] function transformRequest(data, headers) {\n' +
        "    normalizeHeaderName(headers, 'Accept');\n" +
        "    normalizeHeaderName(headers, 'Content-Type');\n" +
        '    if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {\n' +
        '      return data;\n' +
        '    }\n' +
        '    if (utils.isArrayBufferView(data)) {\n' +
        '      return data.buffer;\n' +
        '    }\n' +
        '    if (utils.isURLSearchParams(data)) {\n' +
        "      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');\n" +
        '      return data.toString();\n' +
        '    }\n' +
        '    var isObjectPayload = utils.isObject(data);\n' +
        "    var contentType = headers && headers['Content-Type'];\n" +
        '    var isFileList;\n' +
        "    if ((isFileList = utils.isFileList(data)) || isObjectPayload && contentType === 'multipart/form-data') {\n" +
        '      var _FormData = this.env && this.env.FormData;\n' +
        '      return toFormData(isFileList ? {\n' +
        "        'files[]': data\n" +
        '      } : data, _FormData && new _FormData());\n' +
        "    } else if (isObjectPayload || contentType === 'application/json') {\n" +
        "      setContentTypeIfUnset(headers, 'application/json');\n" +
        '      return stringifySafely(data);\n' +
        '    }\n' +
        '    return data;\n' +
        '  }'
    ],
    transformResponse: [
      '[function] function transformResponse(data) {\n' +
        '    var transitional = this.transitional || defaults.transitional;\n' +
        '    var silentJSONParsing = transitional && transitional.silentJSONParsing;\n' +
        '    var forcedJSONParsing = transitional && transitional.forcedJSONParsing;\n' +
        "    var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';\n" +
        '    if (strictJSONParsing || forcedJSONParsing && utils.isString(data) && data.length) {\n' +
        '      try {\n' +
        '        return JSON.parse(data);\n' +
        '      } catch (e) {\n' +
        '        if (strictJSONParsing) {\n' +
        "          if (e.name === 'SyntaxError') {\n" +
        '            throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);\n' +
        '          }\n' +
        '          throw e;\n' +
        '        }\n' +
        '      }\n' +
        '    }\n' +
        '    return data;\n' +
        '  }'
    ],
    timeout: 0,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
      FormData: '[function] function FormData(options) {\n' +
        '  if (!(this instanceof FormData)) {\n' +
        '    return new FormData(options);\n' +
        '  }\n' +
        '  this._overheadLength = 0;\n' +
        '  this._valueLength = 0;\n' +
        '  this._valuesToMeasure = [];\n' +
        '  CombinedStream.call(this);\n' +
        '  options = options || {};\n' +
        '  for (var option in options) {\n' +
        '    this[option] = options[option];\n' +
        '  }\n' +
        '}'
    },
    validateStatus: '[function] function validateStatus(status) {\n' +
      '    return status >= 200 && status < 300;\n' +
      '  }',
    headers: {
      Accept: 'application/json, text/plain, */*',
      Authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2MjUzOSwiZXhwIjoxNjg5MTQ4OTM5fQ.bHdIab-YYNIqMQQCI8uLOOljuVCJsN6UrO8OIT9j8Rw',
      'Content-Type': '',
      'User-Agent': 'axios/0.27.2'
    },
    url: 'https://connect-api.dev.insiteflow.io/v1/connect/container/config?organizationId=711729a8-a473-47bf-b27f-8abc1ee52281&containerType=desktop',
    method: 'get'
  },
  code: 'ERR_BAD_REQUEST',
  status: 401
}
[2023-07-11 13:32:35.201] [info]  In the catch  undefined
[2023-07-11 13:32:35.201] [error] Unhandled Exception {
  message: 'Request failed with status code 401',
  name: 'UnhandledRejection AxiosError',
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: '[function] function httpAdapter(config) {\n' +
      '  return new Promise(function dispatchHttpRequest(resolvePromise, rejectPromise) {\n' +
      '    var onCanceled;\n' +
      '    function done() {\n' +
      '      if (config.cancelToken) {\n' +
      '        config.cancelToken.unsubscribe(onCanceled);\n' +
      '      }\n' +
      '      if (config.signal) {\n' +
      "        config.signal.removeEventListener('abort', onCanceled);\n" +
      '      }\n' +
      '    }\n' +
      '    var resolve = function resolve(value) {\n' +
      '      done();\n' +
      '      resolvePromise(value);\n' +
      '    };\n' +
      '    var rejected = false;\n' +
      '    var reject = function reject(value) {\n' +
      '      done();\n' +
      '      rejected = true;\n' +
      '      rejectPromise(value);\n' +
      '    };\n' +
      '    var data = config.data;\n' +
      '    var headers = config.headers;\n' +
      '    var headerNames = {};\n' +
      '    Object.keys(headers).forEach(function storeLowerName(name) {\n' +
      '      headerNames[name.toLowerCase()] = name;\n' +
      '    });\n' +
      '\n' +
      '    // Set User-Agent (required by some servers)\n' +
      '    // See https://github.com/axios/axios/issues/69\n' +
      "    if ('user-agent' in headerNames) {\n" +
      '      // User-Agent is specified; handle case where no UA header is desired\n' +
      "      if (!headers[headerNames['user-agent']]) {\n" +
      "        delete headers[headerNames['user-agent']];\n" +
      '      }\n' +
      '      // Otherwise, use specified value\n' +
      '    } else {\n' +
      "      // Only set header if it hasn't been set in config\n" +
      "      headers['User-Agent'] = 'axios/' + VERSION;\n" +
      '    }\n' +
      '\n' +
      '    // support for https://www.npmjs.com/package/form-data api\n' +
      '    if (utils.isFormData(data) && utils.isFunction(data.getHeaders)) {\n' +
      '      Object.assign(headers, data.getHeaders());\n' +
      '    } else if (data && !utils.isStream(data)) {\n' +
      '      if (Buffer.isBuffer(data)) {\n' +
      '        // Nothing to do...\n' +
      '      } else if (utils.isArrayBuffer(data)) {\n' +
      '        data = Buffer.from(new Uint8Array(data));\n' +
      '      } else if (utils.isString(data)) {\n' +
      "        data = Buffer.from(data, 'utf-8');\n" +
      '      } else {\n' +
      "        return reject(new AxiosError('Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream', AxiosError.ERR_BAD_REQUEST, config));\n" +
      '      }\n' +
      '      if (config.maxBodyLength > -1 && data.length > config.maxBodyLength) {\n' +
      "        return reject(new AxiosError('Request body larger than maxBodyLength limit', AxiosError.ERR_BAD_REQUEST, config));\n" +
      '      }\n' +
      '\n' +
      '      // Add Content-Length header if data exists\n' +
      "      if (!headerNames['content-length']) {\n" +
      "        headers['Content-Length'] = data.length;\n" +
      '      }\n' +
      '    }\n' +
      '\n' +
      '    // HTTP basic authentication\n' +
      '    var auth = undefined;\n' +
      '    if (config.auth) {\n' +
      "      var username = config.auth.username || '';\n" +
      "      var password = config.auth.password || '';\n" +
      "      auth = username + ':' + password;\n" +
      '    }\n' +
      '\n' +
      '    // Parse url\n' +
      '    var fullPath = buildFullPath(config.baseURL, config.url);\n' +
      '    var parsed = url.parse(fullPath);\n' +
      '    var protocol = parsed.protocol || supportedProtocols[0];\n' +
      '    if (supportedProtocols.indexOf(protocol) === -1) {\n' +
      "      return reject(new AxiosError('Unsupported protocol ' + protocol, AxiosError.ERR_BAD_REQUEST, config));\n" +
      '    }\n' +
      '    if (!auth && parsed.auth) {\n' +
      "      var urlAuth = parsed.auth.split(':');\n" +
      "      var urlUsername = urlAuth[0] || '';\n" +
      "      var urlPassword = urlAuth[1] || '';\n" +
      "      auth = urlUsername + ':' + urlPassword;\n" +
      '    }\n' +
      '    if (auth && headerNames.authorization) {\n' +
      '      delete headers[headerNames.authorization];\n' +
      '    }\n' +
      '    var isHttpsRequest = isHttps.test(protocol);\n' +
      '    var agent = isHttpsRequest ? config.httpsAgent : config.httpAgent;\n' +
      '    try {\n' +
      "      buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\\?/, '');\n" +
      '    } catch (err) {\n' +
      '      var customErr = new Error(err.message);\n' +
      '      customErr.config = config;\n' +
      '      customErr.url = config.url;\n' +
      '      customErr.exists = true;\n' +
      '      reject(customErr);\n' +
      '    }\n' +
      '    var options = {\n' +
      "      path: buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\\?/, ''),\n" +
      '      method: config.method.toUpperCase(),\n' +
      '      headers: headers,\n' +
      '      agent: agent,\n' +
      '      agents: {\n' +
      '        http: config.httpAgent,\n' +
      '        https: config.httpsAgent\n' +
      '      },\n' +
      '      auth: auth\n' +
      '    };\n' +
      '    if (config.socketPath) {\n' +
      '      options.socketPath = config.socketPath;\n' +
      '    } else {\n' +
      '      options.hostname = parsed.hostname;\n' +
      '      options.port = parsed.port;\n' +
      '    }\n' +
      '    var proxy = config.proxy;\n' +
      '    if (!proxy && proxy !== false) {\n' +
      "      var proxyEnv = protocol.slice(0, -1) + '_proxy';\n" +
      '      var proxyUrl = process.env[proxyEnv] || process.env[proxyEnv.toUpperCase()];\n' +
      '      if (proxyUrl) {\n' +
      '        var parsedProxyUrl = url.parse(proxyUrl);\n' +
      '        var noProxyEnv = process.env.no_proxy || process.env.NO_PROXY;\n' +
      '        var shouldProxy = true;\n' +
      '        if (noProxyEnv) {\n' +
      "          var noProxy = noProxyEnv.split(',').map(function trim(s) {\n" +
      '            return s.trim();\n' +
      '          });\n' +
      '          shouldProxy = !noProxy.some(function proxyMatch(proxyElement) {\n' +
      '            if (!proxyElement) {\n' +
      '              return false;\n' +
      '            }\n' +
      "            if (proxyElement === '*') {\n" +
      '              return true;\n' +
      '            }\n' +
      "            if (proxyElement[0] === '.' && parsed.hostname.substr(parsed.hostname.length - proxyElement.length) === proxyElement) {\n" +
      '              return true;\n' +
      '            }\n' +
      '            return parsed.hostname === proxyElement;\n' +
      '          });\n' +
      '        }\n' +
      '        if (shouldProxy) {\n' +
      '          proxy = {\n' +
      '            host: parsedProxyUrl.hostname,\n' +
      '            port: parsedProxyUrl.port,\n' +
      '            protocol: parsedProxyUrl.protocol\n' +
      '          };\n' +
      '          if (parsedProxyUrl.auth) {\n' +
      "            var proxyUrlAuth = parsedProxyUrl.auth.split(':');\n" +
      '            proxy.auth = {\n' +
      '              username: proxyUrlAuth[0],\n' +
      '              password: proxyUrlAuth[1]\n' +
      '            };\n' +
      '          }\n' +
      '        }\n' +
      '      }\n' +
      '    }\n' +
      '    if (proxy) {\n' +
      "      options.headers.host = parsed.hostname + (parsed.port ? ':' + parsed.port : '');\n" +
      "      setProxy(options, proxy, protocol + '//' + parsed.hostname + (parsed.port ? ':' + parsed.port : '') + options.path);\n" +
      '    }\n' +
      '    var transport;\n' +
      '    var isHttpsProxy = isHttpsRequest && (proxy ? isHttps.test(proxy.protocol) : true);\n' +
      '    if (config.transport) {\n' +
      '      transport = config.transport;\n' +
      '    } else if (config.maxRedirects === 0) {\n' +
      '      transport = isHttpsProxy ? https : http;\n' +
      '    } else {\n' +
      '      if (config.maxRedirects) {\n' +
      '        options.maxRedirects = config.maxRedirects;\n' +
      '      }\n' +
      '      if (config.beforeRedirect) {\n' +
      '        options.beforeRedirect = config.beforeRedirect;\n' +
      '      }\n' +
      '      transport = isHttpsProxy ? httpsFollow : httpFollow;\n' +
      '    }\n' +
      '    if (config.maxBodyLength > -1) {\n' +
      '      options.maxBodyLength = config.maxBodyLength;\n' +
      '    }\n' +
      '    if (config.insecureHTTPParser) {\n' +
      '      options.insecureHTTPParser = config.insecureHTTPParser;\n' +
      '    }\n' +
      '\n' +
      '    // Create the request\n' +
      '    var req = transport.request(options, function handleResponse(res) {\n' +
      '      if (req.aborted) return;\n' +
      '\n' +
      '      // uncompress the response body transparently if required\n' +
      '      var stream = res;\n' +
      '\n' +
      '      // return the last request in case of redirects\n' +
      '      var lastRequest = res.req || req;\n' +
      '\n' +
      '      // if no content, is HEAD request or decompress disabled we should not decompress\n' +
      "      if (res.statusCode !== 204 && lastRequest.method !== 'HEAD' && config.decompress !== false) {\n" +
      "        switch (res.headers['content-encoding']) {\n" +
      '          /*eslint default-case:0*/\n' +
      "          case 'gzip':\n" +
      "          case 'compress':\n" +
      "          case 'deflate':\n" +
      '            // add the unzipper to the body stream processing pipeline\n' +
      '            stream = stream.pipe(zlib.createUnzip());\n' +
      '\n' +
      '            // remove the content-encoding in order to not confuse downstream operations\n' +
      "            delete res.headers['content-encoding'];\n" +
      '            break;\n' +
      '        }\n' +
      '      }\n' +
      '      var response = {\n' +
      '        status: res.statusCode,\n' +
      '        statusText: res.statusMessage,\n' +
      '        headers: res.headers,\n' +
      '        config: config,\n' +
      '        request: lastRequest\n' +
      '      };\n' +
      "      if (config.responseType === 'stream') {\n" +
      '        response.data = stream;\n' +
      '        settle(resolve, reject, response);\n' +
      '      } else {\n' +
      '        var responseBuffer = [];\n' +
      '        var totalResponseBytes = 0;\n' +
      "        stream.on('data', function handleStreamData(chunk) {\n" +
      '          responseBuffer.push(chunk);\n' +
      '          totalResponseBytes += chunk.length;\n' +
      '\n' +
      '          // make sure the content length is not over the maxContentLength if specified\n' +
      '          if (config.maxContentLength > -1 && totalResponseBytes > config.maxContentLength) {\n' +
      '            // stream.destoy() emit aborted event before calling reject() on Node.js v16\n' +
      '            rejected = true;\n' +
      '            stream.destroy();\n' +
      "            reject(new AxiosError('maxContentLength size of ' + config.maxContentLength + ' exceeded', AxiosError.ERR_BAD_RESPONSE, config, lastRequest));\n" +
      '          }\n' +
      '        });\n' +
      "        stream.on('aborted', function handlerStreamAborted() {\n" +
      '          if (rejected) {\n' +
      '            return;\n' +
      '          }\n' +
      '          stream.destroy();\n' +
      "          reject(new AxiosError('maxContentLength size of ' + config.maxContentLength + ' exceeded', AxiosError.ERR_BAD_RESPONSE, config, lastRequest));\n" +
      '        });\n' +
      "        stream.on('error', function handleStreamError(err) {\n" +
      '          if (req.aborted) return;\n' +
      '          reject(AxiosError.from(err, null, config, lastRequest));\n' +
      '        });\n' +
      "        stream.on('end', function handleStreamEnd() {\n" +
      '          try {\n' +
      '            var responseData = responseBuffer.length === 1 ? responseBuffer[0] : Buffer.concat(responseBuffer);\n' +
      "            if (config.responseType !== 'arraybuffer') {\n" +
      '              responseData = responseData.toString(config.responseEncoding);\n' +
      "              if (!config.responseEncoding || config.responseEncoding === 'utf8') {\n" +
      '                responseData = utils.stripBOM(responseData);\n' +
      '              }\n' +
      '            }\n' +
      '            response.data = responseData;\n' +
      '          } catch (err) {\n' +
      '            reject(AxiosError.from(err, null, config, response.request, response));\n' +
      '          }\n' +
      '          settle(resolve, reject, response);\n' +
      '        });\n' +
      '      }\n' +
      '    });\n' +
      '\n' +
      '    // Handle errors\n' +
      "    req.on('error', function handleRequestError(err) {\n" +
      '      // @todo remove\n' +
      '      // if (req.aborted && err.code !== AxiosError.ERR_FR_TOO_MANY_REDIRECTS) return;\n' +
      '      reject(AxiosError.from(err, null, config, req));\n' +
      '    });\n' +
      '\n' +
      ' '... 2346 more characters,
    transformRequest: [
      '[function] function transformRequest(data, headers) {\n' +
        "    normalizeHeaderName(headers, 'Accept');\n" +
        "    normalizeHeaderName(headers, 'Content-Type');\n" +
        '    if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {\n' +
        '      return data;\n' +
        '    }\n' +
        '    if (utils.isArrayBufferView(data)) {\n' +
        '      return data.buffer;\n' +
        '    }\n' +
        '    if (utils.isURLSearchParams(data)) {\n' +
        "      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');\n" +
        '      return data.toString();\n' +
        '    }\n' +
        '    var isObjectPayload = utils.isObject(data);\n' +
        "    var contentType = headers && headers['Content-Type'];\n" +
        '    var isFileList;\n' +
        "    if ((isFileList = utils.isFileList(data)) || isObjectPayload && contentType === 'multipart/form-data') {\n" +
        '      var _FormData = this.env && this.env.FormData;\n' +
        '      return toFormData(isFileList ? {\n' +
        "        'files[]': data\n" +
        '      } : data, _FormData && new _FormData());\n' +
        "    } else if (isObjectPayload || contentType === 'application/json') {\n" +
        "      setContentTypeIfUnset(headers, 'application/json');\n" +
        '      return stringifySafely(data);\n' +
        '    }\n' +
        '    return data;\n' +
        '  }'
    ],
    transformResponse: [
      '[function] function transformResponse(data) {\n' +
        '    var transitional = this.transitional || defaults.transitional;\n' +
        '    var silentJSONParsing = transitional && transitional.silentJSONParsing;\n' +
        '    var forcedJSONParsing = transitional && transitional.forcedJSONParsing;\n' +
        "    var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';\n" +
        '    if (strictJSONParsing || forcedJSONParsing && utils.isString(data) && data.length) {\n' +
        '      try {\n' +
        '        return JSON.parse(data);\n' +
        '      } catch (e) {\n' +
        '        if (strictJSONParsing) {\n' +
        "          if (e.name === 'SyntaxError') {\n" +
        '            throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);\n' +
        '          }\n' +
        '          throw e;\n' +
        '        }\n' +
        '      }\n' +
        '    }\n' +
        '    return data;\n' +
        '  }'
    ],
    timeout: 0,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
      FormData: '[function] function FormData(options) {\n' +
        '  if (!(this instanceof FormData)) {\n' +
        '    return new FormData(options);\n' +
        '  }\n' +
        '  this._overheadLength = 0;\n' +
        '  this._valueLength = 0;\n' +
        '  this._valuesToMeasure = [];\n' +
        '  CombinedStream.call(this);\n' +
        '  options = options || {};\n' +
        '  for (var option in options) {\n' +
        '    this[option] = options[option];\n' +
        '  }\n' +
        '}'
    },
    validateStatus: '[function] function validateStatus(status) {\n' +
      '    return status >= 200 && status < 300;\n' +
      '  }',
    headers: {
      Accept: 'application/json, text/plain, */*',
      Authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2MjUzOSwiZXhwIjoxNjg5MTQ4OTM5fQ.bHdIab-YYNIqMQQCI8uLOOljuVCJsN6UrO8OIT9j8Rw',
      'Content-Type': '',
      'User-Agent': 'axios/0.27.2'
    },
    url: 'https://connect-api.dev.insiteflow.io/v1/connect/container/config?organizationId=711729a8-a473-47bf-b27f-8abc1ee52281&containerType=desktop',
    method: 'get'
  },
  code: 'ERR_BAD_REQUEST',
  status: 401
}
[2023-07-11 13:32:40.321] [info]  In the catch  undefined
[2023-07-11 13:32:40.322] [error] Unhandled Exception {
  message: 'Request failed with status code 401',
  name: 'UnhandledRejection AxiosError',
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: '[function] function httpAdapter(config) {\n' +
      '  return new Promise(function dispatchHttpRequest(resolvePromise, rejectPromise) {\n' +
      '    var onCanceled;\n' +
      '    function done() {\n' +
      '      if (config.cancelToken) {\n' +
      '        config.cancelToken.unsubscribe(onCanceled);\n' +
      '      }\n' +
      '      if (config.signal) {\n' +
      "        config.signal.removeEventListener('abort', onCanceled);\n" +
      '      }\n' +
      '    }\n' +
      '    var resolve = function resolve(value) {\n' +
      '      done();\n' +
      '      resolvePromise(value);\n' +
      '    };\n' +
      '    var rejected = false;\n' +
      '    var reject = function reject(value) {\n' +
      '      done();\n' +
      '      rejected = true;\n' +
      '      rejectPromise(value);\n' +
      '    };\n' +
      '    var data = config.data;\n' +
      '    var headers = config.headers;\n' +
      '    var headerNames = {};\n' +
      '    Object.keys(headers).forEach(function storeLowerName(name) {\n' +
      '      headerNames[name.toLowerCase()] = name;\n' +
      '    });\n' +
      '\n' +
      '    // Set User-Agent (required by some servers)\n' +
      '    // See https://github.com/axios/axios/issues/69\n' +
      "    if ('user-agent' in headerNames) {\n" +
      '      // User-Agent is specified; handle case where no UA header is desired\n' +
      "      if (!headers[headerNames['user-agent']]) {\n" +
      "        delete headers[headerNames['user-agent']];\n" +
      '      }\n' +
      '      // Otherwise, use specified value\n' +
      '    } else {\n' +
      "      // Only set header if it hasn't been set in config\n" +
      "      headers['User-Agent'] = 'axios/' + VERSION;\n" +
      '    }\n' +
      '\n' +
      '    // support for https://www.npmjs.com/package/form-data api\n' +
      '    if (utils.isFormData(data) && utils.isFunction(data.getHeaders)) {\n' +
      '      Object.assign(headers, data.getHeaders());\n' +
      '    } else if (data && !utils.isStream(data)) {\n' +
      '      if (Buffer.isBuffer(data)) {\n' +
      '        // Nothing to do...\n' +
      '      } else if (utils.isArrayBuffer(data)) {\n' +
      '        data = Buffer.from(new Uint8Array(data));\n' +
      '      } else if (utils.isString(data)) {\n' +
      "        data = Buffer.from(data, 'utf-8');\n" +
      '      } else {\n' +
      "        return reject(new AxiosError('Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream', AxiosError.ERR_BAD_REQUEST, config));\n" +
      '      }\n' +
      '      if (config.maxBodyLength > -1 && data.length > config.maxBodyLength) {\n' +
      "        return reject(new AxiosError('Request body larger than maxBodyLength limit', AxiosError.ERR_BAD_REQUEST, config));\n" +
      '      }\n' +
      '\n' +
      '      // Add Content-Length header if data exists\n' +
      "      if (!headerNames['content-length']) {\n" +
      "        headers['Content-Length'] = data.length;\n" +
      '      }\n' +
      '    }\n' +
      '\n' +
      '    // HTTP basic authentication\n' +
      '    var auth = undefined;\n' +
      '    if (config.auth) {\n' +
      "      var username = config.auth.username || '';\n" +
      "      var password = config.auth.password || '';\n" +
      "      auth = username + ':' + password;\n" +
      '    }\n' +
      '\n' +
      '    // Parse url\n' +
      '    var fullPath = buildFullPath(config.baseURL, config.url);\n' +
      '    var parsed = url.parse(fullPath);\n' +
      '    var protocol = parsed.protocol || supportedProtocols[0];\n' +
      '    if (supportedProtocols.indexOf(protocol) === -1) {\n' +
      "      return reject(new AxiosError('Unsupported protocol ' + protocol, AxiosError.ERR_BAD_REQUEST, config));\n" +
      '    }\n' +
      '    if (!auth && parsed.auth) {\n' +
      "      var urlAuth = parsed.auth.split(':');\n" +
      "      var urlUsername = urlAuth[0] || '';\n" +
      "      var urlPassword = urlAuth[1] || '';\n" +
      "      auth = urlUsername + ':' + urlPassword;\n" +
      '    }\n' +
      '    if (auth && headerNames.authorization) {\n' +
      '      delete headers[headerNames.authorization];\n' +
      '    }\n' +
      '    var isHttpsRequest = isHttps.test(protocol);\n' +
      '    var agent = isHttpsRequest ? config.httpsAgent : config.httpAgent;\n' +
      '    try {\n' +
      "      buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\\?/, '');\n" +
      '    } catch (err) {\n' +
      '      var customErr = new Error(err.message);\n' +
      '      customErr.config = config;\n' +
      '      customErr.url = config.url;\n' +
      '      customErr.exists = true;\n' +
      '      reject(customErr);\n' +
      '    }\n' +
      '    var options = {\n' +
      "      path: buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\\?/, ''),\n" +
      '      method: config.method.toUpperCase(),\n' +
      '      headers: headers,\n' +
      '      agent: agent,\n' +
      '      agents: {\n' +
      '        http: config.httpAgent,\n' +
      '        https: config.httpsAgent\n' +
      '      },\n' +
      '      auth: auth\n' +
      '    };\n' +
      '    if (config.socketPath) {\n' +
      '      options.socketPath = config.socketPath;\n' +
      '    } else {\n' +
      '      options.hostname = parsed.hostname;\n' +
      '      options.port = parsed.port;\n' +
      '    }\n' +
      '    var proxy = config.proxy;\n' +
      '    if (!proxy && proxy !== false) {\n' +
      "      var proxyEnv = protocol.slice(0, -1) + '_proxy';\n" +
      '      var proxyUrl = process.env[proxyEnv] || process.env[proxyEnv.toUpperCase()];\n' +
      '      if (proxyUrl) {\n' +
      '        var parsedProxyUrl = url.parse(proxyUrl);\n' +
      '        var noProxyEnv = process.env.no_proxy || process.env.NO_PROXY;\n' +
      '        var shouldProxy = true;\n' +
      '        if (noProxyEnv) {\n' +
      "          var noProxy = noProxyEnv.split(',').map(function trim(s) {\n" +
      '            return s.trim();\n' +
      '          });\n' +
      '          shouldProxy = !noProxy.some(function proxyMatch(proxyElement) {\n' +
      '            if (!proxyElement) {\n' +
      '              return false;\n' +
      '            }\n' +
      "            if (proxyElement === '*') {\n" +
      '              return true;\n' +
      '            }\n' +
      "            if (proxyElement[0] === '.' && parsed.hostname.substr(parsed.hostname.length - proxyElement.length) === proxyElement) {\n" +
      '              return true;\n' +
      '            }\n' +
      '            return parsed.hostname === proxyElement;\n' +
      '          });\n' +
      '        }\n' +
      '        if (shouldProxy) {\n' +
      '          proxy = {\n' +
      '            host: parsedProxyUrl.hostname,\n' +
      '            port: parsedProxyUrl.port,\n' +
      '            protocol: parsedProxyUrl.protocol\n' +
      '          };\n' +
      '          if (parsedProxyUrl.auth) {\n' +
      "            var proxyUrlAuth = parsedProxyUrl.auth.split(':');\n" +
      '            proxy.auth = {\n' +
      '              username: proxyUrlAuth[0],\n' +
      '              password: proxyUrlAuth[1]\n' +
      '            };\n' +
      '          }\n' +
      '        }\n' +
      '      }\n' +
      '    }\n' +
      '    if (proxy) {\n' +
      "      options.headers.host = parsed.hostname + (parsed.port ? ':' + parsed.port : '');\n" +
      "      setProxy(options, proxy, protocol + '//' + parsed.hostname + (parsed.port ? ':' + parsed.port : '') + options.path);\n" +
      '    }\n' +
      '    var transport;\n' +
      '    var isHttpsProxy = isHttpsRequest && (proxy ? isHttps.test(proxy.protocol) : true);\n' +
      '    if (config.transport) {\n' +
      '      transport = config.transport;\n' +
      '    } else if (config.maxRedirects === 0) {\n' +
      '      transport = isHttpsProxy ? https : http;\n' +
      '    } else {\n' +
      '      if (config.maxRedirects) {\n' +
      '        options.maxRedirects = config.maxRedirects;\n' +
      '      }\n' +
      '      if (config.beforeRedirect) {\n' +
      '        options.beforeRedirect = config.beforeRedirect;\n' +
      '      }\n' +
      '      transport = isHttpsProxy ? httpsFollow : httpFollow;\n' +
      '    }\n' +
      '    if (config.maxBodyLength > -1) {\n' +
      '      options.maxBodyLength = config.maxBodyLength;\n' +
      '    }\n' +
      '    if (config.insecureHTTPParser) {\n' +
      '      options.insecureHTTPParser = config.insecureHTTPParser;\n' +
      '    }\n' +
      '\n' +
      '    // Create the request\n' +
      '    var req = transport.request(options, function handleResponse(res) {\n' +
      '      if (req.aborted) return;\n' +
      '\n' +
      '      // uncompress the response body transparently if required\n' +
      '      var stream = res;\n' +
      '\n' +
      '      // return the last request in case of redirects\n' +
      '      var lastRequest = res.req || req;\n' +
      '\n' +
      '      // if no content, is HEAD request or decompress disabled we should not decompress\n' +
      "      if (res.statusCode !== 204 && lastRequest.method !== 'HEAD' && config.decompress !== false) {\n" +
      "        switch (res.headers['content-encoding']) {\n" +
      '          /*eslint default-case:0*/\n' +
      "          case 'gzip':\n" +
      "          case 'compress':\n" +
      "          case 'deflate':\n" +
      '            // add the unzipper to the body stream processing pipeline\n' +
      '            stream = stream.pipe(zlib.createUnzip());\n' +
      '\n' +
      '            // remove the content-encoding in order to not confuse downstream operations\n' +
      "            delete res.headers['content-encoding'];\n" +
      '            break;\n' +
      '        }\n' +
      '      }\n' +
      '      var response = {\n' +
      '        status: res.statusCode,\n' +
      '        statusText: res.statusMessage,\n' +
      '        headers: res.headers,\n' +
      '        config: config,\n' +
      '        request: lastRequest\n' +
      '      };\n' +
      "      if (config.responseType === 'stream') {\n" +
      '        response.data = stream;\n' +
      '        settle(resolve, reject, response);\n' +
      '      } else {\n' +
      '        var responseBuffer = [];\n' +
      '        var totalResponseBytes = 0;\n' +
      "        stream.on('data', function handleStreamData(chunk) {\n" +
      '          responseBuffer.push(chunk);\n' +
      '          totalResponseBytes += chunk.length;\n' +
      '\n' +
      '          // make sure the content length is not over the maxContentLength if specified\n' +
      '          if (config.maxContentLength > -1 && totalResponseBytes > config.maxContentLength) {\n' +
      '            // stream.destoy() emit aborted event before calling reject() on Node.js v16\n' +
      '            rejected = true;\n' +
      '            stream.destroy();\n' +
      "            reject(new AxiosError('maxContentLength size of ' + config.maxContentLength + ' exceeded', AxiosError.ERR_BAD_RESPONSE, config, lastRequest));\n" +
      '          }\n' +
      '        });\n' +
      "        stream.on('aborted', function handlerStreamAborted() {\n" +
      '          if (rejected) {\n' +
      '            return;\n' +
      '          }\n' +
      '          stream.destroy();\n' +
      "          reject(new AxiosError('maxContentLength size of ' + config.maxContentLength + ' exceeded', AxiosError.ERR_BAD_RESPONSE, config, lastRequest));\n" +
      '        });\n' +
      "        stream.on('error', function handleStreamError(err) {\n" +
      '          if (req.aborted) return;\n' +
      '          reject(AxiosError.from(err, null, config, lastRequest));\n' +
      '        });\n' +
      "        stream.on('end', function handleStreamEnd() {\n" +
      '          try {\n' +
      '            var responseData = responseBuffer.length === 1 ? responseBuffer[0] : Buffer.concat(responseBuffer);\n' +
      "            if (config.responseType !== 'arraybuffer') {\n" +
      '              responseData = responseData.toString(config.responseEncoding);\n' +
      "              if (!config.responseEncoding || config.responseEncoding === 'utf8') {\n" +
      '                responseData = utils.stripBOM(responseData);\n' +
      '              }\n' +
      '            }\n' +
      '            response.data = responseData;\n' +
      '          } catch (err) {\n' +
      '            reject(AxiosError.from(err, null, config, response.request, response));\n' +
      '          }\n' +
      '          settle(resolve, reject, response);\n' +
      '        });\n' +
      '      }\n' +
      '    });\n' +
      '\n' +
      '    // Handle errors\n' +
      "    req.on('error', function handleRequestError(err) {\n" +
      '      // @todo remove\n' +
      '      // if (req.aborted && err.code !== AxiosError.ERR_FR_TOO_MANY_REDIRECTS) return;\n' +
      '      reject(AxiosError.from(err, null, config, req));\n' +
      '    });\n' +
      '\n' +
      ' '... 2346 more characters,
    transformRequest: [
      '[function] function transformRequest(data, headers) {\n' +
        "    normalizeHeaderName(headers, 'Accept');\n" +
        "    normalizeHeaderName(headers, 'Content-Type');\n" +
        '    if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {\n' +
        '      return data;\n' +
        '    }\n' +
        '    if (utils.isArrayBufferView(data)) {\n' +
        '      return data.buffer;\n' +
        '    }\n' +
        '    if (utils.isURLSearchParams(data)) {\n' +
        "      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');\n" +
        '      return data.toString();\n' +
        '    }\n' +
        '    var isObjectPayload = utils.isObject(data);\n' +
        "    var contentType = headers && headers['Content-Type'];\n" +
        '    var isFileList;\n' +
        "    if ((isFileList = utils.isFileList(data)) || isObjectPayload && contentType === 'multipart/form-data') {\n" +
        '      var _FormData = this.env && this.env.FormData;\n' +
        '      return toFormData(isFileList ? {\n' +
        "        'files[]': data\n" +
        '      } : data, _FormData && new _FormData());\n' +
        "    } else if (isObjectPayload || contentType === 'application/json') {\n" +
        "      setContentTypeIfUnset(headers, 'application/json');\n" +
        '      return stringifySafely(data);\n' +
        '    }\n' +
        '    return data;\n' +
        '  }'
    ],
    transformResponse: [
      '[function] function transformResponse(data) {\n' +
        '    var transitional = this.transitional || defaults.transitional;\n' +
        '    var silentJSONParsing = transitional && transitional.silentJSONParsing;\n' +
        '    var forcedJSONParsing = transitional && transitional.forcedJSONParsing;\n' +
        "    var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';\n" +
        '    if (strictJSONParsing || forcedJSONParsing && utils.isString(data) && data.length) {\n' +
        '      try {\n' +
        '        return JSON.parse(data);\n' +
        '      } catch (e) {\n' +
        '        if (strictJSONParsing) {\n' +
        "          if (e.name === 'SyntaxError') {\n" +
        '            throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);\n' +
        '          }\n' +
        '          throw e;\n' +
        '        }\n' +
        '      }\n' +
        '    }\n' +
        '    return data;\n' +
        '  }'
    ],
    timeout: 0,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
      FormData: '[function] function FormData(options) {\n' +
        '  if (!(this instanceof FormData)) {\n' +
        '    return new FormData(options);\n' +
        '  }\n' +
        '  this._overheadLength = 0;\n' +
        '  this._valueLength = 0;\n' +
        '  this._valuesToMeasure = [];\n' +
        '  CombinedStream.call(this);\n' +
        '  options = options || {};\n' +
        '  for (var option in options) {\n' +
        '    this[option] = options[option];\n' +
        '  }\n' +
        '}'
    },
    validateStatus: '[function] function validateStatus(status) {\n' +
      '    return status >= 200 && status < 300;\n' +
      '  }',
    headers: {
      Accept: 'application/json, text/plain, */*',
      Authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2MjUzOSwiZXhwIjoxNjg5MTQ4OTM5fQ.bHdIab-YYNIqMQQCI8uLOOljuVCJsN6UrO8OIT9j8Rw',
      'Content-Type': '',
      'User-Agent': 'axios/0.27.2'
    },
    url: 'https://connect-api.dev.insiteflow.io/v1/connect/container/config?organizationId=711729a8-a473-47bf-b27f-8abc1ee52281&containerType=desktop',
    method: 'get'
  },
  code: 'ERR_BAD_REQUEST',
  status: 401
}
[2023-07-11 13:32:45.282] [info]  In the catch  undefined
[2023-07-11 13:32:45.283] [error] Unhandled Exception {
  message: 'Request failed with status code 401',
  name: 'UnhandledRejection AxiosError',
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: '[function] function httpAdapter(config) {\n' +
      '  return new Promise(function dispatchHttpRequest(resolvePromise, rejectPromise) {\n' +
      '    var onCanceled;\n' +
      '    function done() {\n' +
      '      if (config.cancelToken) {\n' +
      '        config.cancelToken.unsubscribe(onCanceled);\n' +
      '      }\n' +
      '      if (config.signal) {\n' +
      "        config.signal.removeEventListener('abort', onCanceled);\n" +
      '      }\n' +
      '    }\n' +
      '    var resolve = function resolve(value) {\n' +
      '      done();\n' +
      '      resolvePromise(value);\n' +
      '    };\n' +
      '    var rejected = false;\n' +
      '    var reject = function reject(value) {\n' +
      '      done();\n' +
      '      rejected = true;\n' +
      '      rejectPromise(value);\n' +
      '    };\n' +
      '    var data = config.data;\n' +
      '    var headers = config.headers;\n' +
      '    var headerNames = {};\n' +
      '    Object.keys(headers).forEach(function storeLowerName(name) {\n' +
      '      headerNames[name.toLowerCase()] = name;\n' +
      '    });\n' +
      '\n' +
      '    // Set User-Agent (required by some servers)\n' +
      '    // See https://github.com/axios/axios/issues/69\n' +
      "    if ('user-agent' in headerNames) {\n" +
      '      // User-Agent is specified; handle case where no UA header is desired\n' +
      "      if (!headers[headerNames['user-agent']]) {\n" +
      "        delete headers[headerNames['user-agent']];\n" +
      '      }\n' +
      '      // Otherwise, use specified value\n' +
      '    } else {\n' +
      "      // Only set header if it hasn't been set in config\n" +
      "      headers['User-Agent'] = 'axios/' + VERSION;\n" +
      '    }\n' +
      '\n' +
      '    // support for https://www.npmjs.com/package/form-data api\n' +
      '    if (utils.isFormData(data) && utils.isFunction(data.getHeaders)) {\n' +
      '      Object.assign(headers, data.getHeaders());\n' +
      '    } else if (data && !utils.isStream(data)) {\n' +
      '      if (Buffer.isBuffer(data)) {\n' +
      '        // Nothing to do...\n' +
      '      } else if (utils.isArrayBuffer(data)) {\n' +
      '        data = Buffer.from(new Uint8Array(data));\n' +
      '      } else if (utils.isString(data)) {\n' +
      "        data = Buffer.from(data, 'utf-8');\n" +
      '      } else {\n' +
      "        return reject(new AxiosError('Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream', AxiosError.ERR_BAD_REQUEST, config));\n" +
      '      }\n' +
      '      if (config.maxBodyLength > -1 && data.length > config.maxBodyLength) {\n' +
      "        return reject(new AxiosError('Request body larger than maxBodyLength limit', AxiosError.ERR_BAD_REQUEST, config));\n" +
      '      }\n' +
      '\n' +
      '      // Add Content-Length header if data exists\n' +
      "      if (!headerNames['content-length']) {\n" +
      "        headers['Content-Length'] = data.length;\n" +
      '      }\n' +
      '    }\n' +
      '\n' +
      '    // HTTP basic authentication\n' +
      '    var auth = undefined;\n' +
      '    if (config.auth) {\n' +
      "      var username = config.auth.username || '';\n" +
      "      var password = config.auth.password || '';\n" +
      "      auth = username + ':' + password;\n" +
      '    }\n' +
      '\n' +
      '    // Parse url\n' +
      '    var fullPath = buildFullPath(config.baseURL, config.url);\n' +
      '    var parsed = url.parse(fullPath);\n' +
      '    var protocol = parsed.protocol || supportedProtocols[0];\n' +
      '    if (supportedProtocols.indexOf(protocol) === -1) {\n' +
      "      return reject(new AxiosError('Unsupported protocol ' + protocol, AxiosError.ERR_BAD_REQUEST, config));\n" +
      '    }\n' +
      '    if (!auth && parsed.auth) {\n' +
      "      var urlAuth = parsed.auth.split(':');\n" +
      "      var urlUsername = urlAuth[0] || '';\n" +
      "      var urlPassword = urlAuth[1] || '';\n" +
      "      auth = urlUsername + ':' + urlPassword;\n" +
      '    }\n' +
      '    if (auth && headerNames.authorization) {\n' +
      '      delete headers[headerNames.authorization];\n' +
      '    }\n' +
      '    var isHttpsRequest = isHttps.test(protocol);\n' +
      '    var agent = isHttpsRequest ? config.httpsAgent : config.httpAgent;\n' +
      '    try {\n' +
      "      buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\\?/, '');\n" +
      '    } catch (err) {\n' +
      '      var customErr = new Error(err.message);\n' +
      '      customErr.config = config;\n' +
      '      customErr.url = config.url;\n' +
      '      customErr.exists = true;\n' +
      '      reject(customErr);\n' +
      '    }\n' +
      '    var options = {\n' +
      "      path: buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\\?/, ''),\n" +
      '      method: config.method.toUpperCase(),\n' +
      '      headers: headers,\n' +
      '      agent: agent,\n' +
      '      agents: {\n' +
      '        http: config.httpAgent,\n' +
      '        https: config.httpsAgent\n' +
      '      },\n' +
      '      auth: auth\n' +
      '    };\n' +
      '    if (config.socketPath) {\n' +
      '      options.socketPath = config.socketPath;\n' +
      '    } else {\n' +
      '      options.hostname = parsed.hostname;\n' +
      '      options.port = parsed.port;\n' +
      '    }\n' +
      '    var proxy = config.proxy;\n' +
      '    if (!proxy && proxy !== false) {\n' +
      "      var proxyEnv = protocol.slice(0, -1) + '_proxy';\n" +
      '      var proxyUrl = process.env[proxyEnv] || process.env[proxyEnv.toUpperCase()];\n' +
      '      if (proxyUrl) {\n' +
      '        var parsedProxyUrl = url.parse(proxyUrl);\n' +
      '        var noProxyEnv = process.env.no_proxy || process.env.NO_PROXY;\n' +
      '        var shouldProxy = true;\n' +
      '        if (noProxyEnv) {\n' +
      "          var noProxy = noProxyEnv.split(',').map(function trim(s) {\n" +
      '            return s.trim();\n' +
      '          });\n' +
      '          shouldProxy = !noProxy.some(function proxyMatch(proxyElement) {\n' +
      '            if (!proxyElement) {\n' +
      '              return false;\n' +
      '            }\n' +
      "            if (proxyElement === '*') {\n" +
      '              return true;\n' +
      '            }\n' +
      "            if (proxyElement[0] === '.' && parsed.hostname.substr(parsed.hostname.length - proxyElement.length) === proxyElement) {\n" +
      '              return true;\n' +
      '            }\n' +
      '            return parsed.hostname === proxyElement;\n' +
      '          });\n' +
      '        }\n' +
      '        if (shouldProxy) {\n' +
      '          proxy = {\n' +
      '            host: parsedProxyUrl.hostname,\n' +
      '            port: parsedProxyUrl.port,\n' +
      '            protocol: parsedProxyUrl.protocol\n' +
      '          };\n' +
      '          if (parsedProxyUrl.auth) {\n' +
      "            var proxyUrlAuth = parsedProxyUrl.auth.split(':');\n" +
      '            proxy.auth = {\n' +
      '              username: proxyUrlAuth[0],\n' +
      '              password: proxyUrlAuth[1]\n' +
      '            };\n' +
      '          }\n' +
      '        }\n' +
      '      }\n' +
      '    }\n' +
      '    if (proxy) {\n' +
      "      options.headers.host = parsed.hostname + (parsed.port ? ':' + parsed.port : '');\n" +
      "      setProxy(options, proxy, protocol + '//' + parsed.hostname + (parsed.port ? ':' + parsed.port : '') + options.path);\n" +
      '    }\n' +
      '    var transport;\n' +
      '    var isHttpsProxy = isHttpsRequest && (proxy ? isHttps.test(proxy.protocol) : true);\n' +
      '    if (config.transport) {\n' +
      '      transport = config.transport;\n' +
      '    } else if (config.maxRedirects === 0) {\n' +
      '      transport = isHttpsProxy ? https : http;\n' +
      '    } else {\n' +
      '      if (config.maxRedirects) {\n' +
      '        options.maxRedirects = config.maxRedirects;\n' +
      '      }\n' +
      '      if (config.beforeRedirect) {\n' +
      '        options.beforeRedirect = config.beforeRedirect;\n' +
      '      }\n' +
      '      transport = isHttpsProxy ? httpsFollow : httpFollow;\n' +
      '    }\n' +
      '    if (config.maxBodyLength > -1) {\n' +
      '      options.maxBodyLength = config.maxBodyLength;\n' +
      '    }\n' +
      '    if (config.insecureHTTPParser) {\n' +
      '      options.insecureHTTPParser = config.insecureHTTPParser;\n' +
      '    }\n' +
      '\n' +
      '    // Create the request\n' +
      '    var req = transport.request(options, function handleResponse(res) {\n' +
      '      if (req.aborted) return;\n' +
      '\n' +
      '      // uncompress the response body transparently if required\n' +
      '      var stream = res;\n' +
      '\n' +
      '      // return the last request in case of redirects\n' +
      '      var lastRequest = res.req || req;\n' +
      '\n' +
      '      // if no content, is HEAD request or decompress disabled we should not decompress\n' +
      "      if (res.statusCode !== 204 && lastRequest.method !== 'HEAD' && config.decompress !== false) {\n" +
      "        switch (res.headers['content-encoding']) {\n" +
      '          /*eslint default-case:0*/\n' +
      "          case 'gzip':\n" +
      "          case 'compress':\n" +
      "          case 'deflate':\n" +
      '            // add the unzipper to the body stream processing pipeline\n' +
      '            stream = stream.pipe(zlib.createUnzip());\n' +
      '\n' +
      '            // remove the content-encoding in order to not confuse downstream operations\n' +
      "            delete res.headers['content-encoding'];\n" +
      '            break;\n' +
      '        }\n' +
      '      }\n' +
      '      var response = {\n' +
      '        status: res.statusCode,\n' +
      '        statusText: res.statusMessage,\n' +
      '        headers: res.headers,\n' +
      '        config: config,\n' +
      '        request: lastRequest\n' +
      '      };\n' +
      "      if (config.responseType === 'stream') {\n" +
      '        response.data = stream;\n' +
      '        settle(resolve, reject, response);\n' +
      '      } else {\n' +
      '        var responseBuffer = [];\n' +
      '        var totalResponseBytes = 0;\n' +
      "        stream.on('data', function handleStreamData(chunk) {\n" +
      '          responseBuffer.push(chunk);\n' +
      '          totalResponseBytes += chunk.length;\n' +
      '\n' +
      '          // make sure the content length is not over the maxContentLength if specified\n' +
      '          if (config.maxContentLength > -1 && totalResponseBytes > config.maxContentLength) {\n' +
      '            // stream.destoy() emit aborted event before calling reject() on Node.js v16\n' +
      '            rejected = true;\n' +
      '            stream.destroy();\n' +
      "            reject(new AxiosError('maxContentLength size of ' + config.maxContentLength + ' exceeded', AxiosError.ERR_BAD_RESPONSE, config, lastRequest));\n" +
      '          }\n' +
      '        });\n' +
      "        stream.on('aborted', function handlerStreamAborted() {\n" +
      '          if (rejected) {\n' +
      '            return;\n' +
      '          }\n' +
      '          stream.destroy();\n' +
      "          reject(new AxiosError('maxContentLength size of ' + config.maxContentLength + ' exceeded', AxiosError.ERR_BAD_RESPONSE, config, lastRequest));\n" +
      '        });\n' +
      "        stream.on('error', function handleStreamError(err) {\n" +
      '          if (req.aborted) return;\n' +
      '          reject(AxiosError.from(err, null, config, lastRequest));\n' +
      '        });\n' +
      "        stream.on('end', function handleStreamEnd() {\n" +
      '          try {\n' +
      '            var responseData = responseBuffer.length === 1 ? responseBuffer[0] : Buffer.concat(responseBuffer);\n' +
      "            if (config.responseType !== 'arraybuffer') {\n" +
      '              responseData = responseData.toString(config.responseEncoding);\n' +
      "              if (!config.responseEncoding || config.responseEncoding === 'utf8') {\n" +
      '                responseData = utils.stripBOM(responseData);\n' +
      '              }\n' +
      '            }\n' +
      '            response.data = responseData;\n' +
      '          } catch (err) {\n' +
      '            reject(AxiosError.from(err, null, config, response.request, response));\n' +
      '          }\n' +
      '          settle(resolve, reject, response);\n' +
      '        });\n' +
      '      }\n' +
      '    });\n' +
      '\n' +
      '    // Handle errors\n' +
      "    req.on('error', function handleRequestError(err) {\n" +
      '      // @todo remove\n' +
      '      // if (req.aborted && err.code !== AxiosError.ERR_FR_TOO_MANY_REDIRECTS) return;\n' +
      '      reject(AxiosError.from(err, null, config, req));\n' +
      '    });\n' +
      '\n' +
      ' '... 2346 more characters,
    transformRequest: [
      '[function] function transformRequest(data, headers) {\n' +
        "    normalizeHeaderName(headers, 'Accept');\n" +
        "    normalizeHeaderName(headers, 'Content-Type');\n" +
        '    if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {\n' +
        '      return data;\n' +
        '    }\n' +
        '    if (utils.isArrayBufferView(data)) {\n' +
        '      return data.buffer;\n' +
        '    }\n' +
        '    if (utils.isURLSearchParams(data)) {\n' +
        "      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');\n" +
        '      return data.toString();\n' +
        '    }\n' +
        '    var isObjectPayload = utils.isObject(data);\n' +
        "    var contentType = headers && headers['Content-Type'];\n" +
        '    var isFileList;\n' +
        "    if ((isFileList = utils.isFileList(data)) || isObjectPayload && contentType === 'multipart/form-data') {\n" +
        '      var _FormData = this.env && this.env.FormData;\n' +
        '      return toFormData(isFileList ? {\n' +
        "        'files[]': data\n" +
        '      } : data, _FormData && new _FormData());\n' +
        "    } else if (isObjectPayload || contentType === 'application/json') {\n" +
        "      setContentTypeIfUnset(headers, 'application/json');\n" +
        '      return stringifySafely(data);\n' +
        '    }\n' +
        '    return data;\n' +
        '  }'
    ],
    transformResponse: [
      '[function] function transformResponse(data) {\n' +
        '    var transitional = this.transitional || defaults.transitional;\n' +
        '    var silentJSONParsing = transitional && transitional.silentJSONParsing;\n' +
        '    var forcedJSONParsing = transitional && transitional.forcedJSONParsing;\n' +
        "    var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';\n" +
        '    if (strictJSONParsing || forcedJSONParsing && utils.isString(data) && data.length) {\n' +
        '      try {\n' +
        '        return JSON.parse(data);\n' +
        '      } catch (e) {\n' +
        '        if (strictJSONParsing) {\n' +
        "          if (e.name === 'SyntaxError') {\n" +
        '            throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);\n' +
        '          }\n' +
        '          throw e;\n' +
        '        }\n' +
        '      }\n' +
        '    }\n' +
        '    return data;\n' +
        '  }'
    ],
    timeout: 0,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
      FormData: '[function] function FormData(options) {\n' +
        '  if (!(this instanceof FormData)) {\n' +
        '    return new FormData(options);\n' +
        '  }\n' +
        '  this._overheadLength = 0;\n' +
        '  this._valueLength = 0;\n' +
        '  this._valuesToMeasure = [];\n' +
        '  CombinedStream.call(this);\n' +
        '  options = options || {};\n' +
        '  for (var option in options) {\n' +
        '    this[option] = options[option];\n' +
        '  }\n' +
        '}'
    },
    validateStatus: '[function] function validateStatus(status) {\n' +
      '    return status >= 200 && status < 300;\n' +
      '  }',
    headers: {
      Accept: 'application/json, text/plain, */*',
      Authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2MjUzOSwiZXhwIjoxNjg5MTQ4OTM5fQ.bHdIab-YYNIqMQQCI8uLOOljuVCJsN6UrO8OIT9j8Rw',
      'Content-Type': '',
      'User-Agent': 'axios/0.27.2'
    },
    url: 'https://connect-api.dev.insiteflow.io/v1/connect/container/config?organizationId=711729a8-a473-47bf-b27f-8abc1ee52281&containerType=desktop',
    method: 'get'
  },
  code: 'ERR_BAD_REQUEST',
  status: 401
}
[2023-07-11 13:33:16.890] [info]  Started /home/lnv-75/Documents/insiteFlow/desktop-app-container/test/out AES-128
[2023-07-11 13:33:17.803] [info]  In the catch  {
  message: 'Request failed with status code 401',
  name: 'AxiosError',
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: '[function] function httpAdapter(config) {\n' +
      '  return new Promise(function dispatchHttpRequest(resolvePromise, rejectPromise) {\n' +
      '    var onCanceled;\n' +
      '    function done() {\n' +
      '      if (config.cancelToken) {\n' +
      '        config.cancelToken.unsubscribe(onCanceled);\n' +
      '      }\n' +
      '      if (config.signal) {\n' +
      "        config.signal.removeEventListener('abort', onCanceled);\n" +
      '      }\n' +
      '    }\n' +
      '    var resolve = function resolve(value) {\n' +
      '      done();\n' +
      '      resolvePromise(value);\n' +
      '    };\n' +
      '    var rejected = false;\n' +
      '    var reject = function reject(value) {\n' +
      '      done();\n' +
      '      rejected = true;\n' +
      '      rejectPromise(value);\n' +
      '    };\n' +
      '    var data = config.data;\n' +
      '    var headers = config.headers;\n' +
      '    var headerNames = {};\n' +
      '    Object.keys(headers).forEach(function storeLowerName(name) {\n' +
      '      headerNames[name.toLowerCase()] = name;\n' +
      '    });\n' +
      '\n' +
      '    // Set User-Agent (required by some servers)\n' +
      '    // See https://github.com/axios/axios/issues/69\n' +
      "    if ('user-agent' in headerNames) {\n" +
      '      // User-Agent is specified; handle case where no UA header is desired\n' +
      "      if (!headers[headerNames['user-agent']]) {\n" +
      "        delete headers[headerNames['user-agent']];\n" +
      '      }\n' +
      '      // Otherwise, use specified value\n' +
      '    } else {\n' +
      "      // Only set header if it hasn't been set in config\n" +
      "      headers['User-Agent'] = 'axios/' + VERSION;\n" +
      '    }\n' +
      '\n' +
      '    // support for https://www.npmjs.com/package/form-data api\n' +
      '    if (utils.isFormData(data) && utils.isFunction(data.getHeaders)) {\n' +
      '      Object.assign(headers, data.getHeaders());\n' +
      '    } else if (data && !utils.isStream(data)) {\n' +
      '      if (Buffer.isBuffer(data)) {\n' +
      '        // Nothing to do...\n' +
      '      } else if (utils.isArrayBuffer(data)) {\n' +
      '        data = Buffer.from(new Uint8Array(data));\n' +
      '      } else if (utils.isString(data)) {\n' +
      "        data = Buffer.from(data, 'utf-8');\n" +
      '      } else {\n' +
      "        return reject(new AxiosError('Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream', AxiosError.ERR_BAD_REQUEST, config));\n" +
      '      }\n' +
      '      if (config.maxBodyLength > -1 && data.length > config.maxBodyLength) {\n' +
      "        return reject(new AxiosError('Request body larger than maxBodyLength limit', AxiosError.ERR_BAD_REQUEST, config));\n" +
      '      }\n' +
      '\n' +
      '      // Add Content-Length header if data exists\n' +
      "      if (!headerNames['content-length']) {\n" +
      "        headers['Content-Length'] = data.length;\n" +
      '      }\n' +
      '    }\n' +
      '\n' +
      '    // HTTP basic authentication\n' +
      '    var auth = undefined;\n' +
      '    if (config.auth) {\n' +
      "      var username = config.auth.username || '';\n" +
      "      var password = config.auth.password || '';\n" +
      "      auth = username + ':' + password;\n" +
      '    }\n' +
      '\n' +
      '    // Parse url\n' +
      '    var fullPath = buildFullPath(config.baseURL, config.url);\n' +
      '    var parsed = url.parse(fullPath);\n' +
      '    var protocol = parsed.protocol || supportedProtocols[0];\n' +
      '    if (supportedProtocols.indexOf(protocol) === -1) {\n' +
      "      return reject(new AxiosError('Unsupported protocol ' + protocol, AxiosError.ERR_BAD_REQUEST, config));\n" +
      '    }\n' +
      '    if (!auth && parsed.auth) {\n' +
      "      var urlAuth = parsed.auth.split(':');\n" +
      "      var urlUsername = urlAuth[0] || '';\n" +
      "      var urlPassword = urlAuth[1] || '';\n" +
      "      auth = urlUsername + ':' + urlPassword;\n" +
      '    }\n' +
      '    if (auth && headerNames.authorization) {\n' +
      '      delete headers[headerNames.authorization];\n' +
      '    }\n' +
      '    var isHttpsRequest = isHttps.test(protocol);\n' +
      '    var agent = isHttpsRequest ? config.httpsAgent : config.httpAgent;\n' +
      '    try {\n' +
      "      buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\\?/, '');\n" +
      '    } catch (err) {\n' +
      '      var customErr = new Error(err.message);\n' +
      '      customErr.config = config;\n' +
      '      customErr.url = config.url;\n' +
      '      customErr.exists = true;\n' +
      '      reject(customErr);\n' +
      '    }\n' +
      '    var options = {\n' +
      "      path: buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\\?/, ''),\n" +
      '      method: config.method.toUpperCase(),\n' +
      '      headers: headers,\n' +
      '      agent: agent,\n' +
      '      agents: {\n' +
      '        http: config.httpAgent,\n' +
      '        https: config.httpsAgent\n' +
      '      },\n' +
      '      auth: auth\n' +
      '    };\n' +
      '    if (config.socketPath) {\n' +
      '      options.socketPath = config.socketPath;\n' +
      '    } else {\n' +
      '      options.hostname = parsed.hostname;\n' +
      '      options.port = parsed.port;\n' +
      '    }\n' +
      '    var proxy = config.proxy;\n' +
      '    if (!proxy && proxy !== false) {\n' +
      "      var proxyEnv = protocol.slice(0, -1) + '_proxy';\n" +
      '      var proxyUrl = process.env[proxyEnv] || process.env[proxyEnv.toUpperCase()];\n' +
      '      if (proxyUrl) {\n' +
      '        var parsedProxyUrl = url.parse(proxyUrl);\n' +
      '        var noProxyEnv = process.env.no_proxy || process.env.NO_PROXY;\n' +
      '        var shouldProxy = true;\n' +
      '        if (noProxyEnv) {\n' +
      "          var noProxy = noProxyEnv.split(',').map(function trim(s) {\n" +
      '            return s.trim();\n' +
      '          });\n' +
      '          shouldProxy = !noProxy.some(function proxyMatch(proxyElement) {\n' +
      '            if (!proxyElement) {\n' +
      '              return false;\n' +
      '            }\n' +
      "            if (proxyElement === '*') {\n" +
      '              return true;\n' +
      '            }\n' +
      "            if (proxyElement[0] === '.' && parsed.hostname.substr(parsed.hostname.length - proxyElement.length) === proxyElement) {\n" +
      '              return true;\n' +
      '            }\n' +
      '            return parsed.hostname === proxyElement;\n' +
      '          });\n' +
      '        }\n' +
      '        if (shouldProxy) {\n' +
      '          proxy = {\n' +
      '            host: parsedProxyUrl.hostname,\n' +
      '            port: parsedProxyUrl.port,\n' +
      '            protocol: parsedProxyUrl.protocol\n' +
      '          };\n' +
      '          if (parsedProxyUrl.auth) {\n' +
      "            var proxyUrlAuth = parsedProxyUrl.auth.split(':');\n" +
      '            proxy.auth = {\n' +
      '              username: proxyUrlAuth[0],\n' +
      '              password: proxyUrlAuth[1]\n' +
      '            };\n' +
      '          }\n' +
      '        }\n' +
      '      }\n' +
      '    }\n' +
      '    if (proxy) {\n' +
      "      options.headers.host = parsed.hostname + (parsed.port ? ':' + parsed.port : '');\n" +
      "      setProxy(options, proxy, protocol + '//' + parsed.hostname + (parsed.port ? ':' + parsed.port : '') + options.path);\n" +
      '    }\n' +
      '    var transport;\n' +
      '    var isHttpsProxy = isHttpsRequest && (proxy ? isHttps.test(proxy.protocol) : true);\n' +
      '    if (config.transport) {\n' +
      '      transport = config.transport;\n' +
      '    } else if (config.maxRedirects === 0) {\n' +
      '      transport = isHttpsProxy ? https : http;\n' +
      '    } else {\n' +
      '      if (config.maxRedirects) {\n' +
      '        options.maxRedirects = config.maxRedirects;\n' +
      '      }\n' +
      '      if (config.beforeRedirect) {\n' +
      '        options.beforeRedirect = config.beforeRedirect;\n' +
      '      }\n' +
      '      transport = isHttpsProxy ? httpsFollow : httpFollow;\n' +
      '    }\n' +
      '    if (config.maxBodyLength > -1) {\n' +
      '      options.maxBodyLength = config.maxBodyLength;\n' +
      '    }\n' +
      '    if (config.insecureHTTPParser) {\n' +
      '      options.insecureHTTPParser = config.insecureHTTPParser;\n' +
      '    }\n' +
      '\n' +
      '    // Create the request\n' +
      '    var req = transport.request(options, function handleResponse(res) {\n' +
      '      if (req.aborted) return;\n' +
      '\n' +
      '      // uncompress the response body transparently if required\n' +
      '      var stream = res;\n' +
      '\n' +
      '      // return the last request in case of redirects\n' +
      '      var lastRequest = res.req || req;\n' +
      '\n' +
      '      // if no content, is HEAD request or decompress disabled we should not decompress\n' +
      "      if (res.statusCode !== 204 && lastRequest.method !== 'HEAD' && config.decompress !== false) {\n" +
      "        switch (res.headers['content-encoding']) {\n" +
      '          /*eslint default-case:0*/\n' +
      "          case 'gzip':\n" +
      "          case 'compress':\n" +
      "          case 'deflate':\n" +
      '            // add the unzipper to the body stream processing pipeline\n' +
      '            stream = stream.pipe(zlib.createUnzip());\n' +
      '\n' +
      '            // remove the content-encoding in order to not confuse downstream operations\n' +
      "            delete res.headers['content-encoding'];\n" +
      '            break;\n' +
      '        }\n' +
      '      }\n' +
      '      var response = {\n' +
      '        status: res.statusCode,\n' +
      '        statusText: res.statusMessage,\n' +
      '        headers: res.headers,\n' +
      '        config: config,\n' +
      '        request: lastRequest\n' +
      '      };\n' +
      "      if (config.responseType === 'stream') {\n" +
      '        response.data = stream;\n' +
      '        settle(resolve, reject, response);\n' +
      '      } else {\n' +
      '        var responseBuffer = [];\n' +
      '        var totalResponseBytes = 0;\n' +
      "        stream.on('data', function handleStreamData(chunk) {\n" +
      '          responseBuffer.push(chunk);\n' +
      '          totalResponseBytes += chunk.length;\n' +
      '\n' +
      '          // make sure the content length is not over the maxContentLength if specified\n' +
      '          if (config.maxContentLength > -1 && totalResponseBytes > config.maxContentLength) {\n' +
      '            // stream.destoy() emit aborted event before calling reject() on Node.js v16\n' +
      '            rejected = true;\n' +
      '            stream.destroy();\n' +
      "            reject(new AxiosError('maxContentLength size of ' + config.maxContentLength + ' exceeded', AxiosError.ERR_BAD_RESPONSE, config, lastRequest));\n" +
      '          }\n' +
      '        });\n' +
      "        stream.on('aborted', function handlerStreamAborted() {\n" +
      '          if (rejected) {\n' +
      '            return;\n' +
      '          }\n' +
      '          stream.destroy();\n' +
      "          reject(new AxiosError('maxContentLength size of ' + config.maxContentLength + ' exceeded', AxiosError.ERR_BAD_RESPONSE, config, lastRequest));\n" +
      '        });\n' +
      "        stream.on('error', function handleStreamError(err) {\n" +
      '          if (req.aborted) return;\n' +
      '          reject(AxiosError.from(err, null, config, lastRequest));\n' +
      '        });\n' +
      "        stream.on('end', function handleStreamEnd() {\n" +
      '          try {\n' +
      '            var responseData = responseBuffer.length === 1 ? responseBuffer[0] : Buffer.concat(responseBuffer);\n' +
      "            if (config.responseType !== 'arraybuffer') {\n" +
      '              responseData = responseData.toString(config.responseEncoding);\n' +
      "              if (!config.responseEncoding || config.responseEncoding === 'utf8') {\n" +
      '                responseData = utils.stripBOM(responseData);\n' +
      '              }\n' +
      '            }\n' +
      '            response.data = responseData;\n' +
      '          } catch (err) {\n' +
      '            reject(AxiosError.from(err, null, config, response.request, response));\n' +
      '          }\n' +
      '          settle(resolve, reject, response);\n' +
      '        });\n' +
      '      }\n' +
      '    });\n' +
      '\n' +
      '    // Handle errors\n' +
      "    req.on('error', function handleRequestError(err) {\n" +
      '      // @todo remove\n' +
      '      // if (req.aborted && err.code !== AxiosError.ERR_FR_TOO_MANY_REDIRECTS) return;\n' +
      '      reject(AxiosError.from(err, null, config, req));\n' +
      '    });\n' +
      '\n' +
      ' '... 2346 more characters,
    transformRequest: [
      '[function] function transformRequest(data, headers) {\n' +
        "    normalizeHeaderName(headers, 'Accept');\n" +
        "    normalizeHeaderName(headers, 'Content-Type');\n" +
        '    if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {\n' +
        '      return data;\n' +
        '    }\n' +
        '    if (utils.isArrayBufferView(data)) {\n' +
        '      return data.buffer;\n' +
        '    }\n' +
        '    if (utils.isURLSearchParams(data)) {\n' +
        "      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');\n" +
        '      return data.toString();\n' +
        '    }\n' +
        '    var isObjectPayload = utils.isObject(data);\n' +
        "    var contentType = headers && headers['Content-Type'];\n" +
        '    var isFileList;\n' +
        "    if ((isFileList = utils.isFileList(data)) || isObjectPayload && contentType === 'multipart/form-data') {\n" +
        '      var _FormData = this.env && this.env.FormData;\n' +
        '      return toFormData(isFileList ? {\n' +
        "        'files[]': data\n" +
        '      } : data, _FormData && new _FormData());\n' +
        "    } else if (isObjectPayload || contentType === 'application/json') {\n" +
        "      setContentTypeIfUnset(headers, 'application/json');\n" +
        '      return stringifySafely(data);\n' +
        '    }\n' +
        '    return data;\n' +
        '  }'
    ],
    transformResponse: [
      '[function] function transformResponse(data) {\n' +
        '    var transitional = this.transitional || defaults.transitional;\n' +
        '    var silentJSONParsing = transitional && transitional.silentJSONParsing;\n' +
        '    var forcedJSONParsing = transitional && transitional.forcedJSONParsing;\n' +
        "    var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';\n" +
        '    if (strictJSONParsing || forcedJSONParsing && utils.isString(data) && data.length) {\n' +
        '      try {\n' +
        '        return JSON.parse(data);\n' +
        '      } catch (e) {\n' +
        '        if (strictJSONParsing) {\n' +
        "          if (e.name === 'SyntaxError') {\n" +
        '            throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);\n' +
        '          }\n' +
        '          throw e;\n' +
        '        }\n' +
        '      }\n' +
        '    }\n' +
        '    return data;\n' +
        '  }'
    ],
    timeout: 0,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
      FormData: '[function] function FormData(options) {\n' +
        '  if (!(this instanceof FormData)) {\n' +
        '    return new FormData(options);\n' +
        '  }\n' +
        '  this._overheadLength = 0;\n' +
        '  this._valueLength = 0;\n' +
        '  this._valuesToMeasure = [];\n' +
        '  CombinedStream.call(this);\n' +
        '  options = options || {};\n' +
        '  for (var option in options) {\n' +
        '    this[option] = options[option];\n' +
        '  }\n' +
        '}'
    },
    validateStatus: '[function] function validateStatus(status) {\n' +
      '    return status >= 200 && status < 300;\n' +
      '  }',
    headers: {
      Accept: 'application/json, text/plain, */*',
      Authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2MjU5NiwiZXhwIjoxNjg5MTQ4OTk2fQ.kTZU-NiFUpr12reLEpesgyTCwWHUzvXcn24FQiLfhLs',
      'Content-Type': '',
      'User-Agent': 'axios/0.27.2'
    },
    url: 'https://connect-api.dev.insiteflow.io/v1/connect/container/config?organizationId=711729a8-a473-47bf-b27f-8abc1ee52281&containerType=desktop',
    method: 'get'
  },
  code: 'ERR_BAD_REQUEST',
  status: 401
}
[2023-07-11 13:33:23.030] [info]  In the catch  {
  message: 'Request failed with status code 401',
  name: 'AxiosError',
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: '[function] function httpAdapter(config) {\n' +
      '  return new Promise(function dispatchHttpRequest(resolvePromise, rejectPromise) {\n' +
      '    var onCanceled;\n' +
      '    function done() {\n' +
      '      if (config.cancelToken) {\n' +
      '        config.cancelToken.unsubscribe(onCanceled);\n' +
      '      }\n' +
      '      if (config.signal) {\n' +
      "        config.signal.removeEventListener('abort', onCanceled);\n" +
      '      }\n' +
      '    }\n' +
      '    var resolve = function resolve(value) {\n' +
      '      done();\n' +
      '      resolvePromise(value);\n' +
      '    };\n' +
      '    var rejected = false;\n' +
      '    var reject = function reject(value) {\n' +
      '      done();\n' +
      '      rejected = true;\n' +
      '      rejectPromise(value);\n' +
      '    };\n' +
      '    var data = config.data;\n' +
      '    var headers = config.headers;\n' +
      '    var headerNames = {};\n' +
      '    Object.keys(headers).forEach(function storeLowerName(name) {\n' +
      '      headerNames[name.toLowerCase()] = name;\n' +
      '    });\n' +
      '\n' +
      '    // Set User-Agent (required by some servers)\n' +
      '    // See https://github.com/axios/axios/issues/69\n' +
      "    if ('user-agent' in headerNames) {\n" +
      '      // User-Agent is specified; handle case where no UA header is desired\n' +
      "      if (!headers[headerNames['user-agent']]) {\n" +
      "        delete headers[headerNames['user-agent']];\n" +
      '      }\n' +
      '      // Otherwise, use specified value\n' +
      '    } else {\n' +
      "      // Only set header if it hasn't been set in config\n" +
      "      headers['User-Agent'] = 'axios/' + VERSION;\n" +
      '    }\n' +
      '\n' +
      '    // support for https://www.npmjs.com/package/form-data api\n' +
      '    if (utils.isFormData(data) && utils.isFunction(data.getHeaders)) {\n' +
      '      Object.assign(headers, data.getHeaders());\n' +
      '    } else if (data && !utils.isStream(data)) {\n' +
      '      if (Buffer.isBuffer(data)) {\n' +
      '        // Nothing to do...\n' +
      '      } else if (utils.isArrayBuffer(data)) {\n' +
      '        data = Buffer.from(new Uint8Array(data));\n' +
      '      } else if (utils.isString(data)) {\n' +
      "        data = Buffer.from(data, 'utf-8');\n" +
      '      } else {\n' +
      "        return reject(new AxiosError('Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream', AxiosError.ERR_BAD_REQUEST, config));\n" +
      '      }\n' +
      '      if (config.maxBodyLength > -1 && data.length > config.maxBodyLength) {\n' +
      "        return reject(new AxiosError('Request body larger than maxBodyLength limit', AxiosError.ERR_BAD_REQUEST, config));\n" +
      '      }\n' +
      '\n' +
      '      // Add Content-Length header if data exists\n' +
      "      if (!headerNames['content-length']) {\n" +
      "        headers['Content-Length'] = data.length;\n" +
      '      }\n' +
      '    }\n' +
      '\n' +
      '    // HTTP basic authentication\n' +
      '    var auth = undefined;\n' +
      '    if (config.auth) {\n' +
      "      var username = config.auth.username || '';\n" +
      "      var password = config.auth.password || '';\n" +
      "      auth = username + ':' + password;\n" +
      '    }\n' +
      '\n' +
      '    // Parse url\n' +
      '    var fullPath = buildFullPath(config.baseURL, config.url);\n' +
      '    var parsed = url.parse(fullPath);\n' +
      '    var protocol = parsed.protocol || supportedProtocols[0];\n' +
      '    if (supportedProtocols.indexOf(protocol) === -1) {\n' +
      "      return reject(new AxiosError('Unsupported protocol ' + protocol, AxiosError.ERR_BAD_REQUEST, config));\n" +
      '    }\n' +
      '    if (!auth && parsed.auth) {\n' +
      "      var urlAuth = parsed.auth.split(':');\n" +
      "      var urlUsername = urlAuth[0] || '';\n" +
      "      var urlPassword = urlAuth[1] || '';\n" +
      "      auth = urlUsername + ':' + urlPassword;\n" +
      '    }\n' +
      '    if (auth && headerNames.authorization) {\n' +
      '      delete headers[headerNames.authorization];\n' +
      '    }\n' +
      '    var isHttpsRequest = isHttps.test(protocol);\n' +
      '    var agent = isHttpsRequest ? config.httpsAgent : config.httpAgent;\n' +
      '    try {\n' +
      "      buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\\?/, '');\n" +
      '    } catch (err) {\n' +
      '      var customErr = new Error(err.message);\n' +
      '      customErr.config = config;\n' +
      '      customErr.url = config.url;\n' +
      '      customErr.exists = true;\n' +
      '      reject(customErr);\n' +
      '    }\n' +
      '    var options = {\n' +
      "      path: buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\\?/, ''),\n" +
      '      method: config.method.toUpperCase(),\n' +
      '      headers: headers,\n' +
      '      agent: agent,\n' +
      '      agents: {\n' +
      '        http: config.httpAgent,\n' +
      '        https: config.httpsAgent\n' +
      '      },\n' +
      '      auth: auth\n' +
      '    };\n' +
      '    if (config.socketPath) {\n' +
      '      options.socketPath = config.socketPath;\n' +
      '    } else {\n' +
      '      options.hostname = parsed.hostname;\n' +
      '      options.port = parsed.port;\n' +
      '    }\n' +
      '    var proxy = config.proxy;\n' +
      '    if (!proxy && proxy !== false) {\n' +
      "      var proxyEnv = protocol.slice(0, -1) + '_proxy';\n" +
      '      var proxyUrl = process.env[proxyEnv] || process.env[proxyEnv.toUpperCase()];\n' +
      '      if (proxyUrl) {\n' +
      '        var parsedProxyUrl = url.parse(proxyUrl);\n' +
      '        var noProxyEnv = process.env.no_proxy || process.env.NO_PROXY;\n' +
      '        var shouldProxy = true;\n' +
      '        if (noProxyEnv) {\n' +
      "          var noProxy = noProxyEnv.split(',').map(function trim(s) {\n" +
      '            return s.trim();\n' +
      '          });\n' +
      '          shouldProxy = !noProxy.some(function proxyMatch(proxyElement) {\n' +
      '            if (!proxyElement) {\n' +
      '              return false;\n' +
      '            }\n' +
      "            if (proxyElement === '*') {\n" +
      '              return true;\n' +
      '            }\n' +
      "            if (proxyElement[0] === '.' && parsed.hostname.substr(parsed.hostname.length - proxyElement.length) === proxyElement) {\n" +
      '              return true;\n' +
      '            }\n' +
      '            return parsed.hostname === proxyElement;\n' +
      '          });\n' +
      '        }\n' +
      '        if (shouldProxy) {\n' +
      '          proxy = {\n' +
      '            host: parsedProxyUrl.hostname,\n' +
      '            port: parsedProxyUrl.port,\n' +
      '            protocol: parsedProxyUrl.protocol\n' +
      '          };\n' +
      '          if (parsedProxyUrl.auth) {\n' +
      "            var proxyUrlAuth = parsedProxyUrl.auth.split(':');\n" +
      '            proxy.auth = {\n' +
      '              username: proxyUrlAuth[0],\n' +
      '              password: proxyUrlAuth[1]\n' +
      '            };\n' +
      '          }\n' +
      '        }\n' +
      '      }\n' +
      '    }\n' +
      '    if (proxy) {\n' +
      "      options.headers.host = parsed.hostname + (parsed.port ? ':' + parsed.port : '');\n" +
      "      setProxy(options, proxy, protocol + '//' + parsed.hostname + (parsed.port ? ':' + parsed.port : '') + options.path);\n" +
      '    }\n' +
      '    var transport;\n' +
      '    var isHttpsProxy = isHttpsRequest && (proxy ? isHttps.test(proxy.protocol) : true);\n' +
      '    if (config.transport) {\n' +
      '      transport = config.transport;\n' +
      '    } else if (config.maxRedirects === 0) {\n' +
      '      transport = isHttpsProxy ? https : http;\n' +
      '    } else {\n' +
      '      if (config.maxRedirects) {\n' +
      '        options.maxRedirects = config.maxRedirects;\n' +
      '      }\n' +
      '      if (config.beforeRedirect) {\n' +
      '        options.beforeRedirect = config.beforeRedirect;\n' +
      '      }\n' +
      '      transport = isHttpsProxy ? httpsFollow : httpFollow;\n' +
      '    }\n' +
      '    if (config.maxBodyLength > -1) {\n' +
      '      options.maxBodyLength = config.maxBodyLength;\n' +
      '    }\n' +
      '    if (config.insecureHTTPParser) {\n' +
      '      options.insecureHTTPParser = config.insecureHTTPParser;\n' +
      '    }\n' +
      '\n' +
      '    // Create the request\n' +
      '    var req = transport.request(options, function handleResponse(res) {\n' +
      '      if (req.aborted) return;\n' +
      '\n' +
      '      // uncompress the response body transparently if required\n' +
      '      var stream = res;\n' +
      '\n' +
      '      // return the last request in case of redirects\n' +
      '      var lastRequest = res.req || req;\n' +
      '\n' +
      '      // if no content, is HEAD request or decompress disabled we should not decompress\n' +
      "      if (res.statusCode !== 204 && lastRequest.method !== 'HEAD' && config.decompress !== false) {\n" +
      "        switch (res.headers['content-encoding']) {\n" +
      '          /*eslint default-case:0*/\n' +
      "          case 'gzip':\n" +
      "          case 'compress':\n" +
      "          case 'deflate':\n" +
      '            // add the unzipper to the body stream processing pipeline\n' +
      '            stream = stream.pipe(zlib.createUnzip());\n' +
      '\n' +
      '            // remove the content-encoding in order to not confuse downstream operations\n' +
      "            delete res.headers['content-encoding'];\n" +
      '            break;\n' +
      '        }\n' +
      '      }\n' +
      '      var response = {\n' +
      '        status: res.statusCode,\n' +
      '        statusText: res.statusMessage,\n' +
      '        headers: res.headers,\n' +
      '        config: config,\n' +
      '        request: lastRequest\n' +
      '      };\n' +
      "      if (config.responseType === 'stream') {\n" +
      '        response.data = stream;\n' +
      '        settle(resolve, reject, response);\n' +
      '      } else {\n' +
      '        var responseBuffer = [];\n' +
      '        var totalResponseBytes = 0;\n' +
      "        stream.on('data', function handleStreamData(chunk) {\n" +
      '          responseBuffer.push(chunk);\n' +
      '          totalResponseBytes += chunk.length;\n' +
      '\n' +
      '          // make sure the content length is not over the maxContentLength if specified\n' +
      '          if (config.maxContentLength > -1 && totalResponseBytes > config.maxContentLength) {\n' +
      '            // stream.destoy() emit aborted event before calling reject() on Node.js v16\n' +
      '            rejected = true;\n' +
      '            stream.destroy();\n' +
      "            reject(new AxiosError('maxContentLength size of ' + config.maxContentLength + ' exceeded', AxiosError.ERR_BAD_RESPONSE, config, lastRequest));\n" +
      '          }\n' +
      '        });\n' +
      "        stream.on('aborted', function handlerStreamAborted() {\n" +
      '          if (rejected) {\n' +
      '            return;\n' +
      '          }\n' +
      '          stream.destroy();\n' +
      "          reject(new AxiosError('maxContentLength size of ' + config.maxContentLength + ' exceeded', AxiosError.ERR_BAD_RESPONSE, config, lastRequest));\n" +
      '        });\n' +
      "        stream.on('error', function handleStreamError(err) {\n" +
      '          if (req.aborted) return;\n' +
      '          reject(AxiosError.from(err, null, config, lastRequest));\n' +
      '        });\n' +
      "        stream.on('end', function handleStreamEnd() {\n" +
      '          try {\n' +
      '            var responseData = responseBuffer.length === 1 ? responseBuffer[0] : Buffer.concat(responseBuffer);\n' +
      "            if (config.responseType !== 'arraybuffer') {\n" +
      '              responseData = responseData.toString(config.responseEncoding);\n' +
      "              if (!config.responseEncoding || config.responseEncoding === 'utf8') {\n" +
      '                responseData = utils.stripBOM(responseData);\n' +
      '              }\n' +
      '            }\n' +
      '            response.data = responseData;\n' +
      '          } catch (err) {\n' +
      '            reject(AxiosError.from(err, null, config, response.request, response));\n' +
      '          }\n' +
      '          settle(resolve, reject, response);\n' +
      '        });\n' +
      '      }\n' +
      '    });\n' +
      '\n' +
      '    // Handle errors\n' +
      "    req.on('error', function handleRequestError(err) {\n" +
      '      // @todo remove\n' +
      '      // if (req.aborted && err.code !== AxiosError.ERR_FR_TOO_MANY_REDIRECTS) return;\n' +
      '      reject(AxiosError.from(err, null, config, req));\n' +
      '    });\n' +
      '\n' +
      ' '... 2346 more characters,
    transformRequest: [
      '[function] function transformRequest(data, headers) {\n' +
        "    normalizeHeaderName(headers, 'Accept');\n" +
        "    normalizeHeaderName(headers, 'Content-Type');\n" +
        '    if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {\n' +
        '      return data;\n' +
        '    }\n' +
        '    if (utils.isArrayBufferView(data)) {\n' +
        '      return data.buffer;\n' +
        '    }\n' +
        '    if (utils.isURLSearchParams(data)) {\n' +
        "      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');\n" +
        '      return data.toString();\n' +
        '    }\n' +
        '    var isObjectPayload = utils.isObject(data);\n' +
        "    var contentType = headers && headers['Content-Type'];\n" +
        '    var isFileList;\n' +
        "    if ((isFileList = utils.isFileList(data)) || isObjectPayload && contentType === 'multipart/form-data') {\n" +
        '      var _FormData = this.env && this.env.FormData;\n' +
        '      return toFormData(isFileList ? {\n' +
        "        'files[]': data\n" +
        '      } : data, _FormData && new _FormData());\n' +
        "    } else if (isObjectPayload || contentType === 'application/json') {\n" +
        "      setContentTypeIfUnset(headers, 'application/json');\n" +
        '      return stringifySafely(data);\n' +
        '    }\n' +
        '    return data;\n' +
        '  }'
    ],
    transformResponse: [
      '[function] function transformResponse(data) {\n' +
        '    var transitional = this.transitional || defaults.transitional;\n' +
        '    var silentJSONParsing = transitional && transitional.silentJSONParsing;\n' +
        '    var forcedJSONParsing = transitional && transitional.forcedJSONParsing;\n' +
        "    var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';\n" +
        '    if (strictJSONParsing || forcedJSONParsing && utils.isString(data) && data.length) {\n' +
        '      try {\n' +
        '        return JSON.parse(data);\n' +
        '      } catch (e) {\n' +
        '        if (strictJSONParsing) {\n' +
        "          if (e.name === 'SyntaxError') {\n" +
        '            throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);\n' +
        '          }\n' +
        '          throw e;\n' +
        '        }\n' +
        '      }\n' +
        '    }\n' +
        '    return data;\n' +
        '  }'
    ],
    timeout: 0,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
      FormData: '[function] function FormData(options) {\n' +
        '  if (!(this instanceof FormData)) {\n' +
        '    return new FormData(options);\n' +
        '  }\n' +
        '  this._overheadLength = 0;\n' +
        '  this._valueLength = 0;\n' +
        '  this._valuesToMeasure = [];\n' +
        '  CombinedStream.call(this);\n' +
        '  options = options || {};\n' +
        '  for (var option in options) {\n' +
        '    this[option] = options[option];\n' +
        '  }\n' +
        '}'
    },
    validateStatus: '[function] function validateStatus(status) {\n' +
      '    return status >= 200 && status < 300;\n' +
      '  }',
    headers: {
      Accept: 'application/json, text/plain, */*',
      Authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2MjU5NiwiZXhwIjoxNjg5MTQ4OTk2fQ.kTZU-NiFUpr12reLEpesgyTCwWHUzvXcn24FQiLfhLs',
      'Content-Type': '',
      'User-Agent': 'axios/0.27.2'
    },
    url: 'https://connect-api.dev.insiteflow.io/v1/connect/container/config?organizationId=711729a8-a473-47bf-b27f-8abc1ee52281&containerType=desktop',
    method: 'get'
  },
  code: 'ERR_BAD_REQUEST',
  status: 401
}
[2023-07-11 13:33:28.047] [info]  In the catch  {
  message: 'Request failed with status code 401',
  name: 'AxiosError',
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: '[function] function httpAdapter(config) {\n' +
      '  return new Promise(function dispatchHttpRequest(resolvePromise, rejectPromise) {\n' +
      '    var onCanceled;\n' +
      '    function done() {\n' +
      '      if (config.cancelToken) {\n' +
      '        config.cancelToken.unsubscribe(onCanceled);\n' +
      '      }\n' +
      '      if (config.signal) {\n' +
      "        config.signal.removeEventListener('abort', onCanceled);\n" +
      '      }\n' +
      '    }\n' +
      '    var resolve = function resolve(value) {\n' +
      '      done();\n' +
      '      resolvePromise(value);\n' +
      '    };\n' +
      '    var rejected = false;\n' +
      '    var reject = function reject(value) {\n' +
      '      done();\n' +
      '      rejected = true;\n' +
      '      rejectPromise(value);\n' +
      '    };\n' +
      '    var data = config.data;\n' +
      '    var headers = config.headers;\n' +
      '    var headerNames = {};\n' +
      '    Object.keys(headers).forEach(function storeLowerName(name) {\n' +
      '      headerNames[name.toLowerCase()] = name;\n' +
      '    });\n' +
      '\n' +
      '    // Set User-Agent (required by some servers)\n' +
      '    // See https://github.com/axios/axios/issues/69\n' +
      "    if ('user-agent' in headerNames) {\n" +
      '      // User-Agent is specified; handle case where no UA header is desired\n' +
      "      if (!headers[headerNames['user-agent']]) {\n" +
      "        delete headers[headerNames['user-agent']];\n" +
      '      }\n' +
      '      // Otherwise, use specified value\n' +
      '    } else {\n' +
      "      // Only set header if it hasn't been set in config\n" +
      "      headers['User-Agent'] = 'axios/' + VERSION;\n" +
      '    }\n' +
      '\n' +
      '    // support for https://www.npmjs.com/package/form-data api\n' +
      '    if (utils.isFormData(data) && utils.isFunction(data.getHeaders)) {\n' +
      '      Object.assign(headers, data.getHeaders());\n' +
      '    } else if (data && !utils.isStream(data)) {\n' +
      '      if (Buffer.isBuffer(data)) {\n' +
      '        // Nothing to do...\n' +
      '      } else if (utils.isArrayBuffer(data)) {\n' +
      '        data = Buffer.from(new Uint8Array(data));\n' +
      '      } else if (utils.isString(data)) {\n' +
      "        data = Buffer.from(data, 'utf-8');\n" +
      '      } else {\n' +
      "        return reject(new AxiosError('Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream', AxiosError.ERR_BAD_REQUEST, config));\n" +
      '      }\n' +
      '      if (config.maxBodyLength > -1 && data.length > config.maxBodyLength) {\n' +
      "        return reject(new AxiosError('Request body larger than maxBodyLength limit', AxiosError.ERR_BAD_REQUEST, config));\n" +
      '      }\n' +
      '\n' +
      '      // Add Content-Length header if data exists\n' +
      "      if (!headerNames['content-length']) {\n" +
      "        headers['Content-Length'] = data.length;\n" +
      '      }\n' +
      '    }\n' +
      '\n' +
      '    // HTTP basic authentication\n' +
      '    var auth = undefined;\n' +
      '    if (config.auth) {\n' +
      "      var username = config.auth.username || '';\n" +
      "      var password = config.auth.password || '';\n" +
      "      auth = username + ':' + password;\n" +
      '    }\n' +
      '\n' +
      '    // Parse url\n' +
      '    var fullPath = buildFullPath(config.baseURL, config.url);\n' +
      '    var parsed = url.parse(fullPath);\n' +
      '    var protocol = parsed.protocol || supportedProtocols[0];\n' +
      '    if (supportedProtocols.indexOf(protocol) === -1) {\n' +
      "      return reject(new AxiosError('Unsupported protocol ' + protocol, AxiosError.ERR_BAD_REQUEST, config));\n" +
      '    }\n' +
      '    if (!auth && parsed.auth) {\n' +
      "      var urlAuth = parsed.auth.split(':');\n" +
      "      var urlUsername = urlAuth[0] || '';\n" +
      "      var urlPassword = urlAuth[1] || '';\n" +
      "      auth = urlUsername + ':' + urlPassword;\n" +
      '    }\n' +
      '    if (auth && headerNames.authorization) {\n' +
      '      delete headers[headerNames.authorization];\n' +
      '    }\n' +
      '    var isHttpsRequest = isHttps.test(protocol);\n' +
      '    var agent = isHttpsRequest ? config.httpsAgent : config.httpAgent;\n' +
      '    try {\n' +
      "      buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\\?/, '');\n" +
      '    } catch (err) {\n' +
      '      var customErr = new Error(err.message);\n' +
      '      customErr.config = config;\n' +
      '      customErr.url = config.url;\n' +
      '      customErr.exists = true;\n' +
      '      reject(customErr);\n' +
      '    }\n' +
      '    var options = {\n' +
      "      path: buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\\?/, ''),\n" +
      '      method: config.method.toUpperCase(),\n' +
      '      headers: headers,\n' +
      '      agent: agent,\n' +
      '      agents: {\n' +
      '        http: config.httpAgent,\n' +
      '        https: config.httpsAgent\n' +
      '      },\n' +
      '      auth: auth\n' +
      '    };\n' +
      '    if (config.socketPath) {\n' +
      '      options.socketPath = config.socketPath;\n' +
      '    } else {\n' +
      '      options.hostname = parsed.hostname;\n' +
      '      options.port = parsed.port;\n' +
      '    }\n' +
      '    var proxy = config.proxy;\n' +
      '    if (!proxy && proxy !== false) {\n' +
      "      var proxyEnv = protocol.slice(0, -1) + '_proxy';\n" +
      '      var proxyUrl = process.env[proxyEnv] || process.env[proxyEnv.toUpperCase()];\n' +
      '      if (proxyUrl) {\n' +
      '        var parsedProxyUrl = url.parse(proxyUrl);\n' +
      '        var noProxyEnv = process.env.no_proxy || process.env.NO_PROXY;\n' +
      '        var shouldProxy = true;\n' +
      '        if (noProxyEnv) {\n' +
      "          var noProxy = noProxyEnv.split(',').map(function trim(s) {\n" +
      '            return s.trim();\n' +
      '          });\n' +
      '          shouldProxy = !noProxy.some(function proxyMatch(proxyElement) {\n' +
      '            if (!proxyElement) {\n' +
      '              return false;\n' +
      '            }\n' +
      "            if (proxyElement === '*') {\n" +
      '              return true;\n' +
      '            }\n' +
      "            if (proxyElement[0] === '.' && parsed.hostname.substr(parsed.hostname.length - proxyElement.length) === proxyElement) {\n" +
      '              return true;\n' +
      '            }\n' +
      '            return parsed.hostname === proxyElement;\n' +
      '          });\n' +
      '        }\n' +
      '        if (shouldProxy) {\n' +
      '          proxy = {\n' +
      '            host: parsedProxyUrl.hostname,\n' +
      '            port: parsedProxyUrl.port,\n' +
      '            protocol: parsedProxyUrl.protocol\n' +
      '          };\n' +
      '          if (parsedProxyUrl.auth) {\n' +
      "            var proxyUrlAuth = parsedProxyUrl.auth.split(':');\n" +
      '            proxy.auth = {\n' +
      '              username: proxyUrlAuth[0],\n' +
      '              password: proxyUrlAuth[1]\n' +
      '            };\n' +
      '          }\n' +
      '        }\n' +
      '      }\n' +
      '    }\n' +
      '    if (proxy) {\n' +
      "      options.headers.host = parsed.hostname + (parsed.port ? ':' + parsed.port : '');\n" +
      "      setProxy(options, proxy, protocol + '//' + parsed.hostname + (parsed.port ? ':' + parsed.port : '') + options.path);\n" +
      '    }\n' +
      '    var transport;\n' +
      '    var isHttpsProxy = isHttpsRequest && (proxy ? isHttps.test(proxy.protocol) : true);\n' +
      '    if (config.transport) {\n' +
      '      transport = config.transport;\n' +
      '    } else if (config.maxRedirects === 0) {\n' +
      '      transport = isHttpsProxy ? https : http;\n' +
      '    } else {\n' +
      '      if (config.maxRedirects) {\n' +
      '        options.maxRedirects = config.maxRedirects;\n' +
      '      }\n' +
      '      if (config.beforeRedirect) {\n' +
      '        options.beforeRedirect = config.beforeRedirect;\n' +
      '      }\n' +
      '      transport = isHttpsProxy ? httpsFollow : httpFollow;\n' +
      '    }\n' +
      '    if (config.maxBodyLength > -1) {\n' +
      '      options.maxBodyLength = config.maxBodyLength;\n' +
      '    }\n' +
      '    if (config.insecureHTTPParser) {\n' +
      '      options.insecureHTTPParser = config.insecureHTTPParser;\n' +
      '    }\n' +
      '\n' +
      '    // Create the request\n' +
      '    var req = transport.request(options, function handleResponse(res) {\n' +
      '      if (req.aborted) return;\n' +
      '\n' +
      '      // uncompress the response body transparently if required\n' +
      '      var stream = res;\n' +
      '\n' +
      '      // return the last request in case of redirects\n' +
      '      var lastRequest = res.req || req;\n' +
      '\n' +
      '      // if no content, is HEAD request or decompress disabled we should not decompress\n' +
      "      if (res.statusCode !== 204 && lastRequest.method !== 'HEAD' && config.decompress !== false) {\n" +
      "        switch (res.headers['content-encoding']) {\n" +
      '          /*eslint default-case:0*/\n' +
      "          case 'gzip':\n" +
      "          case 'compress':\n" +
      "          case 'deflate':\n" +
      '            // add the unzipper to the body stream processing pipeline\n' +
      '            stream = stream.pipe(zlib.createUnzip());\n' +
      '\n' +
      '            // remove the content-encoding in order to not confuse downstream operations\n' +
      "            delete res.headers['content-encoding'];\n" +
      '            break;\n' +
      '        }\n' +
      '      }\n' +
      '      var response = {\n' +
      '        status: res.statusCode,\n' +
      '        statusText: res.statusMessage,\n' +
      '        headers: res.headers,\n' +
      '        config: config,\n' +
      '        request: lastRequest\n' +
      '      };\n' +
      "      if (config.responseType === 'stream') {\n" +
      '        response.data = stream;\n' +
      '        settle(resolve, reject, response);\n' +
      '      } else {\n' +
      '        var responseBuffer = [];\n' +
      '        var totalResponseBytes = 0;\n' +
      "        stream.on('data', function handleStreamData(chunk) {\n" +
      '          responseBuffer.push(chunk);\n' +
      '          totalResponseBytes += chunk.length;\n' +
      '\n' +
      '          // make sure the content length is not over the maxContentLength if specified\n' +
      '          if (config.maxContentLength > -1 && totalResponseBytes > config.maxContentLength) {\n' +
      '            // stream.destoy() emit aborted event before calling reject() on Node.js v16\n' +
      '            rejected = true;\n' +
      '            stream.destroy();\n' +
      "            reject(new AxiosError('maxContentLength size of ' + config.maxContentLength + ' exceeded', AxiosError.ERR_BAD_RESPONSE, config, lastRequest));\n" +
      '          }\n' +
      '        });\n' +
      "        stream.on('aborted', function handlerStreamAborted() {\n" +
      '          if (rejected) {\n' +
      '            return;\n' +
      '          }\n' +
      '          stream.destroy();\n' +
      "          reject(new AxiosError('maxContentLength size of ' + config.maxContentLength + ' exceeded', AxiosError.ERR_BAD_RESPONSE, config, lastRequest));\n" +
      '        });\n' +
      "        stream.on('error', function handleStreamError(err) {\n" +
      '          if (req.aborted) return;\n' +
      '          reject(AxiosError.from(err, null, config, lastRequest));\n' +
      '        });\n' +
      "        stream.on('end', function handleStreamEnd() {\n" +
      '          try {\n' +
      '            var responseData = responseBuffer.length === 1 ? responseBuffer[0] : Buffer.concat(responseBuffer);\n' +
      "            if (config.responseType !== 'arraybuffer') {\n" +
      '              responseData = responseData.toString(config.responseEncoding);\n' +
      "              if (!config.responseEncoding || config.responseEncoding === 'utf8') {\n" +
      '                responseData = utils.stripBOM(responseData);\n' +
      '              }\n' +
      '            }\n' +
      '            response.data = responseData;\n' +
      '          } catch (err) {\n' +
      '            reject(AxiosError.from(err, null, config, response.request, response));\n' +
      '          }\n' +
      '          settle(resolve, reject, response);\n' +
      '        });\n' +
      '      }\n' +
      '    });\n' +
      '\n' +
      '    // Handle errors\n' +
      "    req.on('error', function handleRequestError(err) {\n" +
      '      // @todo remove\n' +
      '      // if (req.aborted && err.code !== AxiosError.ERR_FR_TOO_MANY_REDIRECTS) return;\n' +
      '      reject(AxiosError.from(err, null, config, req));\n' +
      '    });\n' +
      '\n' +
      ' '... 2346 more characters,
    transformRequest: [
      '[function] function transformRequest(data, headers) {\n' +
        "    normalizeHeaderName(headers, 'Accept');\n" +
        "    normalizeHeaderName(headers, 'Content-Type');\n" +
        '    if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {\n' +
        '      return data;\n' +
        '    }\n' +
        '    if (utils.isArrayBufferView(data)) {\n' +
        '      return data.buffer;\n' +
        '    }\n' +
        '    if (utils.isURLSearchParams(data)) {\n' +
        "      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');\n" +
        '      return data.toString();\n' +
        '    }\n' +
        '    var isObjectPayload = utils.isObject(data);\n' +
        "    var contentType = headers && headers['Content-Type'];\n" +
        '    var isFileList;\n' +
        "    if ((isFileList = utils.isFileList(data)) || isObjectPayload && contentType === 'multipart/form-data') {\n" +
        '      var _FormData = this.env && this.env.FormData;\n' +
        '      return toFormData(isFileList ? {\n' +
        "        'files[]': data\n" +
        '      } : data, _FormData && new _FormData());\n' +
        "    } else if (isObjectPayload || contentType === 'application/json') {\n" +
        "      setContentTypeIfUnset(headers, 'application/json');\n" +
        '      return stringifySafely(data);\n' +
        '    }\n' +
        '    return data;\n' +
        '  }'
    ],
    transformResponse: [
      '[function] function transformResponse(data) {\n' +
        '    var transitional = this.transitional || defaults.transitional;\n' +
        '    var silentJSONParsing = transitional && transitional.silentJSONParsing;\n' +
        '    var forcedJSONParsing = transitional && transitional.forcedJSONParsing;\n' +
        "    var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';\n" +
        '    if (strictJSONParsing || forcedJSONParsing && utils.isString(data) && data.length) {\n' +
        '      try {\n' +
        '        return JSON.parse(data);\n' +
        '      } catch (e) {\n' +
        '        if (strictJSONParsing) {\n' +
        "          if (e.name === 'SyntaxError') {\n" +
        '            throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);\n' +
        '          }\n' +
        '          throw e;\n' +
        '        }\n' +
        '      }\n' +
        '    }\n' +
        '    return data;\n' +
        '  }'
    ],
    timeout: 0,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
      FormData: '[function] function FormData(options) {\n' +
        '  if (!(this instanceof FormData)) {\n' +
        '    return new FormData(options);\n' +
        '  }\n' +
        '  this._overheadLength = 0;\n' +
        '  this._valueLength = 0;\n' +
        '  this._valuesToMeasure = [];\n' +
        '  CombinedStream.call(this);\n' +
        '  options = options || {};\n' +
        '  for (var option in options) {\n' +
        '    this[option] = options[option];\n' +
        '  }\n' +
        '}'
    },
    validateStatus: '[function] function validateStatus(status) {\n' +
      '    return status >= 200 && status < 300;\n' +
      '  }',
    headers: {
      Accept: 'application/json, text/plain, */*',
      Authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2MjU5NiwiZXhwIjoxNjg5MTQ4OTk2fQ.kTZU-NiFUpr12reLEpesgyTCwWHUzvXcn24FQiLfhLs',
      'Content-Type': '',
      'User-Agent': 'axios/0.27.2'
    },
    url: 'https://connect-api.dev.insiteflow.io/v1/connect/container/config?organizationId=711729a8-a473-47bf-b27f-8abc1ee52281&containerType=desktop',
    method: 'get'
  },
  code: 'ERR_BAD_REQUEST',
  status: 401
}
[2023-07-11 13:34:43.759] [info]  Started /home/lnv-75/Documents/insiteFlow/desktop-app-container/test/out AES-128
[2023-07-11 13:34:44.741] [info]  In the catch  {
  transitional: {
    silentJSONParsing: true,
    forcedJSONParsing: true,
    clarifyTimeoutError: false
  },
  adapter: '[function] function httpAdapter(config) {\n' +
    '  return new Promise(function dispatchHttpRequest(resolvePromise, rejectPromise) {\n' +
    '    var onCanceled;\n' +
    '    function done() {\n' +
    '      if (config.cancelToken) {\n' +
    '        config.cancelToken.unsubscribe(onCanceled);\n' +
    '      }\n' +
    '      if (config.signal) {\n' +
    "        config.signal.removeEventListener('abort', onCanceled);\n" +
    '      }\n' +
    '    }\n' +
    '    var resolve = function resolve(value) {\n' +
    '      done();\n' +
    '      resolvePromise(value);\n' +
    '    };\n' +
    '    var rejected = false;\n' +
    '    var reject = function reject(value) {\n' +
    '      done();\n' +
    '      rejected = true;\n' +
    '      rejectPromise(value);\n' +
    '    };\n' +
    '    var data = config.data;\n' +
    '    var headers = config.headers;\n' +
    '    var headerNames = {};\n' +
    '    Object.keys(headers).forEach(function storeLowerName(name) {\n' +
    '      headerNames[name.toLowerCase()] = name;\n' +
    '    });\n' +
    '\n' +
    '    // Set User-Agent (required by some servers)\n' +
    '    // See https://github.com/axios/axios/issues/69\n' +
    "    if ('user-agent' in headerNames) {\n" +
    '      // User-Agent is specified; handle case where no UA header is desired\n' +
    "      if (!headers[headerNames['user-agent']]) {\n" +
    "        delete headers[headerNames['user-agent']];\n" +
    '      }\n' +
    '      // Otherwise, use specified value\n' +
    '    } else {\n' +
    "      // Only set header if it hasn't been set in config\n" +
    "      headers['User-Agent'] = 'axios/' + VERSION;\n" +
    '    }\n' +
    '\n' +
    '    // support for https://www.npmjs.com/package/form-data api\n' +
    '    if (utils.isFormData(data) && utils.isFunction(data.getHeaders)) {\n' +
    '      Object.assign(headers, data.getHeaders());\n' +
    '    } else if (data && !utils.isStream(data)) {\n' +
    '      if (Buffer.isBuffer(data)) {\n' +
    '        // Nothing to do...\n' +
    '      } else if (utils.isArrayBuffer(data)) {\n' +
    '        data = Buffer.from(new Uint8Array(data));\n' +
    '      } else if (utils.isString(data)) {\n' +
    "        data = Buffer.from(data, 'utf-8');\n" +
    '      } else {\n' +
    "        return reject(new AxiosError('Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream', AxiosError.ERR_BAD_REQUEST, config));\n" +
    '      }\n' +
    '      if (config.maxBodyLength > -1 && data.length > config.maxBodyLength) {\n' +
    "        return reject(new AxiosError('Request body larger than maxBodyLength limit', AxiosError.ERR_BAD_REQUEST, config));\n" +
    '      }\n' +
    '\n' +
    '      // Add Content-Length header if data exists\n' +
    "      if (!headerNames['content-length']) {\n" +
    "        headers['Content-Length'] = data.length;\n" +
    '      }\n' +
    '    }\n' +
    '\n' +
    '    // HTTP basic authentication\n' +
    '    var auth = undefined;\n' +
    '    if (config.auth) {\n' +
    "      var username = config.auth.username || '';\n" +
    "      var password = config.auth.password || '';\n" +
    "      auth = username + ':' + password;\n" +
    '    }\n' +
    '\n' +
    '    // Parse url\n' +
    '    var fullPath = buildFullPath(config.baseURL, config.url);\n' +
    '    var parsed = url.parse(fullPath);\n' +
    '    var protocol = parsed.protocol || supportedProtocols[0];\n' +
    '    if (supportedProtocols.indexOf(protocol) === -1) {\n' +
    "      return reject(new AxiosError('Unsupported protocol ' + protocol, AxiosError.ERR_BAD_REQUEST, config));\n" +
    '    }\n' +
    '    if (!auth && parsed.auth) {\n' +
    "      var urlAuth = parsed.auth.split(':');\n" +
    "      var urlUsername = urlAuth[0] || '';\n" +
    "      var urlPassword = urlAuth[1] || '';\n" +
    "      auth = urlUsername + ':' + urlPassword;\n" +
    '    }\n' +
    '    if (auth && headerNames.authorization) {\n' +
    '      delete headers[headerNames.authorization];\n' +
    '    }\n' +
    '    var isHttpsRequest = isHttps.test(protocol);\n' +
    '    var agent = isHttpsRequest ? config.httpsAgent : config.httpAgent;\n' +
    '    try {\n' +
    "      buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\\?/, '');\n" +
    '    } catch (err) {\n' +
    '      var customErr = new Error(err.message);\n' +
    '      customErr.config = config;\n' +
    '      customErr.url = config.url;\n' +
    '      customErr.exists = true;\n' +
    '      reject(customErr);\n' +
    '    }\n' +
    '    var options = {\n' +
    "      path: buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\\?/, ''),\n" +
    '      method: config.method.toUpperCase(),\n' +
    '      headers: headers,\n' +
    '      agent: agent,\n' +
    '      agents: {\n' +
    '        http: config.httpAgent,\n' +
    '        https: config.httpsAgent\n' +
    '      },\n' +
    '      auth: auth\n' +
    '    };\n' +
    '    if (config.socketPath) {\n' +
    '      options.socketPath = config.socketPath;\n' +
    '    } else {\n' +
    '      options.hostname = parsed.hostname;\n' +
    '      options.port = parsed.port;\n' +
    '    }\n' +
    '    var proxy = config.proxy;\n' +
    '    if (!proxy && proxy !== false) {\n' +
    "      var proxyEnv = protocol.slice(0, -1) + '_proxy';\n" +
    '      var proxyUrl = process.env[proxyEnv] || process.env[proxyEnv.toUpperCase()];\n' +
    '      if (proxyUrl) {\n' +
    '        var parsedProxyUrl = url.parse(proxyUrl);\n' +
    '        var noProxyEnv = process.env.no_proxy || process.env.NO_PROXY;\n' +
    '        var shouldProxy = true;\n' +
    '        if (noProxyEnv) {\n' +
    "          var noProxy = noProxyEnv.split(',').map(function trim(s) {\n" +
    '            return s.trim();\n' +
    '          });\n' +
    '          shouldProxy = !noProxy.some(function proxyMatch(proxyElement) {\n' +
    '            if (!proxyElement) {\n' +
    '              return false;\n' +
    '            }\n' +
    "            if (proxyElement === '*') {\n" +
    '              return true;\n' +
    '            }\n' +
    "            if (proxyElement[0] === '.' && parsed.hostname.substr(parsed.hostname.length - proxyElement.length) === proxyElement) {\n" +
    '              return true;\n' +
    '            }\n' +
    '            return parsed.hostname === proxyElement;\n' +
    '          });\n' +
    '        }\n' +
    '        if (shouldProxy) {\n' +
    '          proxy = {\n' +
    '            host: parsedProxyUrl.hostname,\n' +
    '            port: parsedProxyUrl.port,\n' +
    '            protocol: parsedProxyUrl.protocol\n' +
    '          };\n' +
    '          if (parsedProxyUrl.auth) {\n' +
    "            var proxyUrlAuth = parsedProxyUrl.auth.split(':');\n" +
    '            proxy.auth = {\n' +
    '              username: proxyUrlAuth[0],\n' +
    '              password: proxyUrlAuth[1]\n' +
    '            };\n' +
    '          }\n' +
    '        }\n' +
    '      }\n' +
    '    }\n' +
    '    if (proxy) {\n' +
    "      options.headers.host = parsed.hostname + (parsed.port ? ':' + parsed.port : '');\n" +
    "      setProxy(options, proxy, protocol + '//' + parsed.hostname + (parsed.port ? ':' + parsed.port : '') + options.path);\n" +
    '    }\n' +
    '    var transport;\n' +
    '    var isHttpsProxy = isHttpsRequest && (proxy ? isHttps.test(proxy.protocol) : true);\n' +
    '    if (config.transport) {\n' +
    '      transport = config.transport;\n' +
    '    } else if (config.maxRedirects === 0) {\n' +
    '      transport = isHttpsProxy ? https : http;\n' +
    '    } else {\n' +
    '      if (config.maxRedirects) {\n' +
    '        options.maxRedirects = config.maxRedirects;\n' +
    '      }\n' +
    '      if (config.beforeRedirect) {\n' +
    '        options.beforeRedirect = config.beforeRedirect;\n' +
    '      }\n' +
    '      transport = isHttpsProxy ? httpsFollow : httpFollow;\n' +
    '    }\n' +
    '    if (config.maxBodyLength > -1) {\n' +
    '      options.maxBodyLength = config.maxBodyLength;\n' +
    '    }\n' +
    '    if (config.insecureHTTPParser) {\n' +
    '      options.insecureHTTPParser = config.insecureHTTPParser;\n' +
    '    }\n' +
    '\n' +
    '    // Create the request\n' +
    '    var req = transport.request(options, function handleResponse(res) {\n' +
    '      if (req.aborted) return;\n' +
    '\n' +
    '      // uncompress the response body transparently if required\n' +
    '      var stream = res;\n' +
    '\n' +
    '      // return the last request in case of redirects\n' +
    '      var lastRequest = res.req || req;\n' +
    '\n' +
    '      // if no content, is HEAD request or decompress disabled we should not decompress\n' +
    "      if (res.statusCode !== 204 && lastRequest.method !== 'HEAD' && config.decompress !== false) {\n" +
    "        switch (res.headers['content-encoding']) {\n" +
    '          /*eslint default-case:0*/\n' +
    "          case 'gzip':\n" +
    "          case 'compress':\n" +
    "          case 'deflate':\n" +
    '            // add the unzipper to the body stream processing pipeline\n' +
    '            stream = stream.pipe(zlib.createUnzip());\n' +
    '\n' +
    '            // remove the content-encoding in order to not confuse downstream operations\n' +
    "            delete res.headers['content-encoding'];\n" +
    '            break;\n' +
    '        }\n' +
    '      }\n' +
    '      var response = {\n' +
    '        status: res.statusCode,\n' +
    '        statusText: res.statusMessage,\n' +
    '        headers: res.headers,\n' +
    '        config: config,\n' +
    '        request: lastRequest\n' +
    '      };\n' +
    "      if (config.responseType === 'stream') {\n" +
    '        response.data = stream;\n' +
    '        settle(resolve, reject, response);\n' +
    '      } else {\n' +
    '        var responseBuffer = [];\n' +
    '        var totalResponseBytes = 0;\n' +
    "        stream.on('data', function handleStreamData(chunk) {\n" +
    '          responseBuffer.push(chunk);\n' +
    '          totalResponseBytes += chunk.length;\n' +
    '\n' +
    '          // make sure the content length is not over the maxContentLength if specified\n' +
    '          if (config.maxContentLength > -1 && totalResponseBytes > config.maxContentLength) {\n' +
    '            // stream.destoy() emit aborted event before calling reject() on Node.js v16\n' +
    '            rejected = true;\n' +
    '            stream.destroy();\n' +
    "            reject(new AxiosError('maxContentLength size of ' + config.maxContentLength + ' exceeded', AxiosError.ERR_BAD_RESPONSE, config, lastRequest));\n" +
    '          }\n' +
    '        });\n' +
    "        stream.on('aborted', function handlerStreamAborted() {\n" +
    '          if (rejected) {\n' +
    '            return;\n' +
    '          }\n' +
    '          stream.destroy();\n' +
    "          reject(new AxiosError('maxContentLength size of ' + config.maxContentLength + ' exceeded', AxiosError.ERR_BAD_RESPONSE, config, lastRequest));\n" +
    '        });\n' +
    "        stream.on('error', function handleStreamError(err) {\n" +
    '          if (req.aborted) return;\n' +
    '          reject(AxiosError.from(err, null, config, lastRequest));\n' +
    '        });\n' +
    "        stream.on('end', function handleStreamEnd() {\n" +
    '          try {\n' +
    '            var responseData = responseBuffer.length === 1 ? responseBuffer[0] : Buffer.concat(responseBuffer);\n' +
    "            if (config.responseType !== 'arraybuffer') {\n" +
    '              responseData = responseData.toString(config.responseEncoding);\n' +
    "              if (!config.responseEncoding || config.responseEncoding === 'utf8') {\n" +
    '                responseData = utils.stripBOM(responseData);\n' +
    '              }\n' +
    '            }\n' +
    '            response.data = responseData;\n' +
    '          } catch (err) {\n' +
    '            reject(AxiosError.from(err, null, config, response.request, response));\n' +
    '          }\n' +
    '          settle(resolve, reject, response);\n' +
    '        });\n' +
    '      }\n' +
    '    });\n' +
    '\n' +
    '    // Handle errors\n' +
    "    req.on('error', function handleRequestError(err) {\n" +
    '      // @todo remove\n' +
    '      // if (req.aborted && err.code !== AxiosError.ERR_FR_TOO_MANY_REDIRECTS) return;\n' +
    '      reject(AxiosError.from(err, null, config, req));\n' +
    '    });\n' +
    '\n' +
    ' '... 2346 more characters,
  transformRequest: [
    '[function] function transformRequest(data, headers) {\n' +
      "    normalizeHeaderName(headers, 'Accept');\n" +
      "    normalizeHeaderName(headers, 'Content-Type');\n" +
      '    if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {\n' +
      '      return data;\n' +
      '    }\n' +
      '    if (utils.isArrayBufferView(data)) {\n' +
      '      return data.buffer;\n' +
      '    }\n' +
      '    if (utils.isURLSearchParams(data)) {\n' +
      "      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');\n" +
      '      return data.toString();\n' +
      '    }\n' +
      '    var isObjectPayload = utils.isObject(data);\n' +
      "    var contentType = headers && headers['Content-Type'];\n" +
      '    var isFileList;\n' +
      "    if ((isFileList = utils.isFileList(data)) || isObjectPayload && contentType === 'multipart/form-data') {\n" +
      '      var _FormData = this.env && this.env.FormData;\n' +
      '      return toFormData(isFileList ? {\n' +
      "        'files[]': data\n" +
      '      } : data, _FormData && new _FormData());\n' +
      "    } else if (isObjectPayload || contentType === 'application/json') {\n" +
      "      setContentTypeIfUnset(headers, 'application/json');\n" +
      '      return stringifySafely(data);\n' +
      '    }\n' +
      '    return data;\n' +
      '  }'
  ],
  transformResponse: [
    '[function] function transformResponse(data) {\n' +
      '    var transitional = this.transitional || defaults.transitional;\n' +
      '    var silentJSONParsing = transitional && transitional.silentJSONParsing;\n' +
      '    var forcedJSONParsing = transitional && transitional.forcedJSONParsing;\n' +
      "    var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';\n" +
      '    if (strictJSONParsing || forcedJSONParsing && utils.isString(data) && data.length) {\n' +
      '      try {\n' +
      '        return JSON.parse(data);\n' +
      '      } catch (e) {\n' +
      '        if (strictJSONParsing) {\n' +
      "          if (e.name === 'SyntaxError') {\n" +
      '            throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);\n' +
      '          }\n' +
      '          throw e;\n' +
      '        }\n' +
      '      }\n' +
      '    }\n' +
      '    return data;\n' +
      '  }'
  ],
  timeout: 0,
  xsrfCookieName: 'XSRF-TOKEN',
  xsrfHeaderName: 'X-XSRF-TOKEN',
  maxContentLength: -1,
  maxBodyLength: -1,
  env: {
    FormData: '[function] function FormData(options) {\n' +
      '  if (!(this instanceof FormData)) {\n' +
      '    return new FormData(options);\n' +
      '  }\n' +
      '  this._overheadLength = 0;\n' +
      '  this._valueLength = 0;\n' +
      '  this._valuesToMeasure = [];\n' +
      '  CombinedStream.call(this);\n' +
      '  options = options || {};\n' +
      '  for (var option in options) {\n' +
      '    this[option] = options[option];\n' +
      '  }\n' +
      '}'
  },
  validateStatus: '[function] function validateStatus(status) {\n' +
    '    return status >= 200 && status < 300;\n' +
    '  }',
  headers: {
    Accept: 'application/json, text/plain, */*',
    Authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2MjY4MywiZXhwIjoxNjg5MTQ5MDgzfQ.Cyrsd8Hh7nqnM1wPXEB0dAdEtPrbEgoHFB9Ef1NKqKA',
    'Content-Type': '',
    'User-Agent': 'axios/0.27.2'
  },
  url: 'https://connect-api.dev.insiteflow.io/v1/connect/container/config?organizationId=711729a8-a473-47bf-b27f-8abc1ee52281&containerType=desktop',
  method: 'get'
}
[2023-07-11 13:34:49.561] [info]  In the catch  {
  transitional: {
    silentJSONParsing: true,
    forcedJSONParsing: true,
    clarifyTimeoutError: false
  },
  adapter: '[function] function httpAdapter(config) {\n' +
    '  return new Promise(function dispatchHttpRequest(resolvePromise, rejectPromise) {\n' +
    '    var onCanceled;\n' +
    '    function done() {\n' +
    '      if (config.cancelToken) {\n' +
    '        config.cancelToken.unsubscribe(onCanceled);\n' +
    '      }\n' +
    '      if (config.signal) {\n' +
    "        config.signal.removeEventListener('abort', onCanceled);\n" +
    '      }\n' +
    '    }\n' +
    '    var resolve = function resolve(value) {\n' +
    '      done();\n' +
    '      resolvePromise(value);\n' +
    '    };\n' +
    '    var rejected = false;\n' +
    '    var reject = function reject(value) {\n' +
    '      done();\n' +
    '      rejected = true;\n' +
    '      rejectPromise(value);\n' +
    '    };\n' +
    '    var data = config.data;\n' +
    '    var headers = config.headers;\n' +
    '    var headerNames = {};\n' +
    '    Object.keys(headers).forEach(function storeLowerName(name) {\n' +
    '      headerNames[name.toLowerCase()] = name;\n' +
    '    });\n' +
    '\n' +
    '    // Set User-Agent (required by some servers)\n' +
    '    // See https://github.com/axios/axios/issues/69\n' +
    "    if ('user-agent' in headerNames) {\n" +
    '      // User-Agent is specified; handle case where no UA header is desired\n' +
    "      if (!headers[headerNames['user-agent']]) {\n" +
    "        delete headers[headerNames['user-agent']];\n" +
    '      }\n' +
    '      // Otherwise, use specified value\n' +
    '    } else {\n' +
    "      // Only set header if it hasn't been set in config\n" +
    "      headers['User-Agent'] = 'axios/' + VERSION;\n" +
    '    }\n' +
    '\n' +
    '    // support for https://www.npmjs.com/package/form-data api\n' +
    '    if (utils.isFormData(data) && utils.isFunction(data.getHeaders)) {\n' +
    '      Object.assign(headers, data.getHeaders());\n' +
    '    } else if (data && !utils.isStream(data)) {\n' +
    '      if (Buffer.isBuffer(data)) {\n' +
    '        // Nothing to do...\n' +
    '      } else if (utils.isArrayBuffer(data)) {\n' +
    '        data = Buffer.from(new Uint8Array(data));\n' +
    '      } else if (utils.isString(data)) {\n' +
    "        data = Buffer.from(data, 'utf-8');\n" +
    '      } else {\n' +
    "        return reject(new AxiosError('Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream', AxiosError.ERR_BAD_REQUEST, config));\n" +
    '      }\n' +
    '      if (config.maxBodyLength > -1 && data.length > config.maxBodyLength) {\n' +
    "        return reject(new AxiosError('Request body larger than maxBodyLength limit', AxiosError.ERR_BAD_REQUEST, config));\n" +
    '      }\n' +
    '\n' +
    '      // Add Content-Length header if data exists\n' +
    "      if (!headerNames['content-length']) {\n" +
    "        headers['Content-Length'] = data.length;\n" +
    '      }\n' +
    '    }\n' +
    '\n' +
    '    // HTTP basic authentication\n' +
    '    var auth = undefined;\n' +
    '    if (config.auth) {\n' +
    "      var username = config.auth.username || '';\n" +
    "      var password = config.auth.password || '';\n" +
    "      auth = username + ':' + password;\n" +
    '    }\n' +
    '\n' +
    '    // Parse url\n' +
    '    var fullPath = buildFullPath(config.baseURL, config.url);\n' +
    '    var parsed = url.parse(fullPath);\n' +
    '    var protocol = parsed.protocol || supportedProtocols[0];\n' +
    '    if (supportedProtocols.indexOf(protocol) === -1) {\n' +
    "      return reject(new AxiosError('Unsupported protocol ' + protocol, AxiosError.ERR_BAD_REQUEST, config));\n" +
    '    }\n' +
    '    if (!auth && parsed.auth) {\n' +
    "      var urlAuth = parsed.auth.split(':');\n" +
    "      var urlUsername = urlAuth[0] || '';\n" +
    "      var urlPassword = urlAuth[1] || '';\n" +
    "      auth = urlUsername + ':' + urlPassword;\n" +
    '    }\n' +
    '    if (auth && headerNames.authorization) {\n' +
    '      delete headers[headerNames.authorization];\n' +
    '    }\n' +
    '    var isHttpsRequest = isHttps.test(protocol);\n' +
    '    var agent = isHttpsRequest ? config.httpsAgent : config.httpAgent;\n' +
    '    try {\n' +
    "      buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\\?/, '');\n" +
    '    } catch (err) {\n' +
    '      var customErr = new Error(err.message);\n' +
    '      customErr.config = config;\n' +
    '      customErr.url = config.url;\n' +
    '      customErr.exists = true;\n' +
    '      reject(customErr);\n' +
    '    }\n' +
    '    var options = {\n' +
    "      path: buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\\?/, ''),\n" +
    '      method: config.method.toUpperCase(),\n' +
    '      headers: headers,\n' +
    '      agent: agent,\n' +
    '      agents: {\n' +
    '        http: config.httpAgent,\n' +
    '        https: config.httpsAgent\n' +
    '      },\n' +
    '      auth: auth\n' +
    '    };\n' +
    '    if (config.socketPath) {\n' +
    '      options.socketPath = config.socketPath;\n' +
    '    } else {\n' +
    '      options.hostname = parsed.hostname;\n' +
    '      options.port = parsed.port;\n' +
    '    }\n' +
    '    var proxy = config.proxy;\n' +
    '    if (!proxy && proxy !== false) {\n' +
    "      var proxyEnv = protocol.slice(0, -1) + '_proxy';\n" +
    '      var proxyUrl = process.env[proxyEnv] || process.env[proxyEnv.toUpperCase()];\n' +
    '      if (proxyUrl) {\n' +
    '        var parsedProxyUrl = url.parse(proxyUrl);\n' +
    '        var noProxyEnv = process.env.no_proxy || process.env.NO_PROXY;\n' +
    '        var shouldProxy = true;\n' +
    '        if (noProxyEnv) {\n' +
    "          var noProxy = noProxyEnv.split(',').map(function trim(s) {\n" +
    '            return s.trim();\n' +
    '          });\n' +
    '          shouldProxy = !noProxy.some(function proxyMatch(proxyElement) {\n' +
    '            if (!proxyElement) {\n' +
    '              return false;\n' +
    '            }\n' +
    "            if (proxyElement === '*') {\n" +
    '              return true;\n' +
    '            }\n' +
    "            if (proxyElement[0] === '.' && parsed.hostname.substr(parsed.hostname.length - proxyElement.length) === proxyElement) {\n" +
    '              return true;\n' +
    '            }\n' +
    '            return parsed.hostname === proxyElement;\n' +
    '          });\n' +
    '        }\n' +
    '        if (shouldProxy) {\n' +
    '          proxy = {\n' +
    '            host: parsedProxyUrl.hostname,\n' +
    '            port: parsedProxyUrl.port,\n' +
    '            protocol: parsedProxyUrl.protocol\n' +
    '          };\n' +
    '          if (parsedProxyUrl.auth) {\n' +
    "            var proxyUrlAuth = parsedProxyUrl.auth.split(':');\n" +
    '            proxy.auth = {\n' +
    '              username: proxyUrlAuth[0],\n' +
    '              password: proxyUrlAuth[1]\n' +
    '            };\n' +
    '          }\n' +
    '        }\n' +
    '      }\n' +
    '    }\n' +
    '    if (proxy) {\n' +
    "      options.headers.host = parsed.hostname + (parsed.port ? ':' + parsed.port : '');\n" +
    "      setProxy(options, proxy, protocol + '//' + parsed.hostname + (parsed.port ? ':' + parsed.port : '') + options.path);\n" +
    '    }\n' +
    '    var transport;\n' +
    '    var isHttpsProxy = isHttpsRequest && (proxy ? isHttps.test(proxy.protocol) : true);\n' +
    '    if (config.transport) {\n' +
    '      transport = config.transport;\n' +
    '    } else if (config.maxRedirects === 0) {\n' +
    '      transport = isHttpsProxy ? https : http;\n' +
    '    } else {\n' +
    '      if (config.maxRedirects) {\n' +
    '        options.maxRedirects = config.maxRedirects;\n' +
    '      }\n' +
    '      if (config.beforeRedirect) {\n' +
    '        options.beforeRedirect = config.beforeRedirect;\n' +
    '      }\n' +
    '      transport = isHttpsProxy ? httpsFollow : httpFollow;\n' +
    '    }\n' +
    '    if (config.maxBodyLength > -1) {\n' +
    '      options.maxBodyLength = config.maxBodyLength;\n' +
    '    }\n' +
    '    if (config.insecureHTTPParser) {\n' +
    '      options.insecureHTTPParser = config.insecureHTTPParser;\n' +
    '    }\n' +
    '\n' +
    '    // Create the request\n' +
    '    var req = transport.request(options, function handleResponse(res) {\n' +
    '      if (req.aborted) return;\n' +
    '\n' +
    '      // uncompress the response body transparently if required\n' +
    '      var stream = res;\n' +
    '\n' +
    '      // return the last request in case of redirects\n' +
    '      var lastRequest = res.req || req;\n' +
    '\n' +
    '      // if no content, is HEAD request or decompress disabled we should not decompress\n' +
    "      if (res.statusCode !== 204 && lastRequest.method !== 'HEAD' && config.decompress !== false) {\n" +
    "        switch (res.headers['content-encoding']) {\n" +
    '          /*eslint default-case:0*/\n' +
    "          case 'gzip':\n" +
    "          case 'compress':\n" +
    "          case 'deflate':\n" +
    '            // add the unzipper to the body stream processing pipeline\n' +
    '            stream = stream.pipe(zlib.createUnzip());\n' +
    '\n' +
    '            // remove the content-encoding in order to not confuse downstream operations\n' +
    "            delete res.headers['content-encoding'];\n" +
    '            break;\n' +
    '        }\n' +
    '      }\n' +
    '      var response = {\n' +
    '        status: res.statusCode,\n' +
    '        statusText: res.statusMessage,\n' +
    '        headers: res.headers,\n' +
    '        config: config,\n' +
    '        request: lastRequest\n' +
    '      };\n' +
    "      if (config.responseType === 'stream') {\n" +
    '        response.data = stream;\n' +
    '        settle(resolve, reject, response);\n' +
    '      } else {\n' +
    '        var responseBuffer = [];\n' +
    '        var totalResponseBytes = 0;\n' +
    "        stream.on('data', function handleStreamData(chunk) {\n" +
    '          responseBuffer.push(chunk);\n' +
    '          totalResponseBytes += chunk.length;\n' +
    '\n' +
    '          // make sure the content length is not over the maxContentLength if specified\n' +
    '          if (config.maxContentLength > -1 && totalResponseBytes > config.maxContentLength) {\n' +
    '            // stream.destoy() emit aborted event before calling reject() on Node.js v16\n' +
    '            rejected = true;\n' +
    '            stream.destroy();\n' +
    "            reject(new AxiosError('maxContentLength size of ' + config.maxContentLength + ' exceeded', AxiosError.ERR_BAD_RESPONSE, config, lastRequest));\n" +
    '          }\n' +
    '        });\n' +
    "        stream.on('aborted', function handlerStreamAborted() {\n" +
    '          if (rejected) {\n' +
    '            return;\n' +
    '          }\n' +
    '          stream.destroy();\n' +
    "          reject(new AxiosError('maxContentLength size of ' + config.maxContentLength + ' exceeded', AxiosError.ERR_BAD_RESPONSE, config, lastRequest));\n" +
    '        });\n' +
    "        stream.on('error', function handleStreamError(err) {\n" +
    '          if (req.aborted) return;\n' +
    '          reject(AxiosError.from(err, null, config, lastRequest));\n' +
    '        });\n' +
    "        stream.on('end', function handleStreamEnd() {\n" +
    '          try {\n' +
    '            var responseData = responseBuffer.length === 1 ? responseBuffer[0] : Buffer.concat(responseBuffer);\n' +
    "            if (config.responseType !== 'arraybuffer') {\n" +
    '              responseData = responseData.toString(config.responseEncoding);\n' +
    "              if (!config.responseEncoding || config.responseEncoding === 'utf8') {\n" +
    '                responseData = utils.stripBOM(responseData);\n' +
    '              }\n' +
    '            }\n' +
    '            response.data = responseData;\n' +
    '          } catch (err) {\n' +
    '            reject(AxiosError.from(err, null, config, response.request, response));\n' +
    '          }\n' +
    '          settle(resolve, reject, response);\n' +
    '        });\n' +
    '      }\n' +
    '    });\n' +
    '\n' +
    '    // Handle errors\n' +
    "    req.on('error', function handleRequestError(err) {\n" +
    '      // @todo remove\n' +
    '      // if (req.aborted && err.code !== AxiosError.ERR_FR_TOO_MANY_REDIRECTS) return;\n' +
    '      reject(AxiosError.from(err, null, config, req));\n' +
    '    });\n' +
    '\n' +
    ' '... 2346 more characters,
  transformRequest: [
    '[function] function transformRequest(data, headers) {\n' +
      "    normalizeHeaderName(headers, 'Accept');\n" +
      "    normalizeHeaderName(headers, 'Content-Type');\n" +
      '    if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {\n' +
      '      return data;\n' +
      '    }\n' +
      '    if (utils.isArrayBufferView(data)) {\n' +
      '      return data.buffer;\n' +
      '    }\n' +
      '    if (utils.isURLSearchParams(data)) {\n' +
      "      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');\n" +
      '      return data.toString();\n' +
      '    }\n' +
      '    var isObjectPayload = utils.isObject(data);\n' +
      "    var contentType = headers && headers['Content-Type'];\n" +
      '    var isFileList;\n' +
      "    if ((isFileList = utils.isFileList(data)) || isObjectPayload && contentType === 'multipart/form-data') {\n" +
      '      var _FormData = this.env && this.env.FormData;\n' +
      '      return toFormData(isFileList ? {\n' +
      "        'files[]': data\n" +
      '      } : data, _FormData && new _FormData());\n' +
      "    } else if (isObjectPayload || contentType === 'application/json') {\n" +
      "      setContentTypeIfUnset(headers, 'application/json');\n" +
      '      return stringifySafely(data);\n' +
      '    }\n' +
      '    return data;\n' +
      '  }'
  ],
  transformResponse: [
    '[function] function transformResponse(data) {\n' +
      '    var transitional = this.transitional || defaults.transitional;\n' +
      '    var silentJSONParsing = transitional && transitional.silentJSONParsing;\n' +
      '    var forcedJSONParsing = transitional && transitional.forcedJSONParsing;\n' +
      "    var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';\n" +
      '    if (strictJSONParsing || forcedJSONParsing && utils.isString(data) && data.length) {\n' +
      '      try {\n' +
      '        return JSON.parse(data);\n' +
      '      } catch (e) {\n' +
      '        if (strictJSONParsing) {\n' +
      "          if (e.name === 'SyntaxError') {\n" +
      '            throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);\n' +
      '          }\n' +
      '          throw e;\n' +
      '        }\n' +
      '      }\n' +
      '    }\n' +
      '    return data;\n' +
      '  }'
  ],
  timeout: 0,
  xsrfCookieName: 'XSRF-TOKEN',
  xsrfHeaderName: 'X-XSRF-TOKEN',
  maxContentLength: -1,
  maxBodyLength: -1,
  env: {
    FormData: '[function] function FormData(options) {\n' +
      '  if (!(this instanceof FormData)) {\n' +
      '    return new FormData(options);\n' +
      '  }\n' +
      '  this._overheadLength = 0;\n' +
      '  this._valueLength = 0;\n' +
      '  this._valuesToMeasure = [];\n' +
      '  CombinedStream.call(this);\n' +
      '  options = options || {};\n' +
      '  for (var option in options) {\n' +
      '    this[option] = options[option];\n' +
      '  }\n' +
      '}'
  },
  validateStatus: '[function] function validateStatus(status) {\n' +
    '    return status >= 200 && status < 300;\n' +
    '  }',
  headers: {
    Accept: 'application/json, text/plain, */*',
    Authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2MjY4MywiZXhwIjoxNjg5MTQ5MDgzfQ.Cyrsd8Hh7nqnM1wPXEB0dAdEtPrbEgoHFB9Ef1NKqKA',
    'Content-Type': '',
    'User-Agent': 'axios/0.27.2'
  },
  url: 'https://connect-api.dev.insiteflow.io/v1/connect/container/config?organizationId=711729a8-a473-47bf-b27f-8abc1ee52281&containerType=desktop',
  method: 'get'
}
[2023-07-11 13:34:54.776] [info]  In the catch  {
  transitional: {
    silentJSONParsing: true,
    forcedJSONParsing: true,
    clarifyTimeoutError: false
  },
  adapter: '[function] function httpAdapter(config) {\n' +
    '  return new Promise(function dispatchHttpRequest(resolvePromise, rejectPromise) {\n' +
    '    var onCanceled;\n' +
    '    function done() {\n' +
    '      if (config.cancelToken) {\n' +
    '        config.cancelToken.unsubscribe(onCanceled);\n' +
    '      }\n' +
    '      if (config.signal) {\n' +
    "        config.signal.removeEventListener('abort', onCanceled);\n" +
    '      }\n' +
    '    }\n' +
    '    var resolve = function resolve(value) {\n' +
    '      done();\n' +
    '      resolvePromise(value);\n' +
    '    };\n' +
    '    var rejected = false;\n' +
    '    var reject = function reject(value) {\n' +
    '      done();\n' +
    '      rejected = true;\n' +
    '      rejectPromise(value);\n' +
    '    };\n' +
    '    var data = config.data;\n' +
    '    var headers = config.headers;\n' +
    '    var headerNames = {};\n' +
    '    Object.keys(headers).forEach(function storeLowerName(name) {\n' +
    '      headerNames[name.toLowerCase()] = name;\n' +
    '    });\n' +
    '\n' +
    '    // Set User-Agent (required by some servers)\n' +
    '    // See https://github.com/axios/axios/issues/69\n' +
    "    if ('user-agent' in headerNames) {\n" +
    '      // User-Agent is specified; handle case where no UA header is desired\n' +
    "      if (!headers[headerNames['user-agent']]) {\n" +
    "        delete headers[headerNames['user-agent']];\n" +
    '      }\n' +
    '      // Otherwise, use specified value\n' +
    '    } else {\n' +
    "      // Only set header if it hasn't been set in config\n" +
    "      headers['User-Agent'] = 'axios/' + VERSION;\n" +
    '    }\n' +
    '\n' +
    '    // support for https://www.npmjs.com/package/form-data api\n' +
    '    if (utils.isFormData(data) && utils.isFunction(data.getHeaders)) {\n' +
    '      Object.assign(headers, data.getHeaders());\n' +
    '    } else if (data && !utils.isStream(data)) {\n' +
    '      if (Buffer.isBuffer(data)) {\n' +
    '        // Nothing to do...\n' +
    '      } else if (utils.isArrayBuffer(data)) {\n' +
    '        data = Buffer.from(new Uint8Array(data));\n' +
    '      } else if (utils.isString(data)) {\n' +
    "        data = Buffer.from(data, 'utf-8');\n" +
    '      } else {\n' +
    "        return reject(new AxiosError('Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream', AxiosError.ERR_BAD_REQUEST, config));\n" +
    '      }\n' +
    '      if (config.maxBodyLength > -1 && data.length > config.maxBodyLength) {\n' +
    "        return reject(new AxiosError('Request body larger than maxBodyLength limit', AxiosError.ERR_BAD_REQUEST, config));\n" +
    '      }\n' +
    '\n' +
    '      // Add Content-Length header if data exists\n' +
    "      if (!headerNames['content-length']) {\n" +
    "        headers['Content-Length'] = data.length;\n" +
    '      }\n' +
    '    }\n' +
    '\n' +
    '    // HTTP basic authentication\n' +
    '    var auth = undefined;\n' +
    '    if (config.auth) {\n' +
    "      var username = config.auth.username || '';\n" +
    "      var password = config.auth.password || '';\n" +
    "      auth = username + ':' + password;\n" +
    '    }\n' +
    '\n' +
    '    // Parse url\n' +
    '    var fullPath = buildFullPath(config.baseURL, config.url);\n' +
    '    var parsed = url.parse(fullPath);\n' +
    '    var protocol = parsed.protocol || supportedProtocols[0];\n' +
    '    if (supportedProtocols.indexOf(protocol) === -1) {\n' +
    "      return reject(new AxiosError('Unsupported protocol ' + protocol, AxiosError.ERR_BAD_REQUEST, config));\n" +
    '    }\n' +
    '    if (!auth && parsed.auth) {\n' +
    "      var urlAuth = parsed.auth.split(':');\n" +
    "      var urlUsername = urlAuth[0] || '';\n" +
    "      var urlPassword = urlAuth[1] || '';\n" +
    "      auth = urlUsername + ':' + urlPassword;\n" +
    '    }\n' +
    '    if (auth && headerNames.authorization) {\n' +
    '      delete headers[headerNames.authorization];\n' +
    '    }\n' +
    '    var isHttpsRequest = isHttps.test(protocol);\n' +
    '    var agent = isHttpsRequest ? config.httpsAgent : config.httpAgent;\n' +
    '    try {\n' +
    "      buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\\?/, '');\n" +
    '    } catch (err) {\n' +
    '      var customErr = new Error(err.message);\n' +
    '      customErr.config = config;\n' +
    '      customErr.url = config.url;\n' +
    '      customErr.exists = true;\n' +
    '      reject(customErr);\n' +
    '    }\n' +
    '    var options = {\n' +
    "      path: buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\\?/, ''),\n" +
    '      method: config.method.toUpperCase(),\n' +
    '      headers: headers,\n' +
    '      agent: agent,\n' +
    '      agents: {\n' +
    '        http: config.httpAgent,\n' +
    '        https: config.httpsAgent\n' +
    '      },\n' +
    '      auth: auth\n' +
    '    };\n' +
    '    if (config.socketPath) {\n' +
    '      options.socketPath = config.socketPath;\n' +
    '    } else {\n' +
    '      options.hostname = parsed.hostname;\n' +
    '      options.port = parsed.port;\n' +
    '    }\n' +
    '    var proxy = config.proxy;\n' +
    '    if (!proxy && proxy !== false) {\n' +
    "      var proxyEnv = protocol.slice(0, -1) + '_proxy';\n" +
    '      var proxyUrl = process.env[proxyEnv] || process.env[proxyEnv.toUpperCase()];\n' +
    '      if (proxyUrl) {\n' +
    '        var parsedProxyUrl = url.parse(proxyUrl);\n' +
    '        var noProxyEnv = process.env.no_proxy || process.env.NO_PROXY;\n' +
    '        var shouldProxy = true;\n' +
    '        if (noProxyEnv) {\n' +
    "          var noProxy = noProxyEnv.split(',').map(function trim(s) {\n" +
    '            return s.trim();\n' +
    '          });\n' +
    '          shouldProxy = !noProxy.some(function proxyMatch(proxyElement) {\n' +
    '            if (!proxyElement) {\n' +
    '              return false;\n' +
    '            }\n' +
    "            if (proxyElement === '*') {\n" +
    '              return true;\n' +
    '            }\n' +
    "            if (proxyElement[0] === '.' && parsed.hostname.substr(parsed.hostname.length - proxyElement.length) === proxyElement) {\n" +
    '              return true;\n' +
    '            }\n' +
    '            return parsed.hostname === proxyElement;\n' +
    '          });\n' +
    '        }\n' +
    '        if (shouldProxy) {\n' +
    '          proxy = {\n' +
    '            host: parsedProxyUrl.hostname,\n' +
    '            port: parsedProxyUrl.port,\n' +
    '            protocol: parsedProxyUrl.protocol\n' +
    '          };\n' +
    '          if (parsedProxyUrl.auth) {\n' +
    "            var proxyUrlAuth = parsedProxyUrl.auth.split(':');\n" +
    '            proxy.auth = {\n' +
    '              username: proxyUrlAuth[0],\n' +
    '              password: proxyUrlAuth[1]\n' +
    '            };\n' +
    '          }\n' +
    '        }\n' +
    '      }\n' +
    '    }\n' +
    '    if (proxy) {\n' +
    "      options.headers.host = parsed.hostname + (parsed.port ? ':' + parsed.port : '');\n" +
    "      setProxy(options, proxy, protocol + '//' + parsed.hostname + (parsed.port ? ':' + parsed.port : '') + options.path);\n" +
    '    }\n' +
    '    var transport;\n' +
    '    var isHttpsProxy = isHttpsRequest && (proxy ? isHttps.test(proxy.protocol) : true);\n' +
    '    if (config.transport) {\n' +
    '      transport = config.transport;\n' +
    '    } else if (config.maxRedirects === 0) {\n' +
    '      transport = isHttpsProxy ? https : http;\n' +
    '    } else {\n' +
    '      if (config.maxRedirects) {\n' +
    '        options.maxRedirects = config.maxRedirects;\n' +
    '      }\n' +
    '      if (config.beforeRedirect) {\n' +
    '        options.beforeRedirect = config.beforeRedirect;\n' +
    '      }\n' +
    '      transport = isHttpsProxy ? httpsFollow : httpFollow;\n' +
    '    }\n' +
    '    if (config.maxBodyLength > -1) {\n' +
    '      options.maxBodyLength = config.maxBodyLength;\n' +
    '    }\n' +
    '    if (config.insecureHTTPParser) {\n' +
    '      options.insecureHTTPParser = config.insecureHTTPParser;\n' +
    '    }\n' +
    '\n' +
    '    // Create the request\n' +
    '    var req = transport.request(options, function handleResponse(res) {\n' +
    '      if (req.aborted) return;\n' +
    '\n' +
    '      // uncompress the response body transparently if required\n' +
    '      var stream = res;\n' +
    '\n' +
    '      // return the last request in case of redirects\n' +
    '      var lastRequest = res.req || req;\n' +
    '\n' +
    '      // if no content, is HEAD request or decompress disabled we should not decompress\n' +
    "      if (res.statusCode !== 204 && lastRequest.method !== 'HEAD' && config.decompress !== false) {\n" +
    "        switch (res.headers['content-encoding']) {\n" +
    '          /*eslint default-case:0*/\n' +
    "          case 'gzip':\n" +
    "          case 'compress':\n" +
    "          case 'deflate':\n" +
    '            // add the unzipper to the body stream processing pipeline\n' +
    '            stream = stream.pipe(zlib.createUnzip());\n' +
    '\n' +
    '            // remove the content-encoding in order to not confuse downstream operations\n' +
    "            delete res.headers['content-encoding'];\n" +
    '            break;\n' +
    '        }\n' +
    '      }\n' +
    '      var response = {\n' +
    '        status: res.statusCode,\n' +
    '        statusText: res.statusMessage,\n' +
    '        headers: res.headers,\n' +
    '        config: config,\n' +
    '        request: lastRequest\n' +
    '      };\n' +
    "      if (config.responseType === 'stream') {\n" +
    '        response.data = stream;\n' +
    '        settle(resolve, reject, response);\n' +
    '      } else {\n' +
    '        var responseBuffer = [];\n' +
    '        var totalResponseBytes = 0;\n' +
    "        stream.on('data', function handleStreamData(chunk) {\n" +
    '          responseBuffer.push(chunk);\n' +
    '          totalResponseBytes += chunk.length;\n' +
    '\n' +
    '          // make sure the content length is not over the maxContentLength if specified\n' +
    '          if (config.maxContentLength > -1 && totalResponseBytes > config.maxContentLength) {\n' +
    '            // stream.destoy() emit aborted event before calling reject() on Node.js v16\n' +
    '            rejected = true;\n' +
    '            stream.destroy();\n' +
    "            reject(new AxiosError('maxContentLength size of ' + config.maxContentLength + ' exceeded', AxiosError.ERR_BAD_RESPONSE, config, lastRequest));\n" +
    '          }\n' +
    '        });\n' +
    "        stream.on('aborted', function handlerStreamAborted() {\n" +
    '          if (rejected) {\n' +
    '            return;\n' +
    '          }\n' +
    '          stream.destroy();\n' +
    "          reject(new AxiosError('maxContentLength size of ' + config.maxContentLength + ' exceeded', AxiosError.ERR_BAD_RESPONSE, config, lastRequest));\n" +
    '        });\n' +
    "        stream.on('error', function handleStreamError(err) {\n" +
    '          if (req.aborted) return;\n' +
    '          reject(AxiosError.from(err, null, config, lastRequest));\n' +
    '        });\n' +
    "        stream.on('end', function handleStreamEnd() {\n" +
    '          try {\n' +
    '            var responseData = responseBuffer.length === 1 ? responseBuffer[0] : Buffer.concat(responseBuffer);\n' +
    "            if (config.responseType !== 'arraybuffer') {\n" +
    '              responseData = responseData.toString(config.responseEncoding);\n' +
    "              if (!config.responseEncoding || config.responseEncoding === 'utf8') {\n" +
    '                responseData = utils.stripBOM(responseData);\n' +
    '              }\n' +
    '            }\n' +
    '            response.data = responseData;\n' +
    '          } catch (err) {\n' +
    '            reject(AxiosError.from(err, null, config, response.request, response));\n' +
    '          }\n' +
    '          settle(resolve, reject, response);\n' +
    '        });\n' +
    '      }\n' +
    '    });\n' +
    '\n' +
    '    // Handle errors\n' +
    "    req.on('error', function handleRequestError(err) {\n" +
    '      // @todo remove\n' +
    '      // if (req.aborted && err.code !== AxiosError.ERR_FR_TOO_MANY_REDIRECTS) return;\n' +
    '      reject(AxiosError.from(err, null, config, req));\n' +
    '    });\n' +
    '\n' +
    ' '... 2346 more characters,
  transformRequest: [
    '[function] function transformRequest(data, headers) {\n' +
      "    normalizeHeaderName(headers, 'Accept');\n" +
      "    normalizeHeaderName(headers, 'Content-Type');\n" +
      '    if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {\n' +
      '      return data;\n' +
      '    }\n' +
      '    if (utils.isArrayBufferView(data)) {\n' +
      '      return data.buffer;\n' +
      '    }\n' +
      '    if (utils.isURLSearchParams(data)) {\n' +
      "      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');\n" +
      '      return data.toString();\n' +
      '    }\n' +
      '    var isObjectPayload = utils.isObject(data);\n' +
      "    var contentType = headers && headers['Content-Type'];\n" +
      '    var isFileList;\n' +
      "    if ((isFileList = utils.isFileList(data)) || isObjectPayload && contentType === 'multipart/form-data') {\n" +
      '      var _FormData = this.env && this.env.FormData;\n' +
      '      return toFormData(isFileList ? {\n' +
      "        'files[]': data\n" +
      '      } : data, _FormData && new _FormData());\n' +
      "    } else if (isObjectPayload || contentType === 'application/json') {\n" +
      "      setContentTypeIfUnset(headers, 'application/json');\n" +
      '      return stringifySafely(data);\n' +
      '    }\n' +
      '    return data;\n' +
      '  }'
  ],
  transformResponse: [
    '[function] function transformResponse(data) {\n' +
      '    var transitional = this.transitional || defaults.transitional;\n' +
      '    var silentJSONParsing = transitional && transitional.silentJSONParsing;\n' +
      '    var forcedJSONParsing = transitional && transitional.forcedJSONParsing;\n' +
      "    var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';\n" +
      '    if (strictJSONParsing || forcedJSONParsing && utils.isString(data) && data.length) {\n' +
      '      try {\n' +
      '        return JSON.parse(data);\n' +
      '      } catch (e) {\n' +
      '        if (strictJSONParsing) {\n' +
      "          if (e.name === 'SyntaxError') {\n" +
      '            throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);\n' +
      '          }\n' +
      '          throw e;\n' +
      '        }\n' +
      '      }\n' +
      '    }\n' +
      '    return data;\n' +
      '  }'
  ],
  timeout: 0,
  xsrfCookieName: 'XSRF-TOKEN',
  xsrfHeaderName: 'X-XSRF-TOKEN',
  maxContentLength: -1,
  maxBodyLength: -1,
  env: {
    FormData: '[function] function FormData(options) {\n' +
      '  if (!(this instanceof FormData)) {\n' +
      '    return new FormData(options);\n' +
      '  }\n' +
      '  this._overheadLength = 0;\n' +
      '  this._valueLength = 0;\n' +
      '  this._valuesToMeasure = [];\n' +
      '  CombinedStream.call(this);\n' +
      '  options = options || {};\n' +
      '  for (var option in options) {\n' +
      '    this[option] = options[option];\n' +
      '  }\n' +
      '}'
  },
  validateStatus: '[function] function validateStatus(status) {\n' +
    '    return status >= 200 && status < 300;\n' +
    '  }',
  headers: {
    Accept: 'application/json, text/plain, */*',
    Authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2MjY4MywiZXhwIjoxNjg5MTQ5MDgzfQ.Cyrsd8Hh7nqnM1wPXEB0dAdEtPrbEgoHFB9Ef1NKqKA',
    'Content-Type': '',
    'User-Agent': 'axios/0.27.2'
  },
  url: 'https://connect-api.dev.insiteflow.io/v1/connect/container/config?organizationId=711729a8-a473-47bf-b27f-8abc1ee52281&containerType=desktop',
  method: 'get'
}
[2023-07-11 13:34:59.794] [info]  In the catch  {
  transitional: {
    silentJSONParsing: true,
    forcedJSONParsing: true,
    clarifyTimeoutError: false
  },
  adapter: '[function] function httpAdapter(config) {\n' +
    '  return new Promise(function dispatchHttpRequest(resolvePromise, rejectPromise) {\n' +
    '    var onCanceled;\n' +
    '    function done() {\n' +
    '      if (config.cancelToken) {\n' +
    '        config.cancelToken.unsubscribe(onCanceled);\n' +
    '      }\n' +
    '      if (config.signal) {\n' +
    "        config.signal.removeEventListener('abort', onCanceled);\n" +
    '      }\n' +
    '    }\n' +
    '    var resolve = function resolve(value) {\n' +
    '      done();\n' +
    '      resolvePromise(value);\n' +
    '    };\n' +
    '    var rejected = false;\n' +
    '    var reject = function reject(value) {\n' +
    '      done();\n' +
    '      rejected = true;\n' +
    '      rejectPromise(value);\n' +
    '    };\n' +
    '    var data = config.data;\n' +
    '    var headers = config.headers;\n' +
    '    var headerNames = {};\n' +
    '    Object.keys(headers).forEach(function storeLowerName(name) {\n' +
    '      headerNames[name.toLowerCase()] = name;\n' +
    '    });\n' +
    '\n' +
    '    // Set User-Agent (required by some servers)\n' +
    '    // See https://github.com/axios/axios/issues/69\n' +
    "    if ('user-agent' in headerNames) {\n" +
    '      // User-Agent is specified; handle case where no UA header is desired\n' +
    "      if (!headers[headerNames['user-agent']]) {\n" +
    "        delete headers[headerNames['user-agent']];\n" +
    '      }\n' +
    '      // Otherwise, use specified value\n' +
    '    } else {\n' +
    "      // Only set header if it hasn't been set in config\n" +
    "      headers['User-Agent'] = 'axios/' + VERSION;\n" +
    '    }\n' +
    '\n' +
    '    // support for https://www.npmjs.com/package/form-data api\n' +
    '    if (utils.isFormData(data) && utils.isFunction(data.getHeaders)) {\n' +
    '      Object.assign(headers, data.getHeaders());\n' +
    '    } else if (data && !utils.isStream(data)) {\n' +
    '      if (Buffer.isBuffer(data)) {\n' +
    '        // Nothing to do...\n' +
    '      } else if (utils.isArrayBuffer(data)) {\n' +
    '        data = Buffer.from(new Uint8Array(data));\n' +
    '      } else if (utils.isString(data)) {\n' +
    "        data = Buffer.from(data, 'utf-8');\n" +
    '      } else {\n' +
    "        return reject(new AxiosError('Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream', AxiosError.ERR_BAD_REQUEST, config));\n" +
    '      }\n' +
    '      if (config.maxBodyLength > -1 && data.length > config.maxBodyLength) {\n' +
    "        return reject(new AxiosError('Request body larger than maxBodyLength limit', AxiosError.ERR_BAD_REQUEST, config));\n" +
    '      }\n' +
    '\n' +
    '      // Add Content-Length header if data exists\n' +
    "      if (!headerNames['content-length']) {\n" +
    "        headers['Content-Length'] = data.length;\n" +
    '      }\n' +
    '    }\n' +
    '\n' +
    '    // HTTP basic authentication\n' +
    '    var auth = undefined;\n' +
    '    if (config.auth) {\n' +
    "      var username = config.auth.username || '';\n" +
    "      var password = config.auth.password || '';\n" +
    "      auth = username + ':' + password;\n" +
    '    }\n' +
    '\n' +
    '    // Parse url\n' +
    '    var fullPath = buildFullPath(config.baseURL, config.url);\n' +
    '    var parsed = url.parse(fullPath);\n' +
    '    var protocol = parsed.protocol || supportedProtocols[0];\n' +
    '    if (supportedProtocols.indexOf(protocol) === -1) {\n' +
    "      return reject(new AxiosError('Unsupported protocol ' + protocol, AxiosError.ERR_BAD_REQUEST, config));\n" +
    '    }\n' +
    '    if (!auth && parsed.auth) {\n' +
    "      var urlAuth = parsed.auth.split(':');\n" +
    "      var urlUsername = urlAuth[0] || '';\n" +
    "      var urlPassword = urlAuth[1] || '';\n" +
    "      auth = urlUsername + ':' + urlPassword;\n" +
    '    }\n' +
    '    if (auth && headerNames.authorization) {\n' +
    '      delete headers[headerNames.authorization];\n' +
    '    }\n' +
    '    var isHttpsRequest = isHttps.test(protocol);\n' +
    '    var agent = isHttpsRequest ? config.httpsAgent : config.httpAgent;\n' +
    '    try {\n' +
    "      buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\\?/, '');\n" +
    '    } catch (err) {\n' +
    '      var customErr = new Error(err.message);\n' +
    '      customErr.config = config;\n' +
    '      customErr.url = config.url;\n' +
    '      customErr.exists = true;\n' +
    '      reject(customErr);\n' +
    '    }\n' +
    '    var options = {\n' +
    "      path: buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\\?/, ''),\n" +
    '      method: config.method.toUpperCase(),\n' +
    '      headers: headers,\n' +
    '      agent: agent,\n' +
    '      agents: {\n' +
    '        http: config.httpAgent,\n' +
    '        https: config.httpsAgent\n' +
    '      },\n' +
    '      auth: auth\n' +
    '    };\n' +
    '    if (config.socketPath) {\n' +
    '      options.socketPath = config.socketPath;\n' +
    '    } else {\n' +
    '      options.hostname = parsed.hostname;\n' +
    '      options.port = parsed.port;\n' +
    '    }\n' +
    '    var proxy = config.proxy;\n' +
    '    if (!proxy && proxy !== false) {\n' +
    "      var proxyEnv = protocol.slice(0, -1) + '_proxy';\n" +
    '      var proxyUrl = process.env[proxyEnv] || process.env[proxyEnv.toUpperCase()];\n' +
    '      if (proxyUrl) {\n' +
    '        var parsedProxyUrl = url.parse(proxyUrl);\n' +
    '        var noProxyEnv = process.env.no_proxy || process.env.NO_PROXY;\n' +
    '        var shouldProxy = true;\n' +
    '        if (noProxyEnv) {\n' +
    "          var noProxy = noProxyEnv.split(',').map(function trim(s) {\n" +
    '            return s.trim();\n' +
    '          });\n' +
    '          shouldProxy = !noProxy.some(function proxyMatch(proxyElement) {\n' +
    '            if (!proxyElement) {\n' +
    '              return false;\n' +
    '            }\n' +
    "            if (proxyElement === '*') {\n" +
    '              return true;\n' +
    '            }\n' +
    "            if (proxyElement[0] === '.' && parsed.hostname.substr(parsed.hostname.length - proxyElement.length) === proxyElement) {\n" +
    '              return true;\n' +
    '            }\n' +
    '            return parsed.hostname === proxyElement;\n' +
    '          });\n' +
    '        }\n' +
    '        if (shouldProxy) {\n' +
    '          proxy = {\n' +
    '            host: parsedProxyUrl.hostname,\n' +
    '            port: parsedProxyUrl.port,\n' +
    '            protocol: parsedProxyUrl.protocol\n' +
    '          };\n' +
    '          if (parsedProxyUrl.auth) {\n' +
    "            var proxyUrlAuth = parsedProxyUrl.auth.split(':');\n" +
    '            proxy.auth = {\n' +
    '              username: proxyUrlAuth[0],\n' +
    '              password: proxyUrlAuth[1]\n' +
    '            };\n' +
    '          }\n' +
    '        }\n' +
    '      }\n' +
    '    }\n' +
    '    if (proxy) {\n' +
    "      options.headers.host = parsed.hostname + (parsed.port ? ':' + parsed.port : '');\n" +
    "      setProxy(options, proxy, protocol + '//' + parsed.hostname + (parsed.port ? ':' + parsed.port : '') + options.path);\n" +
    '    }\n' +
    '    var transport;\n' +
    '    var isHttpsProxy = isHttpsRequest && (proxy ? isHttps.test(proxy.protocol) : true);\n' +
    '    if (config.transport) {\n' +
    '      transport = config.transport;\n' +
    '    } else if (config.maxRedirects === 0) {\n' +
    '      transport = isHttpsProxy ? https : http;\n' +
    '    } else {\n' +
    '      if (config.maxRedirects) {\n' +
    '        options.maxRedirects = config.maxRedirects;\n' +
    '      }\n' +
    '      if (config.beforeRedirect) {\n' +
    '        options.beforeRedirect = config.beforeRedirect;\n' +
    '      }\n' +
    '      transport = isHttpsProxy ? httpsFollow : httpFollow;\n' +
    '    }\n' +
    '    if (config.maxBodyLength > -1) {\n' +
    '      options.maxBodyLength = config.maxBodyLength;\n' +
    '    }\n' +
    '    if (config.insecureHTTPParser) {\n' +
    '      options.insecureHTTPParser = config.insecureHTTPParser;\n' +
    '    }\n' +
    '\n' +
    '    // Create the request\n' +
    '    var req = transport.request(options, function handleResponse(res) {\n' +
    '      if (req.aborted) return;\n' +
    '\n' +
    '      // uncompress the response body transparently if required\n' +
    '      var stream = res;\n' +
    '\n' +
    '      // return the last request in case of redirects\n' +
    '      var lastRequest = res.req || req;\n' +
    '\n' +
    '      // if no content, is HEAD request or decompress disabled we should not decompress\n' +
    "      if (res.statusCode !== 204 && lastRequest.method !== 'HEAD' && config.decompress !== false) {\n" +
    "        switch (res.headers['content-encoding']) {\n" +
    '          /*eslint default-case:0*/\n' +
    "          case 'gzip':\n" +
    "          case 'compress':\n" +
    "          case 'deflate':\n" +
    '            // add the unzipper to the body stream processing pipeline\n' +
    '            stream = stream.pipe(zlib.createUnzip());\n' +
    '\n' +
    '            // remove the content-encoding in order to not confuse downstream operations\n' +
    "            delete res.headers['content-encoding'];\n" +
    '            break;\n' +
    '        }\n' +
    '      }\n' +
    '      var response = {\n' +
    '        status: res.statusCode,\n' +
    '        statusText: res.statusMessage,\n' +
    '        headers: res.headers,\n' +
    '        config: config,\n' +
    '        request: lastRequest\n' +
    '      };\n' +
    "      if (config.responseType === 'stream') {\n" +
    '        response.data = stream;\n' +
    '        settle(resolve, reject, response);\n' +
    '      } else {\n' +
    '        var responseBuffer = [];\n' +
    '        var totalResponseBytes = 0;\n' +
    "        stream.on('data', function handleStreamData(chunk) {\n" +
    '          responseBuffer.push(chunk);\n' +
    '          totalResponseBytes += chunk.length;\n' +
    '\n' +
    '          // make sure the content length is not over the maxContentLength if specified\n' +
    '          if (config.maxContentLength > -1 && totalResponseBytes > config.maxContentLength) {\n' +
    '            // stream.destoy() emit aborted event before calling reject() on Node.js v16\n' +
    '            rejected = true;\n' +
    '            stream.destroy();\n' +
    "            reject(new AxiosError('maxContentLength size of ' + config.maxContentLength + ' exceeded', AxiosError.ERR_BAD_RESPONSE, config, lastRequest));\n" +
    '          }\n' +
    '        });\n' +
    "        stream.on('aborted', function handlerStreamAborted() {\n" +
    '          if (rejected) {\n' +
    '            return;\n' +
    '          }\n' +
    '          stream.destroy();\n' +
    "          reject(new AxiosError('maxContentLength size of ' + config.maxContentLength + ' exceeded', AxiosError.ERR_BAD_RESPONSE, config, lastRequest));\n" +
    '        });\n' +
    "        stream.on('error', function handleStreamError(err) {\n" +
    '          if (req.aborted) return;\n' +
    '          reject(AxiosError.from(err, null, config, lastRequest));\n' +
    '        });\n' +
    "        stream.on('end', function handleStreamEnd() {\n" +
    '          try {\n' +
    '            var responseData = responseBuffer.length === 1 ? responseBuffer[0] : Buffer.concat(responseBuffer);\n' +
    "            if (config.responseType !== 'arraybuffer') {\n" +
    '              responseData = responseData.toString(config.responseEncoding);\n' +
    "              if (!config.responseEncoding || config.responseEncoding === 'utf8') {\n" +
    '                responseData = utils.stripBOM(responseData);\n' +
    '              }\n' +
    '            }\n' +
    '            response.data = responseData;\n' +
    '          } catch (err) {\n' +
    '            reject(AxiosError.from(err, null, config, response.request, response));\n' +
    '          }\n' +
    '          settle(resolve, reject, response);\n' +
    '        });\n' +
    '      }\n' +
    '    });\n' +
    '\n' +
    '    // Handle errors\n' +
    "    req.on('error', function handleRequestError(err) {\n" +
    '      // @todo remove\n' +
    '      // if (req.aborted && err.code !== AxiosError.ERR_FR_TOO_MANY_REDIRECTS) return;\n' +
    '      reject(AxiosError.from(err, null, config, req));\n' +
    '    });\n' +
    '\n' +
    ' '... 2346 more characters,
  transformRequest: [
    '[function] function transformRequest(data, headers) {\n' +
      "    normalizeHeaderName(headers, 'Accept');\n" +
      "    normalizeHeaderName(headers, 'Content-Type');\n" +
      '    if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {\n' +
      '      return data;\n' +
      '    }\n' +
      '    if (utils.isArrayBufferView(data)) {\n' +
      '      return data.buffer;\n' +
      '    }\n' +
      '    if (utils.isURLSearchParams(data)) {\n' +
      "      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');\n" +
      '      return data.toString();\n' +
      '    }\n' +
      '    var isObjectPayload = utils.isObject(data);\n' +
      "    var contentType = headers && headers['Content-Type'];\n" +
      '    var isFileList;\n' +
      "    if ((isFileList = utils.isFileList(data)) || isObjectPayload && contentType === 'multipart/form-data') {\n" +
      '      var _FormData = this.env && this.env.FormData;\n' +
      '      return toFormData(isFileList ? {\n' +
      "        'files[]': data\n" +
      '      } : data, _FormData && new _FormData());\n' +
      "    } else if (isObjectPayload || contentType === 'application/json') {\n" +
      "      setContentTypeIfUnset(headers, 'application/json');\n" +
      '      return stringifySafely(data);\n' +
      '    }\n' +
      '    return data;\n' +
      '  }'
  ],
  transformResponse: [
    '[function] function transformResponse(data) {\n' +
      '    var transitional = this.transitional || defaults.transitional;\n' +
      '    var silentJSONParsing = transitional && transitional.silentJSONParsing;\n' +
      '    var forcedJSONParsing = transitional && transitional.forcedJSONParsing;\n' +
      "    var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';\n" +
      '    if (strictJSONParsing || forcedJSONParsing && utils.isString(data) && data.length) {\n' +
      '      try {\n' +
      '        return JSON.parse(data);\n' +
      '      } catch (e) {\n' +
      '        if (strictJSONParsing) {\n' +
      "          if (e.name === 'SyntaxError') {\n" +
      '            throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);\n' +
      '          }\n' +
      '          throw e;\n' +
      '        }\n' +
      '      }\n' +
      '    }\n' +
      '    return data;\n' +
      '  }'
  ],
  timeout: 0,
  xsrfCookieName: 'XSRF-TOKEN',
  xsrfHeaderName: 'X-XSRF-TOKEN',
  maxContentLength: -1,
  maxBodyLength: -1,
  env: {
    FormData: '[function] function FormData(options) {\n' +
      '  if (!(this instanceof FormData)) {\n' +
      '    return new FormData(options);\n' +
      '  }\n' +
      '  this._overheadLength = 0;\n' +
      '  this._valueLength = 0;\n' +
      '  this._valuesToMeasure = [];\n' +
      '  CombinedStream.call(this);\n' +
      '  options = options || {};\n' +
      '  for (var option in options) {\n' +
      '    this[option] = options[option];\n' +
      '  }\n' +
      '}'
  },
  validateStatus: '[function] function validateStatus(status) {\n' +
    '    return status >= 200 && status < 300;\n' +
    '  }',
  headers: {
    Accept: 'application/json, text/plain, */*',
    Authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2MjY4MywiZXhwIjoxNjg5MTQ5MDgzfQ.Cyrsd8Hh7nqnM1wPXEB0dAdEtPrbEgoHFB9Ef1NKqKA',
    'Content-Type': '',
    'User-Agent': 'axios/0.27.2'
  },
  url: 'https://connect-api.dev.insiteflow.io/v1/connect/container/config?organizationId=711729a8-a473-47bf-b27f-8abc1ee52281&containerType=desktop',
  method: 'get'
}
[2023-07-11 13:38:10.336] [info]  Started /home/lnv-75/Documents/insiteFlow/desktop-app-container/test/out AES-128
[2023-07-11 13:38:11.414] [info]  In the catch  undefined
[2023-07-11 13:38:16.118] [info]  In the catch  undefined
[2023-07-11 13:38:21.057] [info]  In the catch  undefined
[2023-07-11 13:38:53.369] [info]  Started /home/lnv-75/Documents/insiteFlow/desktop-app-container/test/out AES-128
[2023-07-11 13:38:54.517] [info]  In the catch  {
  message: 'Request failed with status code 401',
  name: 'AxiosError',
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: '[function] function httpAdapter(config) {\n' +
      '  return new Promise(function dispatchHttpRequest(resolvePromise, rejectPromise) {\n' +
      '    var onCanceled;\n' +
      '    function done() {\n' +
      '      if (config.cancelToken) {\n' +
      '        config.cancelToken.unsubscribe(onCanceled);\n' +
      '      }\n' +
      '      if (config.signal) {\n' +
      "        config.signal.removeEventListener('abort', onCanceled);\n" +
      '      }\n' +
      '    }\n' +
      '    var resolve = function resolve(value) {\n' +
      '      done();\n' +
      '      resolvePromise(value);\n' +
      '    };\n' +
      '    var rejected = false;\n' +
      '    var reject = function reject(value) {\n' +
      '      done();\n' +
      '      rejected = true;\n' +
      '      rejectPromise(value);\n' +
      '    };\n' +
      '    var data = config.data;\n' +
      '    var headers = config.headers;\n' +
      '    var headerNames = {};\n' +
      '    Object.keys(headers).forEach(function storeLowerName(name) {\n' +
      '      headerNames[name.toLowerCase()] = name;\n' +
      '    });\n' +
      '\n' +
      '    // Set User-Agent (required by some servers)\n' +
      '    // See https://github.com/axios/axios/issues/69\n' +
      "    if ('user-agent' in headerNames) {\n" +
      '      // User-Agent is specified; handle case where no UA header is desired\n' +
      "      if (!headers[headerNames['user-agent']]) {\n" +
      "        delete headers[headerNames['user-agent']];\n" +
      '      }\n' +
      '      // Otherwise, use specified value\n' +
      '    } else {\n' +
      "      // Only set header if it hasn't been set in config\n" +
      "      headers['User-Agent'] = 'axios/' + VERSION;\n" +
      '    }\n' +
      '\n' +
      '    // support for https://www.npmjs.com/package/form-data api\n' +
      '    if (utils.isFormData(data) && utils.isFunction(data.getHeaders)) {\n' +
      '      Object.assign(headers, data.getHeaders());\n' +
      '    } else if (data && !utils.isStream(data)) {\n' +
      '      if (Buffer.isBuffer(data)) {\n' +
      '        // Nothing to do...\n' +
      '      } else if (utils.isArrayBuffer(data)) {\n' +
      '        data = Buffer.from(new Uint8Array(data));\n' +
      '      } else if (utils.isString(data)) {\n' +
      "        data = Buffer.from(data, 'utf-8');\n" +
      '      } else {\n' +
      "        return reject(new AxiosError('Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream', AxiosError.ERR_BAD_REQUEST, config));\n" +
      '      }\n' +
      '      if (config.maxBodyLength > -1 && data.length > config.maxBodyLength) {\n' +
      "        return reject(new AxiosError('Request body larger than maxBodyLength limit', AxiosError.ERR_BAD_REQUEST, config));\n" +
      '      }\n' +
      '\n' +
      '      // Add Content-Length header if data exists\n' +
      "      if (!headerNames['content-length']) {\n" +
      "        headers['Content-Length'] = data.length;\n" +
      '      }\n' +
      '    }\n' +
      '\n' +
      '    // HTTP basic authentication\n' +
      '    var auth = undefined;\n' +
      '    if (config.auth) {\n' +
      "      var username = config.auth.username || '';\n" +
      "      var password = config.auth.password || '';\n" +
      "      auth = username + ':' + password;\n" +
      '    }\n' +
      '\n' +
      '    // Parse url\n' +
      '    var fullPath = buildFullPath(config.baseURL, config.url);\n' +
      '    var parsed = url.parse(fullPath);\n' +
      '    var protocol = parsed.protocol || supportedProtocols[0];\n' +
      '    if (supportedProtocols.indexOf(protocol) === -1) {\n' +
      "      return reject(new AxiosError('Unsupported protocol ' + protocol, AxiosError.ERR_BAD_REQUEST, config));\n" +
      '    }\n' +
      '    if (!auth && parsed.auth) {\n' +
      "      var urlAuth = parsed.auth.split(':');\n" +
      "      var urlUsername = urlAuth[0] || '';\n" +
      "      var urlPassword = urlAuth[1] || '';\n" +
      "      auth = urlUsername + ':' + urlPassword;\n" +
      '    }\n' +
      '    if (auth && headerNames.authorization) {\n' +
      '      delete headers[headerNames.authorization];\n' +
      '    }\n' +
      '    var isHttpsRequest = isHttps.test(protocol);\n' +
      '    var agent = isHttpsRequest ? config.httpsAgent : config.httpAgent;\n' +
      '    try {\n' +
      "      buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\\?/, '');\n" +
      '    } catch (err) {\n' +
      '      var customErr = new Error(err.message);\n' +
      '      customErr.config = config;\n' +
      '      customErr.url = config.url;\n' +
      '      customErr.exists = true;\n' +
      '      reject(customErr);\n' +
      '    }\n' +
      '    var options = {\n' +
      "      path: buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\\?/, ''),\n" +
      '      method: config.method.toUpperCase(),\n' +
      '      headers: headers,\n' +
      '      agent: agent,\n' +
      '      agents: {\n' +
      '        http: config.httpAgent,\n' +
      '        https: config.httpsAgent\n' +
      '      },\n' +
      '      auth: auth\n' +
      '    };\n' +
      '    if (config.socketPath) {\n' +
      '      options.socketPath = config.socketPath;\n' +
      '    } else {\n' +
      '      options.hostname = parsed.hostname;\n' +
      '      options.port = parsed.port;\n' +
      '    }\n' +
      '    var proxy = config.proxy;\n' +
      '    if (!proxy && proxy !== false) {\n' +
      "      var proxyEnv = protocol.slice(0, -1) + '_proxy';\n" +
      '      var proxyUrl = process.env[proxyEnv] || process.env[proxyEnv.toUpperCase()];\n' +
      '      if (proxyUrl) {\n' +
      '        var parsedProxyUrl = url.parse(proxyUrl);\n' +
      '        var noProxyEnv = process.env.no_proxy || process.env.NO_PROXY;\n' +
      '        var shouldProxy = true;\n' +
      '        if (noProxyEnv) {\n' +
      "          var noProxy = noProxyEnv.split(',').map(function trim(s) {\n" +
      '            return s.trim();\n' +
      '          });\n' +
      '          shouldProxy = !noProxy.some(function proxyMatch(proxyElement) {\n' +
      '            if (!proxyElement) {\n' +
      '              return false;\n' +
      '            }\n' +
      "            if (proxyElement === '*') {\n" +
      '              return true;\n' +
      '            }\n' +
      "            if (proxyElement[0] === '.' && parsed.hostname.substr(parsed.hostname.length - proxyElement.length) === proxyElement) {\n" +
      '              return true;\n' +
      '            }\n' +
      '            return parsed.hostname === proxyElement;\n' +
      '          });\n' +
      '        }\n' +
      '        if (shouldProxy) {\n' +
      '          proxy = {\n' +
      '            host: parsedProxyUrl.hostname,\n' +
      '            port: parsedProxyUrl.port,\n' +
      '            protocol: parsedProxyUrl.protocol\n' +
      '          };\n' +
      '          if (parsedProxyUrl.auth) {\n' +
      "            var proxyUrlAuth = parsedProxyUrl.auth.split(':');\n" +
      '            proxy.auth = {\n' +
      '              username: proxyUrlAuth[0],\n' +
      '              password: proxyUrlAuth[1]\n' +
      '            };\n' +
      '          }\n' +
      '        }\n' +
      '      }\n' +
      '    }\n' +
      '    if (proxy) {\n' +
      "      options.headers.host = parsed.hostname + (parsed.port ? ':' + parsed.port : '');\n" +
      "      setProxy(options, proxy, protocol + '//' + parsed.hostname + (parsed.port ? ':' + parsed.port : '') + options.path);\n" +
      '    }\n' +
      '    var transport;\n' +
      '    var isHttpsProxy = isHttpsRequest && (proxy ? isHttps.test(proxy.protocol) : true);\n' +
      '    if (config.transport) {\n' +
      '      transport = config.transport;\n' +
      '    } else if (config.maxRedirects === 0) {\n' +
      '      transport = isHttpsProxy ? https : http;\n' +
      '    } else {\n' +
      '      if (config.maxRedirects) {\n' +
      '        options.maxRedirects = config.maxRedirects;\n' +
      '      }\n' +
      '      if (config.beforeRedirect) {\n' +
      '        options.beforeRedirect = config.beforeRedirect;\n' +
      '      }\n' +
      '      transport = isHttpsProxy ? httpsFollow : httpFollow;\n' +
      '    }\n' +
      '    if (config.maxBodyLength > -1) {\n' +
      '      options.maxBodyLength = config.maxBodyLength;\n' +
      '    }\n' +
      '    if (config.insecureHTTPParser) {\n' +
      '      options.insecureHTTPParser = config.insecureHTTPParser;\n' +
      '    }\n' +
      '\n' +
      '    // Create the request\n' +
      '    var req = transport.request(options, function handleResponse(res) {\n' +
      '      if (req.aborted) return;\n' +
      '\n' +
      '      // uncompress the response body transparently if required\n' +
      '      var stream = res;\n' +
      '\n' +
      '      // return the last request in case of redirects\n' +
      '      var lastRequest = res.req || req;\n' +
      '\n' +
      '      // if no content, is HEAD request or decompress disabled we should not decompress\n' +
      "      if (res.statusCode !== 204 && lastRequest.method !== 'HEAD' && config.decompress !== false) {\n" +
      "        switch (res.headers['content-encoding']) {\n" +
      '          /*eslint default-case:0*/\n' +
      "          case 'gzip':\n" +
      "          case 'compress':\n" +
      "          case 'deflate':\n" +
      '            // add the unzipper to the body stream processing pipeline\n' +
      '            stream = stream.pipe(zlib.createUnzip());\n' +
      '\n' +
      '            // remove the content-encoding in order to not confuse downstream operations\n' +
      "            delete res.headers['content-encoding'];\n" +
      '            break;\n' +
      '        }\n' +
      '      }\n' +
      '      var response = {\n' +
      '        status: res.statusCode,\n' +
      '        statusText: res.statusMessage,\n' +
      '        headers: res.headers,\n' +
      '        config: config,\n' +
      '        request: lastRequest\n' +
      '      };\n' +
      "      if (config.responseType === 'stream') {\n" +
      '        response.data = stream;\n' +
      '        settle(resolve, reject, response);\n' +
      '      } else {\n' +
      '        var responseBuffer = [];\n' +
      '        var totalResponseBytes = 0;\n' +
      "        stream.on('data', function handleStreamData(chunk) {\n" +
      '          responseBuffer.push(chunk);\n' +
      '          totalResponseBytes += chunk.length;\n' +
      '\n' +
      '          // make sure the content length is not over the maxContentLength if specified\n' +
      '          if (config.maxContentLength > -1 && totalResponseBytes > config.maxContentLength) {\n' +
      '            // stream.destoy() emit aborted event before calling reject() on Node.js v16\n' +
      '            rejected = true;\n' +
      '            stream.destroy();\n' +
      "            reject(new AxiosError('maxContentLength size of ' + config.maxContentLength + ' exceeded', AxiosError.ERR_BAD_RESPONSE, config, lastRequest));\n" +
      '          }\n' +
      '        });\n' +
      "        stream.on('aborted', function handlerStreamAborted() {\n" +
      '          if (rejected) {\n' +
      '            return;\n' +
      '          }\n' +
      '          stream.destroy();\n' +
      "          reject(new AxiosError('maxContentLength size of ' + config.maxContentLength + ' exceeded', AxiosError.ERR_BAD_RESPONSE, config, lastRequest));\n" +
      '        });\n' +
      "        stream.on('error', function handleStreamError(err) {\n" +
      '          if (req.aborted) return;\n' +
      '          reject(AxiosError.from(err, null, config, lastRequest));\n' +
      '        });\n' +
      "        stream.on('end', function handleStreamEnd() {\n" +
      '          try {\n' +
      '            var responseData = responseBuffer.length === 1 ? responseBuffer[0] : Buffer.concat(responseBuffer);\n' +
      "            if (config.responseType !== 'arraybuffer') {\n" +
      '              responseData = responseData.toString(config.responseEncoding);\n' +
      "              if (!config.responseEncoding || config.responseEncoding === 'utf8') {\n" +
      '                responseData = utils.stripBOM(responseData);\n' +
      '              }\n' +
      '            }\n' +
      '            response.data = responseData;\n' +
      '          } catch (err) {\n' +
      '            reject(AxiosError.from(err, null, config, response.request, response));\n' +
      '          }\n' +
      '          settle(resolve, reject, response);\n' +
      '        });\n' +
      '      }\n' +
      '    });\n' +
      '\n' +
      '    // Handle errors\n' +
      "    req.on('error', function handleRequestError(err) {\n" +
      '      // @todo remove\n' +
      '      // if (req.aborted && err.code !== AxiosError.ERR_FR_TOO_MANY_REDIRECTS) return;\n' +
      '      reject(AxiosError.from(err, null, config, req));\n' +
      '    });\n' +
      '\n' +
      ' '... 2346 more characters,
    transformRequest: [
      '[function] function transformRequest(data, headers) {\n' +
        "    normalizeHeaderName(headers, 'Accept');\n" +
        "    normalizeHeaderName(headers, 'Content-Type');\n" +
        '    if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {\n' +
        '      return data;\n' +
        '    }\n' +
        '    if (utils.isArrayBufferView(data)) {\n' +
        '      return data.buffer;\n' +
        '    }\n' +
        '    if (utils.isURLSearchParams(data)) {\n' +
        "      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');\n" +
        '      return data.toString();\n' +
        '    }\n' +
        '    var isObjectPayload = utils.isObject(data);\n' +
        "    var contentType = headers && headers['Content-Type'];\n" +
        '    var isFileList;\n' +
        "    if ((isFileList = utils.isFileList(data)) || isObjectPayload && contentType === 'multipart/form-data') {\n" +
        '      var _FormData = this.env && this.env.FormData;\n' +
        '      return toFormData(isFileList ? {\n' +
        "        'files[]': data\n" +
        '      } : data, _FormData && new _FormData());\n' +
        "    } else if (isObjectPayload || contentType === 'application/json') {\n" +
        "      setContentTypeIfUnset(headers, 'application/json');\n" +
        '      return stringifySafely(data);\n' +
        '    }\n' +
        '    return data;\n' +
        '  }'
    ],
    transformResponse: [
      '[function] function transformResponse(data) {\n' +
        '    var transitional = this.transitional || defaults.transitional;\n' +
        '    var silentJSONParsing = transitional && transitional.silentJSONParsing;\n' +
        '    var forcedJSONParsing = transitional && transitional.forcedJSONParsing;\n' +
        "    var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';\n" +
        '    if (strictJSONParsing || forcedJSONParsing && utils.isString(data) && data.length) {\n' +
        '      try {\n' +
        '        return JSON.parse(data);\n' +
        '      } catch (e) {\n' +
        '        if (strictJSONParsing) {\n' +
        "          if (e.name === 'SyntaxError') {\n" +
        '            throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);\n' +
        '          }\n' +
        '          throw e;\n' +
        '        }\n' +
        '      }\n' +
        '    }\n' +
        '    return data;\n' +
        '  }'
    ],
    timeout: 0,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
      FormData: '[function] function FormData(options) {\n' +
        '  if (!(this instanceof FormData)) {\n' +
        '    return new FormData(options);\n' +
        '  }\n' +
        '  this._overheadLength = 0;\n' +
        '  this._valueLength = 0;\n' +
        '  this._valuesToMeasure = [];\n' +
        '  CombinedStream.call(this);\n' +
        '  options = options || {};\n' +
        '  for (var option in options) {\n' +
        '    this[option] = options[option];\n' +
        '  }\n' +
        '}'
    },
    validateStatus: '[function] function validateStatus(status) {\n' +
      '    return status >= 200 && status < 300;\n' +
      '  }',
    headers: {
      Accept: 'application/json, text/plain, */*',
      Authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2MjkzMywiZXhwIjoxNjg5MTQ5MzMzfQ.LABdYqiWVgjyYcT_XLz20sZ1YYwfhw9URsIRGYoKDe8',
      'Content-Type': '',
      'User-Agent': 'axios/0.27.2'
    },
    url: 'https://connect-api.dev.insiteflow.io/v1/connect/container/config?organizationId=711729a8-a473-47bf-b27f-8abc1ee52281&containerType=desktop',
    method: 'get'
  },
  code: 'ERR_BAD_REQUEST',
  status: 401
}
[2023-07-11 13:40:20.568] [info]  Started /home/lnv-75/Documents/insiteFlow/desktop-app-container/test/out AES-128
[2023-07-11 13:40:21.639] [error] Unhandled Exception UnhandledRejection TypeError: Cannot read properties of undefined (reading 'status')
    at /home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1472:47
    at process.processTicksAndRejections (node:internal/process/task_queues:96:5)
    at async fetchConfigDetails (/home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1457:5)
[2023-07-11 13:40:26.258] [error] Unhandled Exception UnhandledRejection TypeError: Cannot read properties of undefined (reading 'status')
    at /home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1472:47
    at process.processTicksAndRejections (node:internal/process/task_queues:96:5)
    at async fetchConfigDetails (/home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1457:5)
[2023-07-11 13:40:31.419] [error] Unhandled Exception UnhandledRejection TypeError: Cannot read properties of undefined (reading 'status')
    at /home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1472:47
    at process.processTicksAndRejections (node:internal/process/task_queues:96:5)
    at async fetchConfigDetails (/home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1457:5)
[2023-07-11 13:41:01.586] [info]  Started /home/lnv-75/Documents/insiteFlow/desktop-app-container/test/out AES-128
[2023-07-11 13:41:02.407] [info]  In the catch  undefined
[2023-07-11 13:41:39.097] [info]  Started /home/lnv-75/Documents/insiteFlow/desktop-app-container/test/out AES-128
[2023-07-11 13:41:40.298] [info]  In the catch  {
  message: 'Request failed with status code 401',
  name: 'AxiosError',
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: '[function] function httpAdapter(config) {\n' +
      '  return new Promise(function dispatchHttpRequest(resolvePromise, rejectPromise) {\n' +
      '    var onCanceled;\n' +
      '    function done() {\n' +
      '      if (config.cancelToken) {\n' +
      '        config.cancelToken.unsubscribe(onCanceled);\n' +
      '      }\n' +
      '      if (config.signal) {\n' +
      "        config.signal.removeEventListener('abort', onCanceled);\n" +
      '      }\n' +
      '    }\n' +
      '    var resolve = function resolve(value) {\n' +
      '      done();\n' +
      '      resolvePromise(value);\n' +
      '    };\n' +
      '    var rejected = false;\n' +
      '    var reject = function reject(value) {\n' +
      '      done();\n' +
      '      rejected = true;\n' +
      '      rejectPromise(value);\n' +
      '    };\n' +
      '    var data = config.data;\n' +
      '    var headers = config.headers;\n' +
      '    var headerNames = {};\n' +
      '    Object.keys(headers).forEach(function storeLowerName(name) {\n' +
      '      headerNames[name.toLowerCase()] = name;\n' +
      '    });\n' +
      '\n' +
      '    // Set User-Agent (required by some servers)\n' +
      '    // See https://github.com/axios/axios/issues/69\n' +
      "    if ('user-agent' in headerNames) {\n" +
      '      // User-Agent is specified; handle case where no UA header is desired\n' +
      "      if (!headers[headerNames['user-agent']]) {\n" +
      "        delete headers[headerNames['user-agent']];\n" +
      '      }\n' +
      '      // Otherwise, use specified value\n' +
      '    } else {\n' +
      "      // Only set header if it hasn't been set in config\n" +
      "      headers['User-Agent'] = 'axios/' + VERSION;\n" +
      '    }\n' +
      '\n' +
      '    // support for https://www.npmjs.com/package/form-data api\n' +
      '    if (utils.isFormData(data) && utils.isFunction(data.getHeaders)) {\n' +
      '      Object.assign(headers, data.getHeaders());\n' +
      '    } else if (data && !utils.isStream(data)) {\n' +
      '      if (Buffer.isBuffer(data)) {\n' +
      '        // Nothing to do...\n' +
      '      } else if (utils.isArrayBuffer(data)) {\n' +
      '        data = Buffer.from(new Uint8Array(data));\n' +
      '      } else if (utils.isString(data)) {\n' +
      "        data = Buffer.from(data, 'utf-8');\n" +
      '      } else {\n' +
      "        return reject(new AxiosError('Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream', AxiosError.ERR_BAD_REQUEST, config));\n" +
      '      }\n' +
      '      if (config.maxBodyLength > -1 && data.length > config.maxBodyLength) {\n' +
      "        return reject(new AxiosError('Request body larger than maxBodyLength limit', AxiosError.ERR_BAD_REQUEST, config));\n" +
      '      }\n' +
      '\n' +
      '      // Add Content-Length header if data exists\n' +
      "      if (!headerNames['content-length']) {\n" +
      "        headers['Content-Length'] = data.length;\n" +
      '      }\n' +
      '    }\n' +
      '\n' +
      '    // HTTP basic authentication\n' +
      '    var auth = undefined;\n' +
      '    if (config.auth) {\n' +
      "      var username = config.auth.username || '';\n" +
      "      var password = config.auth.password || '';\n" +
      "      auth = username + ':' + password;\n" +
      '    }\n' +
      '\n' +
      '    // Parse url\n' +
      '    var fullPath = buildFullPath(config.baseURL, config.url);\n' +
      '    var parsed = url.parse(fullPath);\n' +
      '    var protocol = parsed.protocol || supportedProtocols[0];\n' +
      '    if (supportedProtocols.indexOf(protocol) === -1) {\n' +
      "      return reject(new AxiosError('Unsupported protocol ' + protocol, AxiosError.ERR_BAD_REQUEST, config));\n" +
      '    }\n' +
      '    if (!auth && parsed.auth) {\n' +
      "      var urlAuth = parsed.auth.split(':');\n" +
      "      var urlUsername = urlAuth[0] || '';\n" +
      "      var urlPassword = urlAuth[1] || '';\n" +
      "      auth = urlUsername + ':' + urlPassword;\n" +
      '    }\n' +
      '    if (auth && headerNames.authorization) {\n' +
      '      delete headers[headerNames.authorization];\n' +
      '    }\n' +
      '    var isHttpsRequest = isHttps.test(protocol);\n' +
      '    var agent = isHttpsRequest ? config.httpsAgent : config.httpAgent;\n' +
      '    try {\n' +
      "      buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\\?/, '');\n" +
      '    } catch (err) {\n' +
      '      var customErr = new Error(err.message);\n' +
      '      customErr.config = config;\n' +
      '      customErr.url = config.url;\n' +
      '      customErr.exists = true;\n' +
      '      reject(customErr);\n' +
      '    }\n' +
      '    var options = {\n' +
      "      path: buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\\?/, ''),\n" +
      '      method: config.method.toUpperCase(),\n' +
      '      headers: headers,\n' +
      '      agent: agent,\n' +
      '      agents: {\n' +
      '        http: config.httpAgent,\n' +
      '        https: config.httpsAgent\n' +
      '      },\n' +
      '      auth: auth\n' +
      '    };\n' +
      '    if (config.socketPath) {\n' +
      '      options.socketPath = config.socketPath;\n' +
      '    } else {\n' +
      '      options.hostname = parsed.hostname;\n' +
      '      options.port = parsed.port;\n' +
      '    }\n' +
      '    var proxy = config.proxy;\n' +
      '    if (!proxy && proxy !== false) {\n' +
      "      var proxyEnv = protocol.slice(0, -1) + '_proxy';\n" +
      '      var proxyUrl = process.env[proxyEnv] || process.env[proxyEnv.toUpperCase()];\n' +
      '      if (proxyUrl) {\n' +
      '        var parsedProxyUrl = url.parse(proxyUrl);\n' +
      '        var noProxyEnv = process.env.no_proxy || process.env.NO_PROXY;\n' +
      '        var shouldProxy = true;\n' +
      '        if (noProxyEnv) {\n' +
      "          var noProxy = noProxyEnv.split(',').map(function trim(s) {\n" +
      '            return s.trim();\n' +
      '          });\n' +
      '          shouldProxy = !noProxy.some(function proxyMatch(proxyElement) {\n' +
      '            if (!proxyElement) {\n' +
      '              return false;\n' +
      '            }\n' +
      "            if (proxyElement === '*') {\n" +
      '              return true;\n' +
      '            }\n' +
      "            if (proxyElement[0] === '.' && parsed.hostname.substr(parsed.hostname.length - proxyElement.length) === proxyElement) {\n" +
      '              return true;\n' +
      '            }\n' +
      '            return parsed.hostname === proxyElement;\n' +
      '          });\n' +
      '        }\n' +
      '        if (shouldProxy) {\n' +
      '          proxy = {\n' +
      '            host: parsedProxyUrl.hostname,\n' +
      '            port: parsedProxyUrl.port,\n' +
      '            protocol: parsedProxyUrl.protocol\n' +
      '          };\n' +
      '          if (parsedProxyUrl.auth) {\n' +
      "            var proxyUrlAuth = parsedProxyUrl.auth.split(':');\n" +
      '            proxy.auth = {\n' +
      '              username: proxyUrlAuth[0],\n' +
      '              password: proxyUrlAuth[1]\n' +
      '            };\n' +
      '          }\n' +
      '        }\n' +
      '      }\n' +
      '    }\n' +
      '    if (proxy) {\n' +
      "      options.headers.host = parsed.hostname + (parsed.port ? ':' + parsed.port : '');\n" +
      "      setProxy(options, proxy, protocol + '//' + parsed.hostname + (parsed.port ? ':' + parsed.port : '') + options.path);\n" +
      '    }\n' +
      '    var transport;\n' +
      '    var isHttpsProxy = isHttpsRequest && (proxy ? isHttps.test(proxy.protocol) : true);\n' +
      '    if (config.transport) {\n' +
      '      transport = config.transport;\n' +
      '    } else if (config.maxRedirects === 0) {\n' +
      '      transport = isHttpsProxy ? https : http;\n' +
      '    } else {\n' +
      '      if (config.maxRedirects) {\n' +
      '        options.maxRedirects = config.maxRedirects;\n' +
      '      }\n' +
      '      if (config.beforeRedirect) {\n' +
      '        options.beforeRedirect = config.beforeRedirect;\n' +
      '      }\n' +
      '      transport = isHttpsProxy ? httpsFollow : httpFollow;\n' +
      '    }\n' +
      '    if (config.maxBodyLength > -1) {\n' +
      '      options.maxBodyLength = config.maxBodyLength;\n' +
      '    }\n' +
      '    if (config.insecureHTTPParser) {\n' +
      '      options.insecureHTTPParser = config.insecureHTTPParser;\n' +
      '    }\n' +
      '\n' +
      '    // Create the request\n' +
      '    var req = transport.request(options, function handleResponse(res) {\n' +
      '      if (req.aborted) return;\n' +
      '\n' +
      '      // uncompress the response body transparently if required\n' +
      '      var stream = res;\n' +
      '\n' +
      '      // return the last request in case of redirects\n' +
      '      var lastRequest = res.req || req;\n' +
      '\n' +
      '      // if no content, is HEAD request or decompress disabled we should not decompress\n' +
      "      if (res.statusCode !== 204 && lastRequest.method !== 'HEAD' && config.decompress !== false) {\n" +
      "        switch (res.headers['content-encoding']) {\n" +
      '          /*eslint default-case:0*/\n' +
      "          case 'gzip':\n" +
      "          case 'compress':\n" +
      "          case 'deflate':\n" +
      '            // add the unzipper to the body stream processing pipeline\n' +
      '            stream = stream.pipe(zlib.createUnzip());\n' +
      '\n' +
      '            // remove the content-encoding in order to not confuse downstream operations\n' +
      "            delete res.headers['content-encoding'];\n" +
      '            break;\n' +
      '        }\n' +
      '      }\n' +
      '      var response = {\n' +
      '        status: res.statusCode,\n' +
      '        statusText: res.statusMessage,\n' +
      '        headers: res.headers,\n' +
      '        config: config,\n' +
      '        request: lastRequest\n' +
      '      };\n' +
      "      if (config.responseType === 'stream') {\n" +
      '        response.data = stream;\n' +
      '        settle(resolve, reject, response);\n' +
      '      } else {\n' +
      '        var responseBuffer = [];\n' +
      '        var totalResponseBytes = 0;\n' +
      "        stream.on('data', function handleStreamData(chunk) {\n" +
      '          responseBuffer.push(chunk);\n' +
      '          totalResponseBytes += chunk.length;\n' +
      '\n' +
      '          // make sure the content length is not over the maxContentLength if specified\n' +
      '          if (config.maxContentLength > -1 && totalResponseBytes > config.maxContentLength) {\n' +
      '            // stream.destoy() emit aborted event before calling reject() on Node.js v16\n' +
      '            rejected = true;\n' +
      '            stream.destroy();\n' +
      "            reject(new AxiosError('maxContentLength size of ' + config.maxContentLength + ' exceeded', AxiosError.ERR_BAD_RESPONSE, config, lastRequest));\n" +
      '          }\n' +
      '        });\n' +
      "        stream.on('aborted', function handlerStreamAborted() {\n" +
      '          if (rejected) {\n' +
      '            return;\n' +
      '          }\n' +
      '          stream.destroy();\n' +
      "          reject(new AxiosError('maxContentLength size of ' + config.maxContentLength + ' exceeded', AxiosError.ERR_BAD_RESPONSE, config, lastRequest));\n" +
      '        });\n' +
      "        stream.on('error', function handleStreamError(err) {\n" +
      '          if (req.aborted) return;\n' +
      '          reject(AxiosError.from(err, null, config, lastRequest));\n' +
      '        });\n' +
      "        stream.on('end', function handleStreamEnd() {\n" +
      '          try {\n' +
      '            var responseData = responseBuffer.length === 1 ? responseBuffer[0] : Buffer.concat(responseBuffer);\n' +
      "            if (config.responseType !== 'arraybuffer') {\n" +
      '              responseData = responseData.toString(config.responseEncoding);\n' +
      "              if (!config.responseEncoding || config.responseEncoding === 'utf8') {\n" +
      '                responseData = utils.stripBOM(responseData);\n' +
      '              }\n' +
      '            }\n' +
      '            response.data = responseData;\n' +
      '          } catch (err) {\n' +
      '            reject(AxiosError.from(err, null, config, response.request, response));\n' +
      '          }\n' +
      '          settle(resolve, reject, response);\n' +
      '        });\n' +
      '      }\n' +
      '    });\n' +
      '\n' +
      '    // Handle errors\n' +
      "    req.on('error', function handleRequestError(err) {\n" +
      '      // @todo remove\n' +
      '      // if (req.aborted && err.code !== AxiosError.ERR_FR_TOO_MANY_REDIRECTS) return;\n' +
      '      reject(AxiosError.from(err, null, config, req));\n' +
      '    });\n' +
      '\n' +
      ' '... 2346 more characters,
    transformRequest: [
      '[function] function transformRequest(data, headers) {\n' +
        "    normalizeHeaderName(headers, 'Accept');\n" +
        "    normalizeHeaderName(headers, 'Content-Type');\n" +
        '    if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {\n' +
        '      return data;\n' +
        '    }\n' +
        '    if (utils.isArrayBufferView(data)) {\n' +
        '      return data.buffer;\n' +
        '    }\n' +
        '    if (utils.isURLSearchParams(data)) {\n' +
        "      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');\n" +
        '      return data.toString();\n' +
        '    }\n' +
        '    var isObjectPayload = utils.isObject(data);\n' +
        "    var contentType = headers && headers['Content-Type'];\n" +
        '    var isFileList;\n' +
        "    if ((isFileList = utils.isFileList(data)) || isObjectPayload && contentType === 'multipart/form-data') {\n" +
        '      var _FormData = this.env && this.env.FormData;\n' +
        '      return toFormData(isFileList ? {\n' +
        "        'files[]': data\n" +
        '      } : data, _FormData && new _FormData());\n' +
        "    } else if (isObjectPayload || contentType === 'application/json') {\n" +
        "      setContentTypeIfUnset(headers, 'application/json');\n" +
        '      return stringifySafely(data);\n' +
        '    }\n' +
        '    return data;\n' +
        '  }'
    ],
    transformResponse: [
      '[function] function transformResponse(data) {\n' +
        '    var transitional = this.transitional || defaults.transitional;\n' +
        '    var silentJSONParsing = transitional && transitional.silentJSONParsing;\n' +
        '    var forcedJSONParsing = transitional && transitional.forcedJSONParsing;\n' +
        "    var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';\n" +
        '    if (strictJSONParsing || forcedJSONParsing && utils.isString(data) && data.length) {\n' +
        '      try {\n' +
        '        return JSON.parse(data);\n' +
        '      } catch (e) {\n' +
        '        if (strictJSONParsing) {\n' +
        "          if (e.name === 'SyntaxError') {\n" +
        '            throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);\n' +
        '          }\n' +
        '          throw e;\n' +
        '        }\n' +
        '      }\n' +
        '    }\n' +
        '    return data;\n' +
        '  }'
    ],
    timeout: 0,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
      FormData: '[function] function FormData(options) {\n' +
        '  if (!(this instanceof FormData)) {\n' +
        '    return new FormData(options);\n' +
        '  }\n' +
        '  this._overheadLength = 0;\n' +
        '  this._valueLength = 0;\n' +
        '  this._valuesToMeasure = [];\n' +
        '  CombinedStream.call(this);\n' +
        '  options = options || {};\n' +
        '  for (var option in options) {\n' +
        '    this[option] = options[option];\n' +
        '  }\n' +
        '}'
    },
    validateStatus: '[function] function validateStatus(status) {\n' +
      '    return status >= 200 && status < 300;\n' +
      '  }',
    headers: {
      Accept: 'application/json, text/plain, */*',
      Authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2MzA5OCwiZXhwIjoxNjg5MTQ5NDk4fQ.wN33MBqpmnNS9giiuiIYxMYrLnkR5CbYWqTbj_n51N4',
      'Content-Type': '',
      'User-Agent': 'axios/0.27.2'
    },
    url: 'https://connect-api.dev.insiteflow.io/v1/connect/container/config?organizationId=711729a8-a473-47bf-b27f-8abc1ee52281&containerType=desktop',
    method: 'get'
  },
  code: 'ERR_BAD_REQUEST',
  status: 401
}
[2023-07-11 13:41:45.011] [info]  In the catch  {
  message: 'Request failed with status code 401',
  name: 'AxiosError',
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: '[function] function httpAdapter(config) {\n' +
      '  return new Promise(function dispatchHttpRequest(resolvePromise, rejectPromise) {\n' +
      '    var onCanceled;\n' +
      '    function done() {\n' +
      '      if (config.cancelToken) {\n' +
      '        config.cancelToken.unsubscribe(onCanceled);\n' +
      '      }\n' +
      '      if (config.signal) {\n' +
      "        config.signal.removeEventListener('abort', onCanceled);\n" +
      '      }\n' +
      '    }\n' +
      '    var resolve = function resolve(value) {\n' +
      '      done();\n' +
      '      resolvePromise(value);\n' +
      '    };\n' +
      '    var rejected = false;\n' +
      '    var reject = function reject(value) {\n' +
      '      done();\n' +
      '      rejected = true;\n' +
      '      rejectPromise(value);\n' +
      '    };\n' +
      '    var data = config.data;\n' +
      '    var headers = config.headers;\n' +
      '    var headerNames = {};\n' +
      '    Object.keys(headers).forEach(function storeLowerName(name) {\n' +
      '      headerNames[name.toLowerCase()] = name;\n' +
      '    });\n' +
      '\n' +
      '    // Set User-Agent (required by some servers)\n' +
      '    // See https://github.com/axios/axios/issues/69\n' +
      "    if ('user-agent' in headerNames) {\n" +
      '      // User-Agent is specified; handle case where no UA header is desired\n' +
      "      if (!headers[headerNames['user-agent']]) {\n" +
      "        delete headers[headerNames['user-agent']];\n" +
      '      }\n' +
      '      // Otherwise, use specified value\n' +
      '    } else {\n' +
      "      // Only set header if it hasn't been set in config\n" +
      "      headers['User-Agent'] = 'axios/' + VERSION;\n" +
      '    }\n' +
      '\n' +
      '    // support for https://www.npmjs.com/package/form-data api\n' +
      '    if (utils.isFormData(data) && utils.isFunction(data.getHeaders)) {\n' +
      '      Object.assign(headers, data.getHeaders());\n' +
      '    } else if (data && !utils.isStream(data)) {\n' +
      '      if (Buffer.isBuffer(data)) {\n' +
      '        // Nothing to do...\n' +
      '      } else if (utils.isArrayBuffer(data)) {\n' +
      '        data = Buffer.from(new Uint8Array(data));\n' +
      '      } else if (utils.isString(data)) {\n' +
      "        data = Buffer.from(data, 'utf-8');\n" +
      '      } else {\n' +
      "        return reject(new AxiosError('Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream', AxiosError.ERR_BAD_REQUEST, config));\n" +
      '      }\n' +
      '      if (config.maxBodyLength > -1 && data.length > config.maxBodyLength) {\n' +
      "        return reject(new AxiosError('Request body larger than maxBodyLength limit', AxiosError.ERR_BAD_REQUEST, config));\n" +
      '      }\n' +
      '\n' +
      '      // Add Content-Length header if data exists\n' +
      "      if (!headerNames['content-length']) {\n" +
      "        headers['Content-Length'] = data.length;\n" +
      '      }\n' +
      '    }\n' +
      '\n' +
      '    // HTTP basic authentication\n' +
      '    var auth = undefined;\n' +
      '    if (config.auth) {\n' +
      "      var username = config.auth.username || '';\n" +
      "      var password = config.auth.password || '';\n" +
      "      auth = username + ':' + password;\n" +
      '    }\n' +
      '\n' +
      '    // Parse url\n' +
      '    var fullPath = buildFullPath(config.baseURL, config.url);\n' +
      '    var parsed = url.parse(fullPath);\n' +
      '    var protocol = parsed.protocol || supportedProtocols[0];\n' +
      '    if (supportedProtocols.indexOf(protocol) === -1) {\n' +
      "      return reject(new AxiosError('Unsupported protocol ' + protocol, AxiosError.ERR_BAD_REQUEST, config));\n" +
      '    }\n' +
      '    if (!auth && parsed.auth) {\n' +
      "      var urlAuth = parsed.auth.split(':');\n" +
      "      var urlUsername = urlAuth[0] || '';\n" +
      "      var urlPassword = urlAuth[1] || '';\n" +
      "      auth = urlUsername + ':' + urlPassword;\n" +
      '    }\n' +
      '    if (auth && headerNames.authorization) {\n' +
      '      delete headers[headerNames.authorization];\n' +
      '    }\n' +
      '    var isHttpsRequest = isHttps.test(protocol);\n' +
      '    var agent = isHttpsRequest ? config.httpsAgent : config.httpAgent;\n' +
      '    try {\n' +
      "      buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\\?/, '');\n" +
      '    } catch (err) {\n' +
      '      var customErr = new Error(err.message);\n' +
      '      customErr.config = config;\n' +
      '      customErr.url = config.url;\n' +
      '      customErr.exists = true;\n' +
      '      reject(customErr);\n' +
      '    }\n' +
      '    var options = {\n' +
      "      path: buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\\?/, ''),\n" +
      '      method: config.method.toUpperCase(),\n' +
      '      headers: headers,\n' +
      '      agent: agent,\n' +
      '      agents: {\n' +
      '        http: config.httpAgent,\n' +
      '        https: config.httpsAgent\n' +
      '      },\n' +
      '      auth: auth\n' +
      '    };\n' +
      '    if (config.socketPath) {\n' +
      '      options.socketPath = config.socketPath;\n' +
      '    } else {\n' +
      '      options.hostname = parsed.hostname;\n' +
      '      options.port = parsed.port;\n' +
      '    }\n' +
      '    var proxy = config.proxy;\n' +
      '    if (!proxy && proxy !== false) {\n' +
      "      var proxyEnv = protocol.slice(0, -1) + '_proxy';\n" +
      '      var proxyUrl = process.env[proxyEnv] || process.env[proxyEnv.toUpperCase()];\n' +
      '      if (proxyUrl) {\n' +
      '        var parsedProxyUrl = url.parse(proxyUrl);\n' +
      '        var noProxyEnv = process.env.no_proxy || process.env.NO_PROXY;\n' +
      '        var shouldProxy = true;\n' +
      '        if (noProxyEnv) {\n' +
      "          var noProxy = noProxyEnv.split(',').map(function trim(s) {\n" +
      '            return s.trim();\n' +
      '          });\n' +
      '          shouldProxy = !noProxy.some(function proxyMatch(proxyElement) {\n' +
      '            if (!proxyElement) {\n' +
      '              return false;\n' +
      '            }\n' +
      "            if (proxyElement === '*') {\n" +
      '              return true;\n' +
      '            }\n' +
      "            if (proxyElement[0] === '.' && parsed.hostname.substr(parsed.hostname.length - proxyElement.length) === proxyElement) {\n" +
      '              return true;\n' +
      '            }\n' +
      '            return parsed.hostname === proxyElement;\n' +
      '          });\n' +
      '        }\n' +
      '        if (shouldProxy) {\n' +
      '          proxy = {\n' +
      '            host: parsedProxyUrl.hostname,\n' +
      '            port: parsedProxyUrl.port,\n' +
      '            protocol: parsedProxyUrl.protocol\n' +
      '          };\n' +
      '          if (parsedProxyUrl.auth) {\n' +
      "            var proxyUrlAuth = parsedProxyUrl.auth.split(':');\n" +
      '            proxy.auth = {\n' +
      '              username: proxyUrlAuth[0],\n' +
      '              password: proxyUrlAuth[1]\n' +
      '            };\n' +
      '          }\n' +
      '        }\n' +
      '      }\n' +
      '    }\n' +
      '    if (proxy) {\n' +
      "      options.headers.host = parsed.hostname + (parsed.port ? ':' + parsed.port : '');\n" +
      "      setProxy(options, proxy, protocol + '//' + parsed.hostname + (parsed.port ? ':' + parsed.port : '') + options.path);\n" +
      '    }\n' +
      '    var transport;\n' +
      '    var isHttpsProxy = isHttpsRequest && (proxy ? isHttps.test(proxy.protocol) : true);\n' +
      '    if (config.transport) {\n' +
      '      transport = config.transport;\n' +
      '    } else if (config.maxRedirects === 0) {\n' +
      '      transport = isHttpsProxy ? https : http;\n' +
      '    } else {\n' +
      '      if (config.maxRedirects) {\n' +
      '        options.maxRedirects = config.maxRedirects;\n' +
      '      }\n' +
      '      if (config.beforeRedirect) {\n' +
      '        options.beforeRedirect = config.beforeRedirect;\n' +
      '      }\n' +
      '      transport = isHttpsProxy ? httpsFollow : httpFollow;\n' +
      '    }\n' +
      '    if (config.maxBodyLength > -1) {\n' +
      '      options.maxBodyLength = config.maxBodyLength;\n' +
      '    }\n' +
      '    if (config.insecureHTTPParser) {\n' +
      '      options.insecureHTTPParser = config.insecureHTTPParser;\n' +
      '    }\n' +
      '\n' +
      '    // Create the request\n' +
      '    var req = transport.request(options, function handleResponse(res) {\n' +
      '      if (req.aborted) return;\n' +
      '\n' +
      '      // uncompress the response body transparently if required\n' +
      '      var stream = res;\n' +
      '\n' +
      '      // return the last request in case of redirects\n' +
      '      var lastRequest = res.req || req;\n' +
      '\n' +
      '      // if no content, is HEAD request or decompress disabled we should not decompress\n' +
      "      if (res.statusCode !== 204 && lastRequest.method !== 'HEAD' && config.decompress !== false) {\n" +
      "        switch (res.headers['content-encoding']) {\n" +
      '          /*eslint default-case:0*/\n' +
      "          case 'gzip':\n" +
      "          case 'compress':\n" +
      "          case 'deflate':\n" +
      '            // add the unzipper to the body stream processing pipeline\n' +
      '            stream = stream.pipe(zlib.createUnzip());\n' +
      '\n' +
      '            // remove the content-encoding in order to not confuse downstream operations\n' +
      "            delete res.headers['content-encoding'];\n" +
      '            break;\n' +
      '        }\n' +
      '      }\n' +
      '      var response = {\n' +
      '        status: res.statusCode,\n' +
      '        statusText: res.statusMessage,\n' +
      '        headers: res.headers,\n' +
      '        config: config,\n' +
      '        request: lastRequest\n' +
      '      };\n' +
      "      if (config.responseType === 'stream') {\n" +
      '        response.data = stream;\n' +
      '        settle(resolve, reject, response);\n' +
      '      } else {\n' +
      '        var responseBuffer = [];\n' +
      '        var totalResponseBytes = 0;\n' +
      "        stream.on('data', function handleStreamData(chunk) {\n" +
      '          responseBuffer.push(chunk);\n' +
      '          totalResponseBytes += chunk.length;\n' +
      '\n' +
      '          // make sure the content length is not over the maxContentLength if specified\n' +
      '          if (config.maxContentLength > -1 && totalResponseBytes > config.maxContentLength) {\n' +
      '            // stream.destoy() emit aborted event before calling reject() on Node.js v16\n' +
      '            rejected = true;\n' +
      '            stream.destroy();\n' +
      "            reject(new AxiosError('maxContentLength size of ' + config.maxContentLength + ' exceeded', AxiosError.ERR_BAD_RESPONSE, config, lastRequest));\n" +
      '          }\n' +
      '        });\n' +
      "        stream.on('aborted', function handlerStreamAborted() {\n" +
      '          if (rejected) {\n' +
      '            return;\n' +
      '          }\n' +
      '          stream.destroy();\n' +
      "          reject(new AxiosError('maxContentLength size of ' + config.maxContentLength + ' exceeded', AxiosError.ERR_BAD_RESPONSE, config, lastRequest));\n" +
      '        });\n' +
      "        stream.on('error', function handleStreamError(err) {\n" +
      '          if (req.aborted) return;\n' +
      '          reject(AxiosError.from(err, null, config, lastRequest));\n' +
      '        });\n' +
      "        stream.on('end', function handleStreamEnd() {\n" +
      '          try {\n' +
      '            var responseData = responseBuffer.length === 1 ? responseBuffer[0] : Buffer.concat(responseBuffer);\n' +
      "            if (config.responseType !== 'arraybuffer') {\n" +
      '              responseData = responseData.toString(config.responseEncoding);\n' +
      "              if (!config.responseEncoding || config.responseEncoding === 'utf8') {\n" +
      '                responseData = utils.stripBOM(responseData);\n' +
      '              }\n' +
      '            }\n' +
      '            response.data = responseData;\n' +
      '          } catch (err) {\n' +
      '            reject(AxiosError.from(err, null, config, response.request, response));\n' +
      '          }\n' +
      '          settle(resolve, reject, response);\n' +
      '        });\n' +
      '      }\n' +
      '    });\n' +
      '\n' +
      '    // Handle errors\n' +
      "    req.on('error', function handleRequestError(err) {\n" +
      '      // @todo remove\n' +
      '      // if (req.aborted && err.code !== AxiosError.ERR_FR_TOO_MANY_REDIRECTS) return;\n' +
      '      reject(AxiosError.from(err, null, config, req));\n' +
      '    });\n' +
      '\n' +
      ' '... 2346 more characters,
    transformRequest: [
      '[function] function transformRequest(data, headers) {\n' +
        "    normalizeHeaderName(headers, 'Accept');\n" +
        "    normalizeHeaderName(headers, 'Content-Type');\n" +
        '    if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {\n' +
        '      return data;\n' +
        '    }\n' +
        '    if (utils.isArrayBufferView(data)) {\n' +
        '      return data.buffer;\n' +
        '    }\n' +
        '    if (utils.isURLSearchParams(data)) {\n' +
        "      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');\n" +
        '      return data.toString();\n' +
        '    }\n' +
        '    var isObjectPayload = utils.isObject(data);\n' +
        "    var contentType = headers && headers['Content-Type'];\n" +
        '    var isFileList;\n' +
        "    if ((isFileList = utils.isFileList(data)) || isObjectPayload && contentType === 'multipart/form-data') {\n" +
        '      var _FormData = this.env && this.env.FormData;\n' +
        '      return toFormData(isFileList ? {\n' +
        "        'files[]': data\n" +
        '      } : data, _FormData && new _FormData());\n' +
        "    } else if (isObjectPayload || contentType === 'application/json') {\n" +
        "      setContentTypeIfUnset(headers, 'application/json');\n" +
        '      return stringifySafely(data);\n' +
        '    }\n' +
        '    return data;\n' +
        '  }'
    ],
    transformResponse: [
      '[function] function transformResponse(data) {\n' +
        '    var transitional = this.transitional || defaults.transitional;\n' +
        '    var silentJSONParsing = transitional && transitional.silentJSONParsing;\n' +
        '    var forcedJSONParsing = transitional && transitional.forcedJSONParsing;\n' +
        "    var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';\n" +
        '    if (strictJSONParsing || forcedJSONParsing && utils.isString(data) && data.length) {\n' +
        '      try {\n' +
        '        return JSON.parse(data);\n' +
        '      } catch (e) {\n' +
        '        if (strictJSONParsing) {\n' +
        "          if (e.name === 'SyntaxError') {\n" +
        '            throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);\n' +
        '          }\n' +
        '          throw e;\n' +
        '        }\n' +
        '      }\n' +
        '    }\n' +
        '    return data;\n' +
        '  }'
    ],
    timeout: 0,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
      FormData: '[function] function FormData(options) {\n' +
        '  if (!(this instanceof FormData)) {\n' +
        '    return new FormData(options);\n' +
        '  }\n' +
        '  this._overheadLength = 0;\n' +
        '  this._valueLength = 0;\n' +
        '  this._valuesToMeasure = [];\n' +
        '  CombinedStream.call(this);\n' +
        '  options = options || {};\n' +
        '  for (var option in options) {\n' +
        '    this[option] = options[option];\n' +
        '  }\n' +
        '}'
    },
    validateStatus: '[function] function validateStatus(status) {\n' +
      '    return status >= 200 && status < 300;\n' +
      '  }',
    headers: {
      Accept: 'application/json, text/plain, */*',
      Authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2MzA5OCwiZXhwIjoxNjg5MTQ5NDk4fQ.wN33MBqpmnNS9giiuiIYxMYrLnkR5CbYWqTbj_n51N4',
      'Content-Type': '',
      'User-Agent': 'axios/0.27.2'
    },
    url: 'https://connect-api.dev.insiteflow.io/v1/connect/container/config?organizationId=711729a8-a473-47bf-b27f-8abc1ee52281&containerType=desktop',
    method: 'get'
  },
  code: 'ERR_BAD_REQUEST',
  status: 401
}
[2023-07-11 13:41:49.821] [info]  In the catch  {
  message: 'Request failed with status code 401',
  name: 'AxiosError',
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: '[function] function httpAdapter(config) {\n' +
      '  return new Promise(function dispatchHttpRequest(resolvePromise, rejectPromise) {\n' +
      '    var onCanceled;\n' +
      '    function done() {\n' +
      '      if (config.cancelToken) {\n' +
      '        config.cancelToken.unsubscribe(onCanceled);\n' +
      '      }\n' +
      '      if (config.signal) {\n' +
      "        config.signal.removeEventListener('abort', onCanceled);\n" +
      '      }\n' +
      '    }\n' +
      '    var resolve = function resolve(value) {\n' +
      '      done();\n' +
      '      resolvePromise(value);\n' +
      '    };\n' +
      '    var rejected = false;\n' +
      '    var reject = function reject(value) {\n' +
      '      done();\n' +
      '      rejected = true;\n' +
      '      rejectPromise(value);\n' +
      '    };\n' +
      '    var data = config.data;\n' +
      '    var headers = config.headers;\n' +
      '    var headerNames = {};\n' +
      '    Object.keys(headers).forEach(function storeLowerName(name) {\n' +
      '      headerNames[name.toLowerCase()] = name;\n' +
      '    });\n' +
      '\n' +
      '    // Set User-Agent (required by some servers)\n' +
      '    // See https://github.com/axios/axios/issues/69\n' +
      "    if ('user-agent' in headerNames) {\n" +
      '      // User-Agent is specified; handle case where no UA header is desired\n' +
      "      if (!headers[headerNames['user-agent']]) {\n" +
      "        delete headers[headerNames['user-agent']];\n" +
      '      }\n' +
      '      // Otherwise, use specified value\n' +
      '    } else {\n' +
      "      // Only set header if it hasn't been set in config\n" +
      "      headers['User-Agent'] = 'axios/' + VERSION;\n" +
      '    }\n' +
      '\n' +
      '    // support for https://www.npmjs.com/package/form-data api\n' +
      '    if (utils.isFormData(data) && utils.isFunction(data.getHeaders)) {\n' +
      '      Object.assign(headers, data.getHeaders());\n' +
      '    } else if (data && !utils.isStream(data)) {\n' +
      '      if (Buffer.isBuffer(data)) {\n' +
      '        // Nothing to do...\n' +
      '      } else if (utils.isArrayBuffer(data)) {\n' +
      '        data = Buffer.from(new Uint8Array(data));\n' +
      '      } else if (utils.isString(data)) {\n' +
      "        data = Buffer.from(data, 'utf-8');\n" +
      '      } else {\n' +
      "        return reject(new AxiosError('Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream', AxiosError.ERR_BAD_REQUEST, config));\n" +
      '      }\n' +
      '      if (config.maxBodyLength > -1 && data.length > config.maxBodyLength) {\n' +
      "        return reject(new AxiosError('Request body larger than maxBodyLength limit', AxiosError.ERR_BAD_REQUEST, config));\n" +
      '      }\n' +
      '\n' +
      '      // Add Content-Length header if data exists\n' +
      "      if (!headerNames['content-length']) {\n" +
      "        headers['Content-Length'] = data.length;\n" +
      '      }\n' +
      '    }\n' +
      '\n' +
      '    // HTTP basic authentication\n' +
      '    var auth = undefined;\n' +
      '    if (config.auth) {\n' +
      "      var username = config.auth.username || '';\n" +
      "      var password = config.auth.password || '';\n" +
      "      auth = username + ':' + password;\n" +
      '    }\n' +
      '\n' +
      '    // Parse url\n' +
      '    var fullPath = buildFullPath(config.baseURL, config.url);\n' +
      '    var parsed = url.parse(fullPath);\n' +
      '    var protocol = parsed.protocol || supportedProtocols[0];\n' +
      '    if (supportedProtocols.indexOf(protocol) === -1) {\n' +
      "      return reject(new AxiosError('Unsupported protocol ' + protocol, AxiosError.ERR_BAD_REQUEST, config));\n" +
      '    }\n' +
      '    if (!auth && parsed.auth) {\n' +
      "      var urlAuth = parsed.auth.split(':');\n" +
      "      var urlUsername = urlAuth[0] || '';\n" +
      "      var urlPassword = urlAuth[1] || '';\n" +
      "      auth = urlUsername + ':' + urlPassword;\n" +
      '    }\n' +
      '    if (auth && headerNames.authorization) {\n' +
      '      delete headers[headerNames.authorization];\n' +
      '    }\n' +
      '    var isHttpsRequest = isHttps.test(protocol);\n' +
      '    var agent = isHttpsRequest ? config.httpsAgent : config.httpAgent;\n' +
      '    try {\n' +
      "      buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\\?/, '');\n" +
      '    } catch (err) {\n' +
      '      var customErr = new Error(err.message);\n' +
      '      customErr.config = config;\n' +
      '      customErr.url = config.url;\n' +
      '      customErr.exists = true;\n' +
      '      reject(customErr);\n' +
      '    }\n' +
      '    var options = {\n' +
      "      path: buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\\?/, ''),\n" +
      '      method: config.method.toUpperCase(),\n' +
      '      headers: headers,\n' +
      '      agent: agent,\n' +
      '      agents: {\n' +
      '        http: config.httpAgent,\n' +
      '        https: config.httpsAgent\n' +
      '      },\n' +
      '      auth: auth\n' +
      '    };\n' +
      '    if (config.socketPath) {\n' +
      '      options.socketPath = config.socketPath;\n' +
      '    } else {\n' +
      '      options.hostname = parsed.hostname;\n' +
      '      options.port = parsed.port;\n' +
      '    }\n' +
      '    var proxy = config.proxy;\n' +
      '    if (!proxy && proxy !== false) {\n' +
      "      var proxyEnv = protocol.slice(0, -1) + '_proxy';\n" +
      '      var proxyUrl = process.env[proxyEnv] || process.env[proxyEnv.toUpperCase()];\n' +
      '      if (proxyUrl) {\n' +
      '        var parsedProxyUrl = url.parse(proxyUrl);\n' +
      '        var noProxyEnv = process.env.no_proxy || process.env.NO_PROXY;\n' +
      '        var shouldProxy = true;\n' +
      '        if (noProxyEnv) {\n' +
      "          var noProxy = noProxyEnv.split(',').map(function trim(s) {\n" +
      '            return s.trim();\n' +
      '          });\n' +
      '          shouldProxy = !noProxy.some(function proxyMatch(proxyElement) {\n' +
      '            if (!proxyElement) {\n' +
      '              return false;\n' +
      '            }\n' +
      "            if (proxyElement === '*') {\n" +
      '              return true;\n' +
      '            }\n' +
      "            if (proxyElement[0] === '.' && parsed.hostname.substr(parsed.hostname.length - proxyElement.length) === proxyElement) {\n" +
      '              return true;\n' +
      '            }\n' +
      '            return parsed.hostname === proxyElement;\n' +
      '          });\n' +
      '        }\n' +
      '        if (shouldProxy) {\n' +
      '          proxy = {\n' +
      '            host: parsedProxyUrl.hostname,\n' +
      '            port: parsedProxyUrl.port,\n' +
      '            protocol: parsedProxyUrl.protocol\n' +
      '          };\n' +
      '          if (parsedProxyUrl.auth) {\n' +
      "            var proxyUrlAuth = parsedProxyUrl.auth.split(':');\n" +
      '            proxy.auth = {\n' +
      '              username: proxyUrlAuth[0],\n' +
      '              password: proxyUrlAuth[1]\n' +
      '            };\n' +
      '          }\n' +
      '        }\n' +
      '      }\n' +
      '    }\n' +
      '    if (proxy) {\n' +
      "      options.headers.host = parsed.hostname + (parsed.port ? ':' + parsed.port : '');\n" +
      "      setProxy(options, proxy, protocol + '//' + parsed.hostname + (parsed.port ? ':' + parsed.port : '') + options.path);\n" +
      '    }\n' +
      '    var transport;\n' +
      '    var isHttpsProxy = isHttpsRequest && (proxy ? isHttps.test(proxy.protocol) : true);\n' +
      '    if (config.transport) {\n' +
      '      transport = config.transport;\n' +
      '    } else if (config.maxRedirects === 0) {\n' +
      '      transport = isHttpsProxy ? https : http;\n' +
      '    } else {\n' +
      '      if (config.maxRedirects) {\n' +
      '        options.maxRedirects = config.maxRedirects;\n' +
      '      }\n' +
      '      if (config.beforeRedirect) {\n' +
      '        options.beforeRedirect = config.beforeRedirect;\n' +
      '      }\n' +
      '      transport = isHttpsProxy ? httpsFollow : httpFollow;\n' +
      '    }\n' +
      '    if (config.maxBodyLength > -1) {\n' +
      '      options.maxBodyLength = config.maxBodyLength;\n' +
      '    }\n' +
      '    if (config.insecureHTTPParser) {\n' +
      '      options.insecureHTTPParser = config.insecureHTTPParser;\n' +
      '    }\n' +
      '\n' +
      '    // Create the request\n' +
      '    var req = transport.request(options, function handleResponse(res) {\n' +
      '      if (req.aborted) return;\n' +
      '\n' +
      '      // uncompress the response body transparently if required\n' +
      '      var stream = res;\n' +
      '\n' +
      '      // return the last request in case of redirects\n' +
      '      var lastRequest = res.req || req;\n' +
      '\n' +
      '      // if no content, is HEAD request or decompress disabled we should not decompress\n' +
      "      if (res.statusCode !== 204 && lastRequest.method !== 'HEAD' && config.decompress !== false) {\n" +
      "        switch (res.headers['content-encoding']) {\n" +
      '          /*eslint default-case:0*/\n' +
      "          case 'gzip':\n" +
      "          case 'compress':\n" +
      "          case 'deflate':\n" +
      '            // add the unzipper to the body stream processing pipeline\n' +
      '            stream = stream.pipe(zlib.createUnzip());\n' +
      '\n' +
      '            // remove the content-encoding in order to not confuse downstream operations\n' +
      "            delete res.headers['content-encoding'];\n" +
      '            break;\n' +
      '        }\n' +
      '      }\n' +
      '      var response = {\n' +
      '        status: res.statusCode,\n' +
      '        statusText: res.statusMessage,\n' +
      '        headers: res.headers,\n' +
      '        config: config,\n' +
      '        request: lastRequest\n' +
      '      };\n' +
      "      if (config.responseType === 'stream') {\n" +
      '        response.data = stream;\n' +
      '        settle(resolve, reject, response);\n' +
      '      } else {\n' +
      '        var responseBuffer = [];\n' +
      '        var totalResponseBytes = 0;\n' +
      "        stream.on('data', function handleStreamData(chunk) {\n" +
      '          responseBuffer.push(chunk);\n' +
      '          totalResponseBytes += chunk.length;\n' +
      '\n' +
      '          // make sure the content length is not over the maxContentLength if specified\n' +
      '          if (config.maxContentLength > -1 && totalResponseBytes > config.maxContentLength) {\n' +
      '            // stream.destoy() emit aborted event before calling reject() on Node.js v16\n' +
      '            rejected = true;\n' +
      '            stream.destroy();\n' +
      "            reject(new AxiosError('maxContentLength size of ' + config.maxContentLength + ' exceeded', AxiosError.ERR_BAD_RESPONSE, config, lastRequest));\n" +
      '          }\n' +
      '        });\n' +
      "        stream.on('aborted', function handlerStreamAborted() {\n" +
      '          if (rejected) {\n' +
      '            return;\n' +
      '          }\n' +
      '          stream.destroy();\n' +
      "          reject(new AxiosError('maxContentLength size of ' + config.maxContentLength + ' exceeded', AxiosError.ERR_BAD_RESPONSE, config, lastRequest));\n" +
      '        });\n' +
      "        stream.on('error', function handleStreamError(err) {\n" +
      '          if (req.aborted) return;\n' +
      '          reject(AxiosError.from(err, null, config, lastRequest));\n' +
      '        });\n' +
      "        stream.on('end', function handleStreamEnd() {\n" +
      '          try {\n' +
      '            var responseData = responseBuffer.length === 1 ? responseBuffer[0] : Buffer.concat(responseBuffer);\n' +
      "            if (config.responseType !== 'arraybuffer') {\n" +
      '              responseData = responseData.toString(config.responseEncoding);\n' +
      "              if (!config.responseEncoding || config.responseEncoding === 'utf8') {\n" +
      '                responseData = utils.stripBOM(responseData);\n' +
      '              }\n' +
      '            }\n' +
      '            response.data = responseData;\n' +
      '          } catch (err) {\n' +
      '            reject(AxiosError.from(err, null, config, response.request, response));\n' +
      '          }\n' +
      '          settle(resolve, reject, response);\n' +
      '        });\n' +
      '      }\n' +
      '    });\n' +
      '\n' +
      '    // Handle errors\n' +
      "    req.on('error', function handleRequestError(err) {\n" +
      '      // @todo remove\n' +
      '      // if (req.aborted && err.code !== AxiosError.ERR_FR_TOO_MANY_REDIRECTS) return;\n' +
      '      reject(AxiosError.from(err, null, config, req));\n' +
      '    });\n' +
      '\n' +
      ' '... 2346 more characters,
    transformRequest: [
      '[function] function transformRequest(data, headers) {\n' +
        "    normalizeHeaderName(headers, 'Accept');\n" +
        "    normalizeHeaderName(headers, 'Content-Type');\n" +
        '    if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {\n' +
        '      return data;\n' +
        '    }\n' +
        '    if (utils.isArrayBufferView(data)) {\n' +
        '      return data.buffer;\n' +
        '    }\n' +
        '    if (utils.isURLSearchParams(data)) {\n' +
        "      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');\n" +
        '      return data.toString();\n' +
        '    }\n' +
        '    var isObjectPayload = utils.isObject(data);\n' +
        "    var contentType = headers && headers['Content-Type'];\n" +
        '    var isFileList;\n' +
        "    if ((isFileList = utils.isFileList(data)) || isObjectPayload && contentType === 'multipart/form-data') {\n" +
        '      var _FormData = this.env && this.env.FormData;\n' +
        '      return toFormData(isFileList ? {\n' +
        "        'files[]': data\n" +
        '      } : data, _FormData && new _FormData());\n' +
        "    } else if (isObjectPayload || contentType === 'application/json') {\n" +
        "      setContentTypeIfUnset(headers, 'application/json');\n" +
        '      return stringifySafely(data);\n' +
        '    }\n' +
        '    return data;\n' +
        '  }'
    ],
    transformResponse: [
      '[function] function transformResponse(data) {\n' +
        '    var transitional = this.transitional || defaults.transitional;\n' +
        '    var silentJSONParsing = transitional && transitional.silentJSONParsing;\n' +
        '    var forcedJSONParsing = transitional && transitional.forcedJSONParsing;\n' +
        "    var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';\n" +
        '    if (strictJSONParsing || forcedJSONParsing && utils.isString(data) && data.length) {\n' +
        '      try {\n' +
        '        return JSON.parse(data);\n' +
        '      } catch (e) {\n' +
        '        if (strictJSONParsing) {\n' +
        "          if (e.name === 'SyntaxError') {\n" +
        '            throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);\n' +
        '          }\n' +
        '          throw e;\n' +
        '        }\n' +
        '      }\n' +
        '    }\n' +
        '    return data;\n' +
        '  }'
    ],
    timeout: 0,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
      FormData: '[function] function FormData(options) {\n' +
        '  if (!(this instanceof FormData)) {\n' +
        '    return new FormData(options);\n' +
        '  }\n' +
        '  this._overheadLength = 0;\n' +
        '  this._valueLength = 0;\n' +
        '  this._valuesToMeasure = [];\n' +
        '  CombinedStream.call(this);\n' +
        '  options = options || {};\n' +
        '  for (var option in options) {\n' +
        '    this[option] = options[option];\n' +
        '  }\n' +
        '}'
    },
    validateStatus: '[function] function validateStatus(status) {\n' +
      '    return status >= 200 && status < 300;\n' +
      '  }',
    headers: {
      Accept: 'application/json, text/plain, */*',
      Authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2MzA5OCwiZXhwIjoxNjg5MTQ5NDk4fQ.wN33MBqpmnNS9giiuiIYxMYrLnkR5CbYWqTbj_n51N4',
      'Content-Type': '',
      'User-Agent': 'axios/0.27.2'
    },
    url: 'https://connect-api.dev.insiteflow.io/v1/connect/container/config?organizationId=711729a8-a473-47bf-b27f-8abc1ee52281&containerType=desktop',
    method: 'get'
  },
  code: 'ERR_BAD_REQUEST',
  status: 401
}
[2023-07-11 13:41:54.893] [info]  In the catch  {
  message: 'Request failed with status code 401',
  name: 'AxiosError',
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: '[function] function httpAdapter(config) {\n' +
      '  return new Promise(function dispatchHttpRequest(resolvePromise, rejectPromise) {\n' +
      '    var onCanceled;\n' +
      '    function done() {\n' +
      '      if (config.cancelToken) {\n' +
      '        config.cancelToken.unsubscribe(onCanceled);\n' +
      '      }\n' +
      '      if (config.signal) {\n' +
      "        config.signal.removeEventListener('abort', onCanceled);\n" +
      '      }\n' +
      '    }\n' +
      '    var resolve = function resolve(value) {\n' +
      '      done();\n' +
      '      resolvePromise(value);\n' +
      '    };\n' +
      '    var rejected = false;\n' +
      '    var reject = function reject(value) {\n' +
      '      done();\n' +
      '      rejected = true;\n' +
      '      rejectPromise(value);\n' +
      '    };\n' +
      '    var data = config.data;\n' +
      '    var headers = config.headers;\n' +
      '    var headerNames = {};\n' +
      '    Object.keys(headers).forEach(function storeLowerName(name) {\n' +
      '      headerNames[name.toLowerCase()] = name;\n' +
      '    });\n' +
      '\n' +
      '    // Set User-Agent (required by some servers)\n' +
      '    // See https://github.com/axios/axios/issues/69\n' +
      "    if ('user-agent' in headerNames) {\n" +
      '      // User-Agent is specified; handle case where no UA header is desired\n' +
      "      if (!headers[headerNames['user-agent']]) {\n" +
      "        delete headers[headerNames['user-agent']];\n" +
      '      }\n' +
      '      // Otherwise, use specified value\n' +
      '    } else {\n' +
      "      // Only set header if it hasn't been set in config\n" +
      "      headers['User-Agent'] = 'axios/' + VERSION;\n" +
      '    }\n' +
      '\n' +
      '    // support for https://www.npmjs.com/package/form-data api\n' +
      '    if (utils.isFormData(data) && utils.isFunction(data.getHeaders)) {\n' +
      '      Object.assign(headers, data.getHeaders());\n' +
      '    } else if (data && !utils.isStream(data)) {\n' +
      '      if (Buffer.isBuffer(data)) {\n' +
      '        // Nothing to do...\n' +
      '      } else if (utils.isArrayBuffer(data)) {\n' +
      '        data = Buffer.from(new Uint8Array(data));\n' +
      '      } else if (utils.isString(data)) {\n' +
      "        data = Buffer.from(data, 'utf-8');\n" +
      '      } else {\n' +
      "        return reject(new AxiosError('Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream', AxiosError.ERR_BAD_REQUEST, config));\n" +
      '      }\n' +
      '      if (config.maxBodyLength > -1 && data.length > config.maxBodyLength) {\n' +
      "        return reject(new AxiosError('Request body larger than maxBodyLength limit', AxiosError.ERR_BAD_REQUEST, config));\n" +
      '      }\n' +
      '\n' +
      '      // Add Content-Length header if data exists\n' +
      "      if (!headerNames['content-length']) {\n" +
      "        headers['Content-Length'] = data.length;\n" +
      '      }\n' +
      '    }\n' +
      '\n' +
      '    // HTTP basic authentication\n' +
      '    var auth = undefined;\n' +
      '    if (config.auth) {\n' +
      "      var username = config.auth.username || '';\n" +
      "      var password = config.auth.password || '';\n" +
      "      auth = username + ':' + password;\n" +
      '    }\n' +
      '\n' +
      '    // Parse url\n' +
      '    var fullPath = buildFullPath(config.baseURL, config.url);\n' +
      '    var parsed = url.parse(fullPath);\n' +
      '    var protocol = parsed.protocol || supportedProtocols[0];\n' +
      '    if (supportedProtocols.indexOf(protocol) === -1) {\n' +
      "      return reject(new AxiosError('Unsupported protocol ' + protocol, AxiosError.ERR_BAD_REQUEST, config));\n" +
      '    }\n' +
      '    if (!auth && parsed.auth) {\n' +
      "      var urlAuth = parsed.auth.split(':');\n" +
      "      var urlUsername = urlAuth[0] || '';\n" +
      "      var urlPassword = urlAuth[1] || '';\n" +
      "      auth = urlUsername + ':' + urlPassword;\n" +
      '    }\n' +
      '    if (auth && headerNames.authorization) {\n' +
      '      delete headers[headerNames.authorization];\n' +
      '    }\n' +
      '    var isHttpsRequest = isHttps.test(protocol);\n' +
      '    var agent = isHttpsRequest ? config.httpsAgent : config.httpAgent;\n' +
      '    try {\n' +
      "      buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\\?/, '');\n" +
      '    } catch (err) {\n' +
      '      var customErr = new Error(err.message);\n' +
      '      customErr.config = config;\n' +
      '      customErr.url = config.url;\n' +
      '      customErr.exists = true;\n' +
      '      reject(customErr);\n' +
      '    }\n' +
      '    var options = {\n' +
      "      path: buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\\?/, ''),\n" +
      '      method: config.method.toUpperCase(),\n' +
      '      headers: headers,\n' +
      '      agent: agent,\n' +
      '      agents: {\n' +
      '        http: config.httpAgent,\n' +
      '        https: config.httpsAgent\n' +
      '      },\n' +
      '      auth: auth\n' +
      '    };\n' +
      '    if (config.socketPath) {\n' +
      '      options.socketPath = config.socketPath;\n' +
      '    } else {\n' +
      '      options.hostname = parsed.hostname;\n' +
      '      options.port = parsed.port;\n' +
      '    }\n' +
      '    var proxy = config.proxy;\n' +
      '    if (!proxy && proxy !== false) {\n' +
      "      var proxyEnv = protocol.slice(0, -1) + '_proxy';\n" +
      '      var proxyUrl = process.env[proxyEnv] || process.env[proxyEnv.toUpperCase()];\n' +
      '      if (proxyUrl) {\n' +
      '        var parsedProxyUrl = url.parse(proxyUrl);\n' +
      '        var noProxyEnv = process.env.no_proxy || process.env.NO_PROXY;\n' +
      '        var shouldProxy = true;\n' +
      '        if (noProxyEnv) {\n' +
      "          var noProxy = noProxyEnv.split(',').map(function trim(s) {\n" +
      '            return s.trim();\n' +
      '          });\n' +
      '          shouldProxy = !noProxy.some(function proxyMatch(proxyElement) {\n' +
      '            if (!proxyElement) {\n' +
      '              return false;\n' +
      '            }\n' +
      "            if (proxyElement === '*') {\n" +
      '              return true;\n' +
      '            }\n' +
      "            if (proxyElement[0] === '.' && parsed.hostname.substr(parsed.hostname.length - proxyElement.length) === proxyElement) {\n" +
      '              return true;\n' +
      '            }\n' +
      '            return parsed.hostname === proxyElement;\n' +
      '          });\n' +
      '        }\n' +
      '        if (shouldProxy) {\n' +
      '          proxy = {\n' +
      '            host: parsedProxyUrl.hostname,\n' +
      '            port: parsedProxyUrl.port,\n' +
      '            protocol: parsedProxyUrl.protocol\n' +
      '          };\n' +
      '          if (parsedProxyUrl.auth) {\n' +
      "            var proxyUrlAuth = parsedProxyUrl.auth.split(':');\n" +
      '            proxy.auth = {\n' +
      '              username: proxyUrlAuth[0],\n' +
      '              password: proxyUrlAuth[1]\n' +
      '            };\n' +
      '          }\n' +
      '        }\n' +
      '      }\n' +
      '    }\n' +
      '    if (proxy) {\n' +
      "      options.headers.host = parsed.hostname + (parsed.port ? ':' + parsed.port : '');\n" +
      "      setProxy(options, proxy, protocol + '//' + parsed.hostname + (parsed.port ? ':' + parsed.port : '') + options.path);\n" +
      '    }\n' +
      '    var transport;\n' +
      '    var isHttpsProxy = isHttpsRequest && (proxy ? isHttps.test(proxy.protocol) : true);\n' +
      '    if (config.transport) {\n' +
      '      transport = config.transport;\n' +
      '    } else if (config.maxRedirects === 0) {\n' +
      '      transport = isHttpsProxy ? https : http;\n' +
      '    } else {\n' +
      '      if (config.maxRedirects) {\n' +
      '        options.maxRedirects = config.maxRedirects;\n' +
      '      }\n' +
      '      if (config.beforeRedirect) {\n' +
      '        options.beforeRedirect = config.beforeRedirect;\n' +
      '      }\n' +
      '      transport = isHttpsProxy ? httpsFollow : httpFollow;\n' +
      '    }\n' +
      '    if (config.maxBodyLength > -1) {\n' +
      '      options.maxBodyLength = config.maxBodyLength;\n' +
      '    }\n' +
      '    if (config.insecureHTTPParser) {\n' +
      '      options.insecureHTTPParser = config.insecureHTTPParser;\n' +
      '    }\n' +
      '\n' +
      '    // Create the request\n' +
      '    var req = transport.request(options, function handleResponse(res) {\n' +
      '      if (req.aborted) return;\n' +
      '\n' +
      '      // uncompress the response body transparently if required\n' +
      '      var stream = res;\n' +
      '\n' +
      '      // return the last request in case of redirects\n' +
      '      var lastRequest = res.req || req;\n' +
      '\n' +
      '      // if no content, is HEAD request or decompress disabled we should not decompress\n' +
      "      if (res.statusCode !== 204 && lastRequest.method !== 'HEAD' && config.decompress !== false) {\n" +
      "        switch (res.headers['content-encoding']) {\n" +
      '          /*eslint default-case:0*/\n' +
      "          case 'gzip':\n" +
      "          case 'compress':\n" +
      "          case 'deflate':\n" +
      '            // add the unzipper to the body stream processing pipeline\n' +
      '            stream = stream.pipe(zlib.createUnzip());\n' +
      '\n' +
      '            // remove the content-encoding in order to not confuse downstream operations\n' +
      "            delete res.headers['content-encoding'];\n" +
      '            break;\n' +
      '        }\n' +
      '      }\n' +
      '      var response = {\n' +
      '        status: res.statusCode,\n' +
      '        statusText: res.statusMessage,\n' +
      '        headers: res.headers,\n' +
      '        config: config,\n' +
      '        request: lastRequest\n' +
      '      };\n' +
      "      if (config.responseType === 'stream') {\n" +
      '        response.data = stream;\n' +
      '        settle(resolve, reject, response);\n' +
      '      } else {\n' +
      '        var responseBuffer = [];\n' +
      '        var totalResponseBytes = 0;\n' +
      "        stream.on('data', function handleStreamData(chunk) {\n" +
      '          responseBuffer.push(chunk);\n' +
      '          totalResponseBytes += chunk.length;\n' +
      '\n' +
      '          // make sure the content length is not over the maxContentLength if specified\n' +
      '          if (config.maxContentLength > -1 && totalResponseBytes > config.maxContentLength) {\n' +
      '            // stream.destoy() emit aborted event before calling reject() on Node.js v16\n' +
      '            rejected = true;\n' +
      '            stream.destroy();\n' +
      "            reject(new AxiosError('maxContentLength size of ' + config.maxContentLength + ' exceeded', AxiosError.ERR_BAD_RESPONSE, config, lastRequest));\n" +
      '          }\n' +
      '        });\n' +
      "        stream.on('aborted', function handlerStreamAborted() {\n" +
      '          if (rejected) {\n' +
      '            return;\n' +
      '          }\n' +
      '          stream.destroy();\n' +
      "          reject(new AxiosError('maxContentLength size of ' + config.maxContentLength + ' exceeded', AxiosError.ERR_BAD_RESPONSE, config, lastRequest));\n" +
      '        });\n' +
      "        stream.on('error', function handleStreamError(err) {\n" +
      '          if (req.aborted) return;\n' +
      '          reject(AxiosError.from(err, null, config, lastRequest));\n' +
      '        });\n' +
      "        stream.on('end', function handleStreamEnd() {\n" +
      '          try {\n' +
      '            var responseData = responseBuffer.length === 1 ? responseBuffer[0] : Buffer.concat(responseBuffer);\n' +
      "            if (config.responseType !== 'arraybuffer') {\n" +
      '              responseData = responseData.toString(config.responseEncoding);\n' +
      "              if (!config.responseEncoding || config.responseEncoding === 'utf8') {\n" +
      '                responseData = utils.stripBOM(responseData);\n' +
      '              }\n' +
      '            }\n' +
      '            response.data = responseData;\n' +
      '          } catch (err) {\n' +
      '            reject(AxiosError.from(err, null, config, response.request, response));\n' +
      '          }\n' +
      '          settle(resolve, reject, response);\n' +
      '        });\n' +
      '      }\n' +
      '    });\n' +
      '\n' +
      '    // Handle errors\n' +
      "    req.on('error', function handleRequestError(err) {\n" +
      '      // @todo remove\n' +
      '      // if (req.aborted && err.code !== AxiosError.ERR_FR_TOO_MANY_REDIRECTS) return;\n' +
      '      reject(AxiosError.from(err, null, config, req));\n' +
      '    });\n' +
      '\n' +
      ' '... 2346 more characters,
    transformRequest: [
      '[function] function transformRequest(data, headers) {\n' +
        "    normalizeHeaderName(headers, 'Accept');\n" +
        "    normalizeHeaderName(headers, 'Content-Type');\n" +
        '    if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {\n' +
        '      return data;\n' +
        '    }\n' +
        '    if (utils.isArrayBufferView(data)) {\n' +
        '      return data.buffer;\n' +
        '    }\n' +
        '    if (utils.isURLSearchParams(data)) {\n' +
        "      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');\n" +
        '      return data.toString();\n' +
        '    }\n' +
        '    var isObjectPayload = utils.isObject(data);\n' +
        "    var contentType = headers && headers['Content-Type'];\n" +
        '    var isFileList;\n' +
        "    if ((isFileList = utils.isFileList(data)) || isObjectPayload && contentType === 'multipart/form-data') {\n" +
        '      var _FormData = this.env && this.env.FormData;\n' +
        '      return toFormData(isFileList ? {\n' +
        "        'files[]': data\n" +
        '      } : data, _FormData && new _FormData());\n' +
        "    } else if (isObjectPayload || contentType === 'application/json') {\n" +
        "      setContentTypeIfUnset(headers, 'application/json');\n" +
        '      return stringifySafely(data);\n' +
        '    }\n' +
        '    return data;\n' +
        '  }'
    ],
    transformResponse: [
      '[function] function transformResponse(data) {\n' +
        '    var transitional = this.transitional || defaults.transitional;\n' +
        '    var silentJSONParsing = transitional && transitional.silentJSONParsing;\n' +
        '    var forcedJSONParsing = transitional && transitional.forcedJSONParsing;\n' +
        "    var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';\n" +
        '    if (strictJSONParsing || forcedJSONParsing && utils.isString(data) && data.length) {\n' +
        '      try {\n' +
        '        return JSON.parse(data);\n' +
        '      } catch (e) {\n' +
        '        if (strictJSONParsing) {\n' +
        "          if (e.name === 'SyntaxError') {\n" +
        '            throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);\n' +
        '          }\n' +
        '          throw e;\n' +
        '        }\n' +
        '      }\n' +
        '    }\n' +
        '    return data;\n' +
        '  }'
    ],
    timeout: 0,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
      FormData: '[function] function FormData(options) {\n' +
        '  if (!(this instanceof FormData)) {\n' +
        '    return new FormData(options);\n' +
        '  }\n' +
        '  this._overheadLength = 0;\n' +
        '  this._valueLength = 0;\n' +
        '  this._valuesToMeasure = [];\n' +
        '  CombinedStream.call(this);\n' +
        '  options = options || {};\n' +
        '  for (var option in options) {\n' +
        '    this[option] = options[option];\n' +
        '  }\n' +
        '}'
    },
    validateStatus: '[function] function validateStatus(status) {\n' +
      '    return status >= 200 && status < 300;\n' +
      '  }',
    headers: {
      Accept: 'application/json, text/plain, */*',
      Authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2MzA5OCwiZXhwIjoxNjg5MTQ5NDk4fQ.wN33MBqpmnNS9giiuiIYxMYrLnkR5CbYWqTbj_n51N4',
      'Content-Type': '',
      'User-Agent': 'axios/0.27.2'
    },
    url: 'https://connect-api.dev.insiteflow.io/v1/connect/container/config?organizationId=711729a8-a473-47bf-b27f-8abc1ee52281&containerType=desktop',
    method: 'get'
  },
  code: 'ERR_BAD_REQUEST',
  status: 401
}
[2023-07-11 13:41:59.959] [info]  In the catch  {
  message: 'Request failed with status code 401',
  name: 'AxiosError',
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: '[function] function httpAdapter(config) {\n' +
      '  return new Promise(function dispatchHttpRequest(resolvePromise, rejectPromise) {\n' +
      '    var onCanceled;\n' +
      '    function done() {\n' +
      '      if (config.cancelToken) {\n' +
      '        config.cancelToken.unsubscribe(onCanceled);\n' +
      '      }\n' +
      '      if (config.signal) {\n' +
      "        config.signal.removeEventListener('abort', onCanceled);\n" +
      '      }\n' +
      '    }\n' +
      '    var resolve = function resolve(value) {\n' +
      '      done();\n' +
      '      resolvePromise(value);\n' +
      '    };\n' +
      '    var rejected = false;\n' +
      '    var reject = function reject(value) {\n' +
      '      done();\n' +
      '      rejected = true;\n' +
      '      rejectPromise(value);\n' +
      '    };\n' +
      '    var data = config.data;\n' +
      '    var headers = config.headers;\n' +
      '    var headerNames = {};\n' +
      '    Object.keys(headers).forEach(function storeLowerName(name) {\n' +
      '      headerNames[name.toLowerCase()] = name;\n' +
      '    });\n' +
      '\n' +
      '    // Set User-Agent (required by some servers)\n' +
      '    // See https://github.com/axios/axios/issues/69\n' +
      "    if ('user-agent' in headerNames) {\n" +
      '      // User-Agent is specified; handle case where no UA header is desired\n' +
      "      if (!headers[headerNames['user-agent']]) {\n" +
      "        delete headers[headerNames['user-agent']];\n" +
      '      }\n' +
      '      // Otherwise, use specified value\n' +
      '    } else {\n' +
      "      // Only set header if it hasn't been set in config\n" +
      "      headers['User-Agent'] = 'axios/' + VERSION;\n" +
      '    }\n' +
      '\n' +
      '    // support for https://www.npmjs.com/package/form-data api\n' +
      '    if (utils.isFormData(data) && utils.isFunction(data.getHeaders)) {\n' +
      '      Object.assign(headers, data.getHeaders());\n' +
      '    } else if (data && !utils.isStream(data)) {\n' +
      '      if (Buffer.isBuffer(data)) {\n' +
      '        // Nothing to do...\n' +
      '      } else if (utils.isArrayBuffer(data)) {\n' +
      '        data = Buffer.from(new Uint8Array(data));\n' +
      '      } else if (utils.isString(data)) {\n' +
      "        data = Buffer.from(data, 'utf-8');\n" +
      '      } else {\n' +
      "        return reject(new AxiosError('Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream', AxiosError.ERR_BAD_REQUEST, config));\n" +
      '      }\n' +
      '      if (config.maxBodyLength > -1 && data.length > config.maxBodyLength) {\n' +
      "        return reject(new AxiosError('Request body larger than maxBodyLength limit', AxiosError.ERR_BAD_REQUEST, config));\n" +
      '      }\n' +
      '\n' +
      '      // Add Content-Length header if data exists\n' +
      "      if (!headerNames['content-length']) {\n" +
      "        headers['Content-Length'] = data.length;\n" +
      '      }\n' +
      '    }\n' +
      '\n' +
      '    // HTTP basic authentication\n' +
      '    var auth = undefined;\n' +
      '    if (config.auth) {\n' +
      "      var username = config.auth.username || '';\n" +
      "      var password = config.auth.password || '';\n" +
      "      auth = username + ':' + password;\n" +
      '    }\n' +
      '\n' +
      '    // Parse url\n' +
      '    var fullPath = buildFullPath(config.baseURL, config.url);\n' +
      '    var parsed = url.parse(fullPath);\n' +
      '    var protocol = parsed.protocol || supportedProtocols[0];\n' +
      '    if (supportedProtocols.indexOf(protocol) === -1) {\n' +
      "      return reject(new AxiosError('Unsupported protocol ' + protocol, AxiosError.ERR_BAD_REQUEST, config));\n" +
      '    }\n' +
      '    if (!auth && parsed.auth) {\n' +
      "      var urlAuth = parsed.auth.split(':');\n" +
      "      var urlUsername = urlAuth[0] || '';\n" +
      "      var urlPassword = urlAuth[1] || '';\n" +
      "      auth = urlUsername + ':' + urlPassword;\n" +
      '    }\n' +
      '    if (auth && headerNames.authorization) {\n' +
      '      delete headers[headerNames.authorization];\n' +
      '    }\n' +
      '    var isHttpsRequest = isHttps.test(protocol);\n' +
      '    var agent = isHttpsRequest ? config.httpsAgent : config.httpAgent;\n' +
      '    try {\n' +
      "      buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\\?/, '');\n" +
      '    } catch (err) {\n' +
      '      var customErr = new Error(err.message);\n' +
      '      customErr.config = config;\n' +
      '      customErr.url = config.url;\n' +
      '      customErr.exists = true;\n' +
      '      reject(customErr);\n' +
      '    }\n' +
      '    var options = {\n' +
      "      path: buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\\?/, ''),\n" +
      '      method: config.method.toUpperCase(),\n' +
      '      headers: headers,\n' +
      '      agent: agent,\n' +
      '      agents: {\n' +
      '        http: config.httpAgent,\n' +
      '        https: config.httpsAgent\n' +
      '      },\n' +
      '      auth: auth\n' +
      '    };\n' +
      '    if (config.socketPath) {\n' +
      '      options.socketPath = config.socketPath;\n' +
      '    } else {\n' +
      '      options.hostname = parsed.hostname;\n' +
      '      options.port = parsed.port;\n' +
      '    }\n' +
      '    var proxy = config.proxy;\n' +
      '    if (!proxy && proxy !== false) {\n' +
      "      var proxyEnv = protocol.slice(0, -1) + '_proxy';\n" +
      '      var proxyUrl = process.env[proxyEnv] || process.env[proxyEnv.toUpperCase()];\n' +
      '      if (proxyUrl) {\n' +
      '        var parsedProxyUrl = url.parse(proxyUrl);\n' +
      '        var noProxyEnv = process.env.no_proxy || process.env.NO_PROXY;\n' +
      '        var shouldProxy = true;\n' +
      '        if (noProxyEnv) {\n' +
      "          var noProxy = noProxyEnv.split(',').map(function trim(s) {\n" +
      '            return s.trim();\n' +
      '          });\n' +
      '          shouldProxy = !noProxy.some(function proxyMatch(proxyElement) {\n' +
      '            if (!proxyElement) {\n' +
      '              return false;\n' +
      '            }\n' +
      "            if (proxyElement === '*') {\n" +
      '              return true;\n' +
      '            }\n' +
      "            if (proxyElement[0] === '.' && parsed.hostname.substr(parsed.hostname.length - proxyElement.length) === proxyElement) {\n" +
      '              return true;\n' +
      '            }\n' +
      '            return parsed.hostname === proxyElement;\n' +
      '          });\n' +
      '        }\n' +
      '        if (shouldProxy) {\n' +
      '          proxy = {\n' +
      '            host: parsedProxyUrl.hostname,\n' +
      '            port: parsedProxyUrl.port,\n' +
      '            protocol: parsedProxyUrl.protocol\n' +
      '          };\n' +
      '          if (parsedProxyUrl.auth) {\n' +
      "            var proxyUrlAuth = parsedProxyUrl.auth.split(':');\n" +
      '            proxy.auth = {\n' +
      '              username: proxyUrlAuth[0],\n' +
      '              password: proxyUrlAuth[1]\n' +
      '            };\n' +
      '          }\n' +
      '        }\n' +
      '      }\n' +
      '    }\n' +
      '    if (proxy) {\n' +
      "      options.headers.host = parsed.hostname + (parsed.port ? ':' + parsed.port : '');\n" +
      "      setProxy(options, proxy, protocol + '//' + parsed.hostname + (parsed.port ? ':' + parsed.port : '') + options.path);\n" +
      '    }\n' +
      '    var transport;\n' +
      '    var isHttpsProxy = isHttpsRequest && (proxy ? isHttps.test(proxy.protocol) : true);\n' +
      '    if (config.transport) {\n' +
      '      transport = config.transport;\n' +
      '    } else if (config.maxRedirects === 0) {\n' +
      '      transport = isHttpsProxy ? https : http;\n' +
      '    } else {\n' +
      '      if (config.maxRedirects) {\n' +
      '        options.maxRedirects = config.maxRedirects;\n' +
      '      }\n' +
      '      if (config.beforeRedirect) {\n' +
      '        options.beforeRedirect = config.beforeRedirect;\n' +
      '      }\n' +
      '      transport = isHttpsProxy ? httpsFollow : httpFollow;\n' +
      '    }\n' +
      '    if (config.maxBodyLength > -1) {\n' +
      '      options.maxBodyLength = config.maxBodyLength;\n' +
      '    }\n' +
      '    if (config.insecureHTTPParser) {\n' +
      '      options.insecureHTTPParser = config.insecureHTTPParser;\n' +
      '    }\n' +
      '\n' +
      '    // Create the request\n' +
      '    var req = transport.request(options, function handleResponse(res) {\n' +
      '      if (req.aborted) return;\n' +
      '\n' +
      '      // uncompress the response body transparently if required\n' +
      '      var stream = res;\n' +
      '\n' +
      '      // return the last request in case of redirects\n' +
      '      var lastRequest = res.req || req;\n' +
      '\n' +
      '      // if no content, is HEAD request or decompress disabled we should not decompress\n' +
      "      if (res.statusCode !== 204 && lastRequest.method !== 'HEAD' && config.decompress !== false) {\n" +
      "        switch (res.headers['content-encoding']) {\n" +
      '          /*eslint default-case:0*/\n' +
      "          case 'gzip':\n" +
      "          case 'compress':\n" +
      "          case 'deflate':\n" +
      '            // add the unzipper to the body stream processing pipeline\n' +
      '            stream = stream.pipe(zlib.createUnzip());\n' +
      '\n' +
      '            // remove the content-encoding in order to not confuse downstream operations\n' +
      "            delete res.headers['content-encoding'];\n" +
      '            break;\n' +
      '        }\n' +
      '      }\n' +
      '      var response = {\n' +
      '        status: res.statusCode,\n' +
      '        statusText: res.statusMessage,\n' +
      '        headers: res.headers,\n' +
      '        config: config,\n' +
      '        request: lastRequest\n' +
      '      };\n' +
      "      if (config.responseType === 'stream') {\n" +
      '        response.data = stream;\n' +
      '        settle(resolve, reject, response);\n' +
      '      } else {\n' +
      '        var responseBuffer = [];\n' +
      '        var totalResponseBytes = 0;\n' +
      "        stream.on('data', function handleStreamData(chunk) {\n" +
      '          responseBuffer.push(chunk);\n' +
      '          totalResponseBytes += chunk.length;\n' +
      '\n' +
      '          // make sure the content length is not over the maxContentLength if specified\n' +
      '          if (config.maxContentLength > -1 && totalResponseBytes > config.maxContentLength) {\n' +
      '            // stream.destoy() emit aborted event before calling reject() on Node.js v16\n' +
      '            rejected = true;\n' +
      '            stream.destroy();\n' +
      "            reject(new AxiosError('maxContentLength size of ' + config.maxContentLength + ' exceeded', AxiosError.ERR_BAD_RESPONSE, config, lastRequest));\n" +
      '          }\n' +
      '        });\n' +
      "        stream.on('aborted', function handlerStreamAborted() {\n" +
      '          if (rejected) {\n' +
      '            return;\n' +
      '          }\n' +
      '          stream.destroy();\n' +
      "          reject(new AxiosError('maxContentLength size of ' + config.maxContentLength + ' exceeded', AxiosError.ERR_BAD_RESPONSE, config, lastRequest));\n" +
      '        });\n' +
      "        stream.on('error', function handleStreamError(err) {\n" +
      '          if (req.aborted) return;\n' +
      '          reject(AxiosError.from(err, null, config, lastRequest));\n' +
      '        });\n' +
      "        stream.on('end', function handleStreamEnd() {\n" +
      '          try {\n' +
      '            var responseData = responseBuffer.length === 1 ? responseBuffer[0] : Buffer.concat(responseBuffer);\n' +
      "            if (config.responseType !== 'arraybuffer') {\n" +
      '              responseData = responseData.toString(config.responseEncoding);\n' +
      "              if (!config.responseEncoding || config.responseEncoding === 'utf8') {\n" +
      '                responseData = utils.stripBOM(responseData);\n' +
      '              }\n' +
      '            }\n' +
      '            response.data = responseData;\n' +
      '          } catch (err) {\n' +
      '            reject(AxiosError.from(err, null, config, response.request, response));\n' +
      '          }\n' +
      '          settle(resolve, reject, response);\n' +
      '        });\n' +
      '      }\n' +
      '    });\n' +
      '\n' +
      '    // Handle errors\n' +
      "    req.on('error', function handleRequestError(err) {\n" +
      '      // @todo remove\n' +
      '      // if (req.aborted && err.code !== AxiosError.ERR_FR_TOO_MANY_REDIRECTS) return;\n' +
      '      reject(AxiosError.from(err, null, config, req));\n' +
      '    });\n' +
      '\n' +
      ' '... 2346 more characters,
    transformRequest: [
      '[function] function transformRequest(data, headers) {\n' +
        "    normalizeHeaderName(headers, 'Accept');\n" +
        "    normalizeHeaderName(headers, 'Content-Type');\n" +
        '    if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {\n' +
        '      return data;\n' +
        '    }\n' +
        '    if (utils.isArrayBufferView(data)) {\n' +
        '      return data.buffer;\n' +
        '    }\n' +
        '    if (utils.isURLSearchParams(data)) {\n' +
        "      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');\n" +
        '      return data.toString();\n' +
        '    }\n' +
        '    var isObjectPayload = utils.isObject(data);\n' +
        "    var contentType = headers && headers['Content-Type'];\n" +
        '    var isFileList;\n' +
        "    if ((isFileList = utils.isFileList(data)) || isObjectPayload && contentType === 'multipart/form-data') {\n" +
        '      var _FormData = this.env && this.env.FormData;\n' +
        '      return toFormData(isFileList ? {\n' +
        "        'files[]': data\n" +
        '      } : data, _FormData && new _FormData());\n' +
        "    } else if (isObjectPayload || contentType === 'application/json') {\n" +
        "      setContentTypeIfUnset(headers, 'application/json');\n" +
        '      return stringifySafely(data);\n' +
        '    }\n' +
        '    return data;\n' +
        '  }'
    ],
    transformResponse: [
      '[function] function transformResponse(data) {\n' +
        '    var transitional = this.transitional || defaults.transitional;\n' +
        '    var silentJSONParsing = transitional && transitional.silentJSONParsing;\n' +
        '    var forcedJSONParsing = transitional && transitional.forcedJSONParsing;\n' +
        "    var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';\n" +
        '    if (strictJSONParsing || forcedJSONParsing && utils.isString(data) && data.length) {\n' +
        '      try {\n' +
        '        return JSON.parse(data);\n' +
        '      } catch (e) {\n' +
        '        if (strictJSONParsing) {\n' +
        "          if (e.name === 'SyntaxError') {\n" +
        '            throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);\n' +
        '          }\n' +
        '          throw e;\n' +
        '        }\n' +
        '      }\n' +
        '    }\n' +
        '    return data;\n' +
        '  }'
    ],
    timeout: 0,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
      FormData: '[function] function FormData(options) {\n' +
        '  if (!(this instanceof FormData)) {\n' +
        '    return new FormData(options);\n' +
        '  }\n' +
        '  this._overheadLength = 0;\n' +
        '  this._valueLength = 0;\n' +
        '  this._valuesToMeasure = [];\n' +
        '  CombinedStream.call(this);\n' +
        '  options = options || {};\n' +
        '  for (var option in options) {\n' +
        '    this[option] = options[option];\n' +
        '  }\n' +
        '}'
    },
    validateStatus: '[function] function validateStatus(status) {\n' +
      '    return status >= 200 && status < 300;\n' +
      '  }',
    headers: {
      Accept: 'application/json, text/plain, */*',
      Authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2MzA5OCwiZXhwIjoxNjg5MTQ5NDk4fQ.wN33MBqpmnNS9giiuiIYxMYrLnkR5CbYWqTbj_n51N4',
      'Content-Type': '',
      'User-Agent': 'axios/0.27.2'
    },
    url: 'https://connect-api.dev.insiteflow.io/v1/connect/container/config?organizationId=711729a8-a473-47bf-b27f-8abc1ee52281&containerType=desktop',
    method: 'get'
  },
  code: 'ERR_BAD_REQUEST',
  status: 401
}
[2023-07-11 13:42:04.775] [info]  In the catch  {
  message: 'Request failed with status code 401',
  name: 'AxiosError',
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: '[function] function httpAdapter(config) {\n' +
      '  return new Promise(function dispatchHttpRequest(resolvePromise, rejectPromise) {\n' +
      '    var onCanceled;\n' +
      '    function done() {\n' +
      '      if (config.cancelToken) {\n' +
      '        config.cancelToken.unsubscribe(onCanceled);\n' +
      '      }\n' +
      '      if (config.signal) {\n' +
      "        config.signal.removeEventListener('abort', onCanceled);\n" +
      '      }\n' +
      '    }\n' +
      '    var resolve = function resolve(value) {\n' +
      '      done();\n' +
      '      resolvePromise(value);\n' +
      '    };\n' +
      '    var rejected = false;\n' +
      '    var reject = function reject(value) {\n' +
      '      done();\n' +
      '      rejected = true;\n' +
      '      rejectPromise(value);\n' +
      '    };\n' +
      '    var data = config.data;\n' +
      '    var headers = config.headers;\n' +
      '    var headerNames = {};\n' +
      '    Object.keys(headers).forEach(function storeLowerName(name) {\n' +
      '      headerNames[name.toLowerCase()] = name;\n' +
      '    });\n' +
      '\n' +
      '    // Set User-Agent (required by some servers)\n' +
      '    // See https://github.com/axios/axios/issues/69\n' +
      "    if ('user-agent' in headerNames) {\n" +
      '      // User-Agent is specified; handle case where no UA header is desired\n' +
      "      if (!headers[headerNames['user-agent']]) {\n" +
      "        delete headers[headerNames['user-agent']];\n" +
      '      }\n' +
      '      // Otherwise, use specified value\n' +
      '    } else {\n' +
      "      // Only set header if it hasn't been set in config\n" +
      "      headers['User-Agent'] = 'axios/' + VERSION;\n" +
      '    }\n' +
      '\n' +
      '    // support for https://www.npmjs.com/package/form-data api\n' +
      '    if (utils.isFormData(data) && utils.isFunction(data.getHeaders)) {\n' +
      '      Object.assign(headers, data.getHeaders());\n' +
      '    } else if (data && !utils.isStream(data)) {\n' +
      '      if (Buffer.isBuffer(data)) {\n' +
      '        // Nothing to do...\n' +
      '      } else if (utils.isArrayBuffer(data)) {\n' +
      '        data = Buffer.from(new Uint8Array(data));\n' +
      '      } else if (utils.isString(data)) {\n' +
      "        data = Buffer.from(data, 'utf-8');\n" +
      '      } else {\n' +
      "        return reject(new AxiosError('Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream', AxiosError.ERR_BAD_REQUEST, config));\n" +
      '      }\n' +
      '      if (config.maxBodyLength > -1 && data.length > config.maxBodyLength) {\n' +
      "        return reject(new AxiosError('Request body larger than maxBodyLength limit', AxiosError.ERR_BAD_REQUEST, config));\n" +
      '      }\n' +
      '\n' +
      '      // Add Content-Length header if data exists\n' +
      "      if (!headerNames['content-length']) {\n" +
      "        headers['Content-Length'] = data.length;\n" +
      '      }\n' +
      '    }\n' +
      '\n' +
      '    // HTTP basic authentication\n' +
      '    var auth = undefined;\n' +
      '    if (config.auth) {\n' +
      "      var username = config.auth.username || '';\n" +
      "      var password = config.auth.password || '';\n" +
      "      auth = username + ':' + password;\n" +
      '    }\n' +
      '\n' +
      '    // Parse url\n' +
      '    var fullPath = buildFullPath(config.baseURL, config.url);\n' +
      '    var parsed = url.parse(fullPath);\n' +
      '    var protocol = parsed.protocol || supportedProtocols[0];\n' +
      '    if (supportedProtocols.indexOf(protocol) === -1) {\n' +
      "      return reject(new AxiosError('Unsupported protocol ' + protocol, AxiosError.ERR_BAD_REQUEST, config));\n" +
      '    }\n' +
      '    if (!auth && parsed.auth) {\n' +
      "      var urlAuth = parsed.auth.split(':');\n" +
      "      var urlUsername = urlAuth[0] || '';\n" +
      "      var urlPassword = urlAuth[1] || '';\n" +
      "      auth = urlUsername + ':' + urlPassword;\n" +
      '    }\n' +
      '    if (auth && headerNames.authorization) {\n' +
      '      delete headers[headerNames.authorization];\n' +
      '    }\n' +
      '    var isHttpsRequest = isHttps.test(protocol);\n' +
      '    var agent = isHttpsRequest ? config.httpsAgent : config.httpAgent;\n' +
      '    try {\n' +
      "      buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\\?/, '');\n" +
      '    } catch (err) {\n' +
      '      var customErr = new Error(err.message);\n' +
      '      customErr.config = config;\n' +
      '      customErr.url = config.url;\n' +
      '      customErr.exists = true;\n' +
      '      reject(customErr);\n' +
      '    }\n' +
      '    var options = {\n' +
      "      path: buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\\?/, ''),\n" +
      '      method: config.method.toUpperCase(),\n' +
      '      headers: headers,\n' +
      '      agent: agent,\n' +
      '      agents: {\n' +
      '        http: config.httpAgent,\n' +
      '        https: config.httpsAgent\n' +
      '      },\n' +
      '      auth: auth\n' +
      '    };\n' +
      '    if (config.socketPath) {\n' +
      '      options.socketPath = config.socketPath;\n' +
      '    } else {\n' +
      '      options.hostname = parsed.hostname;\n' +
      '      options.port = parsed.port;\n' +
      '    }\n' +
      '    var proxy = config.proxy;\n' +
      '    if (!proxy && proxy !== false) {\n' +
      "      var proxyEnv = protocol.slice(0, -1) + '_proxy';\n" +
      '      var proxyUrl = process.env[proxyEnv] || process.env[proxyEnv.toUpperCase()];\n' +
      '      if (proxyUrl) {\n' +
      '        var parsedProxyUrl = url.parse(proxyUrl);\n' +
      '        var noProxyEnv = process.env.no_proxy || process.env.NO_PROXY;\n' +
      '        var shouldProxy = true;\n' +
      '        if (noProxyEnv) {\n' +
      "          var noProxy = noProxyEnv.split(',').map(function trim(s) {\n" +
      '            return s.trim();\n' +
      '          });\n' +
      '          shouldProxy = !noProxy.some(function proxyMatch(proxyElement) {\n' +
      '            if (!proxyElement) {\n' +
      '              return false;\n' +
      '            }\n' +
      "            if (proxyElement === '*') {\n" +
      '              return true;\n' +
      '            }\n' +
      "            if (proxyElement[0] === '.' && parsed.hostname.substr(parsed.hostname.length - proxyElement.length) === proxyElement) {\n" +
      '              return true;\n' +
      '            }\n' +
      '            return parsed.hostname === proxyElement;\n' +
      '          });\n' +
      '        }\n' +
      '        if (shouldProxy) {\n' +
      '          proxy = {\n' +
      '            host: parsedProxyUrl.hostname,\n' +
      '            port: parsedProxyUrl.port,\n' +
      '            protocol: parsedProxyUrl.protocol\n' +
      '          };\n' +
      '          if (parsedProxyUrl.auth) {\n' +
      "            var proxyUrlAuth = parsedProxyUrl.auth.split(':');\n" +
      '            proxy.auth = {\n' +
      '              username: proxyUrlAuth[0],\n' +
      '              password: proxyUrlAuth[1]\n' +
      '            };\n' +
      '          }\n' +
      '        }\n' +
      '      }\n' +
      '    }\n' +
      '    if (proxy) {\n' +
      "      options.headers.host = parsed.hostname + (parsed.port ? ':' + parsed.port : '');\n" +
      "      setProxy(options, proxy, protocol + '//' + parsed.hostname + (parsed.port ? ':' + parsed.port : '') + options.path);\n" +
      '    }\n' +
      '    var transport;\n' +
      '    var isHttpsProxy = isHttpsRequest && (proxy ? isHttps.test(proxy.protocol) : true);\n' +
      '    if (config.transport) {\n' +
      '      transport = config.transport;\n' +
      '    } else if (config.maxRedirects === 0) {\n' +
      '      transport = isHttpsProxy ? https : http;\n' +
      '    } else {\n' +
      '      if (config.maxRedirects) {\n' +
      '        options.maxRedirects = config.maxRedirects;\n' +
      '      }\n' +
      '      if (config.beforeRedirect) {\n' +
      '        options.beforeRedirect = config.beforeRedirect;\n' +
      '      }\n' +
      '      transport = isHttpsProxy ? httpsFollow : httpFollow;\n' +
      '    }\n' +
      '    if (config.maxBodyLength > -1) {\n' +
      '      options.maxBodyLength = config.maxBodyLength;\n' +
      '    }\n' +
      '    if (config.insecureHTTPParser) {\n' +
      '      options.insecureHTTPParser = config.insecureHTTPParser;\n' +
      '    }\n' +
      '\n' +
      '    // Create the request\n' +
      '    var req = transport.request(options, function handleResponse(res) {\n' +
      '      if (req.aborted) return;\n' +
      '\n' +
      '      // uncompress the response body transparently if required\n' +
      '      var stream = res;\n' +
      '\n' +
      '      // return the last request in case of redirects\n' +
      '      var lastRequest = res.req || req;\n' +
      '\n' +
      '      // if no content, is HEAD request or decompress disabled we should not decompress\n' +
      "      if (res.statusCode !== 204 && lastRequest.method !== 'HEAD' && config.decompress !== false) {\n" +
      "        switch (res.headers['content-encoding']) {\n" +
      '          /*eslint default-case:0*/\n' +
      "          case 'gzip':\n" +
      "          case 'compress':\n" +
      "          case 'deflate':\n" +
      '            // add the unzipper to the body stream processing pipeline\n' +
      '            stream = stream.pipe(zlib.createUnzip());\n' +
      '\n' +
      '            // remove the content-encoding in order to not confuse downstream operations\n' +
      "            delete res.headers['content-encoding'];\n" +
      '            break;\n' +
      '        }\n' +
      '      }\n' +
      '      var response = {\n' +
      '        status: res.statusCode,\n' +
      '        statusText: res.statusMessage,\n' +
      '        headers: res.headers,\n' +
      '        config: config,\n' +
      '        request: lastRequest\n' +
      '      };\n' +
      "      if (config.responseType === 'stream') {\n" +
      '        response.data = stream;\n' +
      '        settle(resolve, reject, response);\n' +
      '      } else {\n' +
      '        var responseBuffer = [];\n' +
      '        var totalResponseBytes = 0;\n' +
      "        stream.on('data', function handleStreamData(chunk) {\n" +
      '          responseBuffer.push(chunk);\n' +
      '          totalResponseBytes += chunk.length;\n' +
      '\n' +
      '          // make sure the content length is not over the maxContentLength if specified\n' +
      '          if (config.maxContentLength > -1 && totalResponseBytes > config.maxContentLength) {\n' +
      '            // stream.destoy() emit aborted event before calling reject() on Node.js v16\n' +
      '            rejected = true;\n' +
      '            stream.destroy();\n' +
      "            reject(new AxiosError('maxContentLength size of ' + config.maxContentLength + ' exceeded', AxiosError.ERR_BAD_RESPONSE, config, lastRequest));\n" +
      '          }\n' +
      '        });\n' +
      "        stream.on('aborted', function handlerStreamAborted() {\n" +
      '          if (rejected) {\n' +
      '            return;\n' +
      '          }\n' +
      '          stream.destroy();\n' +
      "          reject(new AxiosError('maxContentLength size of ' + config.maxContentLength + ' exceeded', AxiosError.ERR_BAD_RESPONSE, config, lastRequest));\n" +
      '        });\n' +
      "        stream.on('error', function handleStreamError(err) {\n" +
      '          if (req.aborted) return;\n' +
      '          reject(AxiosError.from(err, null, config, lastRequest));\n' +
      '        });\n' +
      "        stream.on('end', function handleStreamEnd() {\n" +
      '          try {\n' +
      '            var responseData = responseBuffer.length === 1 ? responseBuffer[0] : Buffer.concat(responseBuffer);\n' +
      "            if (config.responseType !== 'arraybuffer') {\n" +
      '              responseData = responseData.toString(config.responseEncoding);\n' +
      "              if (!config.responseEncoding || config.responseEncoding === 'utf8') {\n" +
      '                responseData = utils.stripBOM(responseData);\n' +
      '              }\n' +
      '            }\n' +
      '            response.data = responseData;\n' +
      '          } catch (err) {\n' +
      '            reject(AxiosError.from(err, null, config, response.request, response));\n' +
      '          }\n' +
      '          settle(resolve, reject, response);\n' +
      '        });\n' +
      '      }\n' +
      '    });\n' +
      '\n' +
      '    // Handle errors\n' +
      "    req.on('error', function handleRequestError(err) {\n" +
      '      // @todo remove\n' +
      '      // if (req.aborted && err.code !== AxiosError.ERR_FR_TOO_MANY_REDIRECTS) return;\n' +
      '      reject(AxiosError.from(err, null, config, req));\n' +
      '    });\n' +
      '\n' +
      ' '... 2346 more characters,
    transformRequest: [
      '[function] function transformRequest(data, headers) {\n' +
        "    normalizeHeaderName(headers, 'Accept');\n" +
        "    normalizeHeaderName(headers, 'Content-Type');\n" +
        '    if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {\n' +
        '      return data;\n' +
        '    }\n' +
        '    if (utils.isArrayBufferView(data)) {\n' +
        '      return data.buffer;\n' +
        '    }\n' +
        '    if (utils.isURLSearchParams(data)) {\n' +
        "      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');\n" +
        '      return data.toString();\n' +
        '    }\n' +
        '    var isObjectPayload = utils.isObject(data);\n' +
        "    var contentType = headers && headers['Content-Type'];\n" +
        '    var isFileList;\n' +
        "    if ((isFileList = utils.isFileList(data)) || isObjectPayload && contentType === 'multipart/form-data') {\n" +
        '      var _FormData = this.env && this.env.FormData;\n' +
        '      return toFormData(isFileList ? {\n' +
        "        'files[]': data\n" +
        '      } : data, _FormData && new _FormData());\n' +
        "    } else if (isObjectPayload || contentType === 'application/json') {\n" +
        "      setContentTypeIfUnset(headers, 'application/json');\n" +
        '      return stringifySafely(data);\n' +
        '    }\n' +
        '    return data;\n' +
        '  }'
    ],
    transformResponse: [
      '[function] function transformResponse(data) {\n' +
        '    var transitional = this.transitional || defaults.transitional;\n' +
        '    var silentJSONParsing = transitional && transitional.silentJSONParsing;\n' +
        '    var forcedJSONParsing = transitional && transitional.forcedJSONParsing;\n' +
        "    var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';\n" +
        '    if (strictJSONParsing || forcedJSONParsing && utils.isString(data) && data.length) {\n' +
        '      try {\n' +
        '        return JSON.parse(data);\n' +
        '      } catch (e) {\n' +
        '        if (strictJSONParsing) {\n' +
        "          if (e.name === 'SyntaxError') {\n" +
        '            throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);\n' +
        '          }\n' +
        '          throw e;\n' +
        '        }\n' +
        '      }\n' +
        '    }\n' +
        '    return data;\n' +
        '  }'
    ],
    timeout: 0,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
      FormData: '[function] function FormData(options) {\n' +
        '  if (!(this instanceof FormData)) {\n' +
        '    return new FormData(options);\n' +
        '  }\n' +
        '  this._overheadLength = 0;\n' +
        '  this._valueLength = 0;\n' +
        '  this._valuesToMeasure = [];\n' +
        '  CombinedStream.call(this);\n' +
        '  options = options || {};\n' +
        '  for (var option in options) {\n' +
        '    this[option] = options[option];\n' +
        '  }\n' +
        '}'
    },
    validateStatus: '[function] function validateStatus(status) {\n' +
      '    return status >= 200 && status < 300;\n' +
      '  }',
    headers: {
      Accept: 'application/json, text/plain, */*',
      Authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2MzA5OCwiZXhwIjoxNjg5MTQ5NDk4fQ.wN33MBqpmnNS9giiuiIYxMYrLnkR5CbYWqTbj_n51N4',
      'Content-Type': '',
      'User-Agent': 'axios/0.27.2'
    },
    url: 'https://connect-api.dev.insiteflow.io/v1/connect/container/config?organizationId=711729a8-a473-47bf-b27f-8abc1ee52281&containerType=desktop',
    method: 'get'
  },
  code: 'ERR_BAD_REQUEST',
  status: 401
}
[2023-07-11 13:42:39.083] [info]  Started /home/lnv-75/Documents/insiteFlow/desktop-app-container/test/out AES-128
[2023-07-11 13:42:40.301] [info]  In the catch  undefined
[2023-07-11 13:42:44.913] [info]  In the catch  undefined
[2023-07-11 13:42:49.931] [info]  In the catch  undefined
[2023-07-11 13:42:55.052] [info]  In the catch  undefined
[2023-07-11 13:42:59.865] [info]  In the catch  undefined
[2023-07-11 13:43:04.983] [info]  In the catch  undefined
[2023-07-11 13:43:09.825] [info]  In the catch  undefined
[2023-07-11 13:43:15.025] [info]  In the catch  undefined
[2023-07-11 13:43:20.042] [info]  In the catch  undefined
[2023-07-11 13:43:24.849] [info]  In the catch  undefined
[2023-07-11 13:43:30.074] [info]  In the catch  undefined
[2023-07-11 13:43:34.983] [info]  In the catch  undefined
[2023-07-11 13:43:40.162] [info]  In the catch  undefined
[2023-07-11 13:43:45.222] [info]  In the catch  undefined
[2023-07-11 13:43:50.042] [info]  In the catch  undefined
[2023-07-11 13:43:54.984] [info]  In the catch  undefined
[2023-07-11 13:44:00.075] [info]  In the catch  undefined
[2023-07-11 13:44:04.988] [info]  In the catch  undefined
[2023-07-11 13:44:10.008] [info]  In the catch  undefined
[2023-07-11 13:44:15.028] [info]  In the catch  undefined
[2023-07-11 13:44:20.041] [info]  In the catch  undefined
[2023-07-11 13:44:24.857] [info]  In the catch  undefined
[2023-07-11 13:44:29.976] [info]  In the catch  undefined
[2023-07-11 13:44:35.095] [info]  In the catch  undefined
[2023-07-11 13:44:40.255] [info]  In the catch  undefined
[2023-07-11 13:44:45.406] [info]  In the catch  undefined
[2023-07-11 13:44:49.864] [info]  In the catch  undefined
[2023-07-11 13:44:55.068] [info]  In the catch  undefined
[2023-07-11 13:45:00.001] [info]  In the catch  undefined
[2023-07-11 13:45:05.104] [info]  In the catch  undefined
[2023-07-11 13:45:10.128] [info]  In the catch  undefined
[2023-07-11 13:45:15.140] [info]  In the catch  undefined
[2023-07-11 13:45:19.946] [info]  In the catch  undefined
[2023-07-11 13:45:24.969] [info]  In the catch  undefined
[2023-07-11 13:45:29.980] [info]  In the catch  undefined
[2023-07-11 13:45:35.005] [info]  In the catch  undefined
[2023-07-11 13:45:39.958] [info]  In the catch  undefined
[2023-07-11 13:45:45.451] [info]  In the catch  undefined
[2023-07-11 13:45:50.303] [info]  In the catch  undefined
[2023-07-11 13:45:55.031] [info]  In the catch  undefined
[2023-07-11 13:46:00.065] [info]  In the catch  undefined
[2023-07-11 13:46:05.020] [info]  In the catch  undefined
[2023-07-11 13:46:10.131] [info]  In the catch  undefined
[2023-07-11 13:46:15.041] [info]  In the catch  undefined
[2023-07-11 13:46:20.161] [info]  In the catch  undefined
[2023-07-11 13:46:25.023] [info]  In the catch  undefined
[2023-07-11 13:46:30.139] [info]  In the catch  undefined
[2023-07-11 13:46:35.014] [info]  In the catch  undefined
[2023-07-11 13:46:40.129] [info]  In the catch  undefined
[2023-07-11 13:46:45.356] [info]  In the catch  undefined
[2023-07-11 13:46:50.270] [info]  In the catch  undefined
[2023-07-11 13:46:55.184] [info]  In the catch  undefined
[2023-07-11 13:47:00.103] [info]  In the catch  undefined
[2023-07-11 13:47:05.115] [info]  In the catch  undefined
[2023-07-11 13:47:10.131] [info]  In the catch  undefined
[2023-07-11 13:47:15.059] [info]  In the catch  undefined
[2023-07-11 13:47:20.172] [info]  In the catch  undefined
[2023-07-11 13:47:25.087] [info]  In the catch  undefined
[2023-07-11 13:47:30.207] [info]  In the catch  undefined
[2023-07-11 13:47:35.221] [info]  In the catch  undefined
[2023-07-11 13:47:40.246] [info]  In the catch  undefined
[2023-07-11 13:47:45.404] [info]  In the catch  undefined
[2023-07-11 13:47:50.385] [info]  In the catch  undefined
[2023-07-11 13:47:55.095] [info]  In the catch  undefined
[2023-07-11 13:48:00.309] [info]  In the catch  undefined
[2023-07-11 13:48:05.533] [info]  In the catch  undefined
[2023-07-11 13:48:10.244] [info]  In the catch  undefined
[2023-07-11 13:48:15.086] [info]  In the catch  undefined
[2023-07-11 13:48:19.980] [info]  In the catch  undefined
[2023-07-11 13:48:25.202] [info]  In the catch  undefined
[2023-07-11 13:48:30.313] [info]  In the catch  undefined
[2023-07-11 13:48:35.228] [info]  In the catch  undefined
[2023-07-11 13:48:40.046] [info]  In the catch  undefined
[2023-07-11 13:48:45.163] [info]  In the catch  undefined
[2023-07-11 13:48:50.281] [info]  In the catch  undefined
[2023-07-11 13:48:55.201] [info]  In the catch  undefined
[2023-07-11 13:49:00.529] [info]  In the catch  undefined
[2023-07-11 13:49:05.436] [info]  In the catch  undefined
[2023-07-11 13:49:10.257] [info]  In the catch  undefined
[2023-07-11 13:49:15.141] [info]  In the catch  undefined
[2023-07-11 13:49:20.288] [info]  In the catch  undefined
[2023-07-11 13:49:25.308] [info]  In the catch  undefined
[2023-07-11 13:49:30.324] [info]  In the catch  undefined
[2023-07-11 13:49:35.236] [info]  In the catch  undefined
[2023-07-11 13:49:40.256] [info]  In the catch  undefined
[2023-07-11 13:49:45.205] [info]  In the catch  undefined
[2023-07-11 13:49:50.239] [info]  In the catch  undefined
[2023-07-11 13:49:55.040] [info]  In the catch  undefined
[2023-07-11 13:50:00.630] [info]  In the catch  undefined
[2023-07-11 13:50:05.347] [info]  In the catch  undefined
[2023-07-11 13:50:10.160] [info]  In the catch  undefined
[2023-07-11 13:50:15.208] [info]  In the catch  undefined
[2023-07-11 13:50:20.113] [info]  In the catch  undefined
[2023-07-11 13:50:25.163] [info]  In the catch  undefined
[2023-07-11 13:50:30.223] [info]  In the catch  undefined
[2023-07-11 13:50:35.151] [info]  In the catch  undefined
[2023-07-11 13:51:08.361] [info]  Started /home/lnv-75/Documents/insiteFlow/desktop-app-container/test/out AES-128
[2023-07-11 13:51:09.436] [error] Unhandled Exception UnhandledRejection ReferenceError: fetch is not defined
    at refetchAccessToken (/home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1480:3)
    at /home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1474:9
    at process.processTicksAndRejections (node:internal/process/task_queues:96:5)
    at async fetchConfigDetails (/home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1458:5)
[2023-07-11 13:51:14.252] [error] Unhandled Exception UnhandledRejection ReferenceError: fetch is not defined
    at refetchAccessToken (/home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1480:3)
    at /home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1474:9
    at process.processTicksAndRejections (node:internal/process/task_queues:96:5)
    at async fetchConfigDetails (/home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1458:5)
[2023-07-11 13:51:19.273] [error] Unhandled Exception UnhandledRejection ReferenceError: fetch is not defined
    at refetchAccessToken (/home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1480:3)
    at /home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1474:9
    at process.processTicksAndRejections (node:internal/process/task_queues:96:5)
    at async fetchConfigDetails (/home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1458:5)
[2023-07-11 13:51:24.288] [error] Unhandled Exception UnhandledRejection ReferenceError: fetch is not defined
    at refetchAccessToken (/home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1480:3)
    at /home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1474:9
    at process.processTicksAndRejections (node:internal/process/task_queues:96:5)
    at async fetchConfigDetails (/home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1458:5)
[2023-07-11 13:51:29.306] [error] Unhandled Exception UnhandledRejection ReferenceError: fetch is not defined
    at refetchAccessToken (/home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1480:3)
    at /home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1474:9
    at process.processTicksAndRejections (node:internal/process/task_queues:96:5)
    at async fetchConfigDetails (/home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1458:5)
[2023-07-11 13:51:34.216] [error] Unhandled Exception UnhandledRejection ReferenceError: fetch is not defined
    at refetchAccessToken (/home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1480:3)
    at /home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1474:9
    at process.processTicksAndRejections (node:internal/process/task_queues:96:5)
    at async fetchConfigDetails (/home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1458:5)
[2023-07-11 13:51:39.240] [error] Unhandled Exception UnhandledRejection ReferenceError: fetch is not defined
    at refetchAccessToken (/home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1480:3)
    at /home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1474:9
    at process.processTicksAndRejections (node:internal/process/task_queues:96:5)
    at async fetchConfigDetails (/home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1458:5)
[2023-07-11 13:51:44.250] [error] Unhandled Exception UnhandledRejection ReferenceError: fetch is not defined
    at refetchAccessToken (/home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1480:3)
    at /home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1474:9
    at process.processTicksAndRejections (node:internal/process/task_queues:96:5)
    at async fetchConfigDetails (/home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1458:5)
[2023-07-11 13:51:49.379] [error] Unhandled Exception UnhandledRejection ReferenceError: fetch is not defined
    at refetchAccessToken (/home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1480:3)
    at /home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1474:9
    at process.processTicksAndRejections (node:internal/process/task_queues:96:5)
    at async fetchConfigDetails (/home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1458:5)
[2023-07-11 13:51:54.189] [error] Unhandled Exception UnhandledRejection ReferenceError: fetch is not defined
    at refetchAccessToken (/home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1480:3)
    at /home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1474:9
    at process.processTicksAndRejections (node:internal/process/task_queues:96:5)
    at async fetchConfigDetails (/home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1458:5)
[2023-07-11 13:51:59.103] [error] Unhandled Exception UnhandledRejection ReferenceError: fetch is not defined
    at refetchAccessToken (/home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1480:3)
    at /home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1474:9
    at process.processTicksAndRejections (node:internal/process/task_queues:96:5)
    at async fetchConfigDetails (/home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1458:5)
[2023-07-11 13:52:04.323] [error] Unhandled Exception UnhandledRejection ReferenceError: fetch is not defined
    at refetchAccessToken (/home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1480:3)
    at /home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1474:9
    at process.processTicksAndRejections (node:internal/process/task_queues:96:5)
    at async fetchConfigDetails (/home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1458:5)
[2023-07-11 13:52:09.447] [error] Unhandled Exception UnhandledRejection ReferenceError: fetch is not defined
    at refetchAccessToken (/home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1480:3)
    at /home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1474:9
    at process.processTicksAndRejections (node:internal/process/task_queues:96:5)
    at async fetchConfigDetails (/home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1458:5)
[2023-07-11 13:52:14.667] [error] Unhandled Exception UnhandledRejection ReferenceError: fetch is not defined
    at refetchAccessToken (/home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1480:3)
    at /home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1474:9
    at process.processTicksAndRejections (node:internal/process/task_queues:96:5)
    at async fetchConfigDetails (/home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1458:5)
[2023-07-11 13:52:19.201] [error] Unhandled Exception UnhandledRejection ReferenceError: fetch is not defined
    at refetchAccessToken (/home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1480:3)
    at /home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1474:9
    at process.processTicksAndRejections (node:internal/process/task_queues:96:5)
    at async fetchConfigDetails (/home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1458:5)
[2023-07-11 13:52:24.292] [error] Unhandled Exception UnhandledRejection ReferenceError: fetch is not defined
    at refetchAccessToken (/home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1480:3)
    at /home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1474:9
    at process.processTicksAndRejections (node:internal/process/task_queues:96:5)
    at async fetchConfigDetails (/home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1458:5)
[2023-07-11 13:52:29.189] [error] Unhandled Exception UnhandledRejection ReferenceError: fetch is not defined
    at refetchAccessToken (/home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1480:3)
    at /home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1474:9
    at process.processTicksAndRejections (node:internal/process/task_queues:96:5)
    at async fetchConfigDetails (/home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1458:5)
[2023-07-11 13:52:34.133] [error] Unhandled Exception UnhandledRejection ReferenceError: fetch is not defined
    at refetchAccessToken (/home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1480:3)
    at /home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1474:9
    at process.processTicksAndRejections (node:internal/process/task_queues:96:5)
    at async fetchConfigDetails (/home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1458:5)
[2023-07-11 13:52:39.238] [error] Unhandled Exception UnhandledRejection ReferenceError: fetch is not defined
    at refetchAccessToken (/home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1480:3)
    at /home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1474:9
    at process.processTicksAndRejections (node:internal/process/task_queues:96:5)
    at async fetchConfigDetails (/home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1458:5)
[2023-07-11 13:52:44.359] [error] Unhandled Exception UnhandledRejection ReferenceError: fetch is not defined
    at refetchAccessToken (/home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1480:3)
    at /home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1474:9
    at process.processTicksAndRejections (node:internal/process/task_queues:96:5)
    at async fetchConfigDetails (/home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1458:5)
[2023-07-11 13:52:49.371] [error] Unhandled Exception UnhandledRejection ReferenceError: fetch is not defined
    at refetchAccessToken (/home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1480:3)
    at /home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1474:9
    at process.processTicksAndRejections (node:internal/process/task_queues:96:5)
    at async fetchConfigDetails (/home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1458:5)
[2023-07-11 13:52:54.292] [error] Unhandled Exception UnhandledRejection ReferenceError: fetch is not defined
    at refetchAccessToken (/home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1480:3)
    at /home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1474:9
    at process.processTicksAndRejections (node:internal/process/task_queues:96:5)
    at async fetchConfigDetails (/home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1458:5)
[2023-07-11 13:52:59.203] [error] Unhandled Exception UnhandledRejection ReferenceError: fetch is not defined
    at refetchAccessToken (/home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1480:3)
    at /home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1474:9
    at process.processTicksAndRejections (node:internal/process/task_queues:96:5)
    at async fetchConfigDetails (/home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1458:5)
[2023-07-11 13:53:04.527] [error] Unhandled Exception UnhandledRejection ReferenceError: fetch is not defined
    at refetchAccessToken (/home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1480:3)
    at /home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1474:9
    at process.processTicksAndRejections (node:internal/process/task_queues:96:5)
    at async fetchConfigDetails (/home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1458:5)
[2023-07-11 13:53:09.542] [error] Unhandled Exception UnhandledRejection ReferenceError: fetch is not defined
    at refetchAccessToken (/home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1480:3)
    at /home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1474:9
    at process.processTicksAndRejections (node:internal/process/task_queues:96:5)
    at async fetchConfigDetails (/home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1458:5)
[2023-07-11 13:53:14.667] [error] Unhandled Exception UnhandledRejection ReferenceError: fetch is not defined
    at refetchAccessToken (/home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1480:3)
    at /home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1474:9
    at process.processTicksAndRejections (node:internal/process/task_queues:96:5)
    at async fetchConfigDetails (/home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1458:5)
[2023-07-11 13:53:19.113] [error] Unhandled Exception UnhandledRejection ReferenceError: fetch is not defined
    at refetchAccessToken (/home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1480:3)
    at /home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1474:9
    at process.processTicksAndRejections (node:internal/process/task_queues:96:5)
    at async fetchConfigDetails (/home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1458:5)
[2023-07-11 13:53:24.289] [error] Unhandled Exception UnhandledRejection ReferenceError: fetch is not defined
    at refetchAccessToken (/home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1480:3)
    at /home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1474:9
    at process.processTicksAndRejections (node:internal/process/task_queues:96:5)
    at async fetchConfigDetails (/home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1458:5)
[2023-07-11 13:53:29.306] [error] Unhandled Exception UnhandledRejection ReferenceError: fetch is not defined
    at refetchAccessToken (/home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1480:3)
    at /home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1474:9
    at process.processTicksAndRejections (node:internal/process/task_queues:96:5)
    at async fetchConfigDetails (/home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1458:5)
[2023-07-11 13:53:34.326] [error] Unhandled Exception UnhandledRejection ReferenceError: fetch is not defined
    at refetchAccessToken (/home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1480:3)
    at /home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1474:9
    at process.processTicksAndRejections (node:internal/process/task_queues:96:5)
    at async fetchConfigDetails (/home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1458:5)
[2023-07-11 13:53:39.092] [error] Unhandled Exception UnhandledRejection ReferenceError: fetch is not defined
    at refetchAccessToken (/home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1480:3)
    at /home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1474:9
    at process.processTicksAndRejections (node:internal/process/task_queues:96:5)
    at async fetchConfigDetails (/home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1458:5)
[2023-07-11 13:53:44.091] [error] Unhandled Exception UnhandledRejection ReferenceError: fetch is not defined
    at refetchAccessToken (/home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1480:3)
    at /home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1474:9
    at process.processTicksAndRejections (node:internal/process/task_queues:96:5)
    at async fetchConfigDetails (/home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1458:5)
[2023-07-11 13:53:49.203] [error] Unhandled Exception UnhandledRejection ReferenceError: fetch is not defined
    at refetchAccessToken (/home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1480:3)
    at /home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1474:9
    at process.processTicksAndRejections (node:internal/process/task_queues:96:5)
    at async fetchConfigDetails (/home/lnv-75/Documents/insiteFlow/desktop-app-container/.webpack/main/index.js:1458:5)
[2023-07-11 13:54:16.650] [info]  Started /home/lnv-75/Documents/insiteFlow/desktop-app-container/test/out AES-128
[2023-07-11 13:55:34.487] [info]  Started /home/lnv-75/Documents/insiteFlow/desktop-app-container/test/out AES-128
[2023-07-11 13:55:35.462] [info]  eerr Request failed with status code 401
[2023-07-11 13:55:40.290] [info]  eerr Request failed with status code 401
[2023-07-11 13:55:45.291] [info]  eerr Request failed with status code 401
[2023-07-11 13:55:50.311] [info]  eerr Request failed with status code 401
[2023-07-11 13:55:55.212] [info]  eerr Request failed with status code 401
[2023-07-11 13:56:00.244] [info]  eerr Request failed with status code 401
[2023-07-11 13:56:05.232] [info]  eerr Request failed with status code 401
[2023-07-11 13:56:10.173] [info]  eerr Request failed with status code 401
[2023-07-11 13:56:43.372] [info]  Started /home/lnv-75/Documents/insiteFlow/desktop-app-container/test/out AES-128
[2023-07-11 13:56:44.579] [info]  eerr Request failed with status code 401
[2023-07-11 13:56:49.281] [info]  eerr Request failed with status code 401
[2023-07-11 13:56:54.222] [info]  eerr Request failed with status code 401
[2023-07-11 13:56:59.265] [info]  eerr Request failed with status code 401
[2023-07-11 13:57:04.232] [info]  eerr Request failed with status code 401
[2023-07-11 13:57:09.249] [info]  eerr Request failed with status code 401
[2023-07-11 13:57:14.268] [info]  eerr Request failed with status code 401
[2023-07-11 13:57:19.284] [info]  eerr Request failed with status code 401
[2023-07-11 13:57:24.292] [info]  eerr Request failed with status code 401
[2023-07-11 13:57:29.319] [info]  eerr Request failed with status code 401
[2023-07-11 13:57:34.244] [info]  eerr Request failed with status code 401
[2023-07-11 13:57:39.353] [info]  eerr Request failed with status code 401
[2023-07-11 13:57:44.575] [info]  eerr Request failed with status code 401
[2023-07-11 13:58:29.052] [info]  Started /home/lnv-75/Documents/insiteFlow/desktop-app-container/test/out AES-128
[2023-07-11 13:58:29.943] [info]  eerr Request failed with status code 401
[2023-07-11 13:58:34.959] [info]  eerr Request failed with status code 401
[2023-07-11 13:58:39.875] [info]  eerr Request failed with status code 401
[2023-07-11 13:58:45.298] [info]  eerr Request failed with status code 401
[2023-07-11 13:58:50.319] [info]  eerr Request failed with status code 401
[2023-07-11 13:58:54.927] [info]  eerr Request failed with status code 401
[2023-07-11 13:58:59.739] [info]  eerr Request failed with status code 401
[2023-07-11 13:59:04.962] [info]  eerr Request failed with status code 401
[2023-07-11 13:59:09.782] [info]  eerr Request failed with status code 401
[2023-07-11 13:59:14.997] [info]  eerr Request failed with status code 401
[2023-07-11 13:59:19.908] [info]  eerr Request failed with status code 401
[2023-07-11 13:59:52.604] [info]  Started /home/lnv-75/Documents/insiteFlow/desktop-app-container/test/out AES-128
[2023-07-11 13:59:53.595] [info]  eerr Request failed with status code 401
[2023-07-11 13:59:53.596] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 13:59:58.516] [info]  eerr Request failed with status code 401
[2023-07-11 13:59:58.516] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:00:03.535] [info]  eerr Request failed with status code 401
[2023-07-11 14:00:03.536] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:00:08.463] [info]  eerr Request failed with status code 401
[2023-07-11 14:00:08.464] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:00:13.368] [info]  eerr Request failed with status code 401
[2023-07-11 14:00:13.369] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:00:18.481] [info]  eerr Request failed with status code 401
[2023-07-11 14:00:18.482] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:00:23.504] [info]  eerr Request failed with status code 401
[2023-07-11 14:00:23.504] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:00:28.411] [info]  eerr Request failed with status code 401
[2023-07-11 14:00:28.412] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:00:33.462] [info]  eerr Request failed with status code 401
[2023-07-11 14:00:33.462] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:00:38.554] [info]  eerr Request failed with status code 401
[2023-07-11 14:00:38.554] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:00:43.521] [info]  eerr Request failed with status code 401
[2023-07-11 14:00:43.522] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:00:48.593] [info]  eerr Request failed with status code 401
[2023-07-11 14:00:48.593] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:00:53.914] [info]  eerr Request failed with status code 401
[2023-07-11 14:00:53.914] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:00:58.729] [info]  eerr Request failed with status code 401
[2023-07-11 14:00:58.729] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:01:03.400] [info]  eerr Request failed with status code 401
[2023-07-11 14:01:03.400] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:01:08.557] [info]  eerr Request failed with status code 401
[2023-07-11 14:01:08.557] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:01:13.574] [info]  eerr Request failed with status code 401
[2023-07-11 14:01:13.574] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:01:18.591] [info]  eerr Request failed with status code 401
[2023-07-11 14:01:18.591] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:01:23.508] [info]  eerr Request failed with status code 401
[2023-07-11 14:01:23.508] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:01:28.527] [info]  eerr Request failed with status code 401
[2023-07-11 14:01:28.528] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:01:33.437] [info]  eerr Request failed with status code 401
[2023-07-11 14:01:33.437] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:01:38.564] [info]  eerr Request failed with status code 401
[2023-07-11 14:01:38.565] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:01:43.426] [info]  eerr Request failed with status code 401
[2023-07-11 14:01:43.426] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:01:48.900] [info]  eerr Request failed with status code 401
[2023-07-11 14:01:48.900] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:01:53.818] [info]  eerr Request failed with status code 401
[2023-07-11 14:01:53.818] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:01:58.771] [info]  eerr Request failed with status code 401
[2023-07-11 14:01:58.772] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:02:03.546] [info]  eerr Request failed with status code 401
[2023-07-11 14:02:03.546] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:02:08.562] [info]  eerr Request failed with status code 401
[2023-07-11 14:02:08.563] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:02:13.781] [info]  eerr Request failed with status code 401
[2023-07-11 14:02:13.782] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:02:18.496] [info]  eerr Request failed with status code 401
[2023-07-11 14:02:18.496] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:02:23.616] [info]  eerr Request failed with status code 401
[2023-07-11 14:02:23.616] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:02:28.628] [info]  eerr Request failed with status code 401
[2023-07-11 14:02:28.628] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:02:33.549] [info]  eerr Request failed with status code 401
[2023-07-11 14:02:33.549] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:02:38.669] [info]  eerr Request failed with status code 401
[2023-07-11 14:02:38.669] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:02:43.587] [info]  eerr Request failed with status code 401
[2023-07-11 14:02:43.588] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:02:48.498] [info]  eerr Request failed with status code 401
[2023-07-11 14:02:48.498] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:02:53.925] [info]  eerr Request failed with status code 401
[2023-07-11 14:02:53.926] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:02:58.836] [info]  eerr Request failed with status code 401
[2023-07-11 14:02:58.836] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:03:03.653] [info]  eerr Request failed with status code 401
[2023-07-11 14:03:03.654] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:03:08.675] [info]  eerr Request failed with status code 401
[2023-07-11 14:03:08.675] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:03:13.688] [info]  eerr Request failed with status code 401
[2023-07-11 14:03:13.688] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:03:18.705] [info]  eerr Request failed with status code 401
[2023-07-11 14:03:18.706] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:03:23.629] [info]  eerr Request failed with status code 401
[2023-07-11 14:03:23.629] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:03:28.639] [info]  eerr Request failed with status code 401
[2023-07-11 14:03:28.640] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:03:33.452] [info]  eerr Request failed with status code 401
[2023-07-11 14:03:33.453] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:03:38.673] [info]  eerr Request failed with status code 401
[2023-07-11 14:03:38.674] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:03:43.693] [info]  eerr Request failed with status code 401
[2023-07-11 14:03:43.694] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:03:48.710] [info]  eerr Request failed with status code 401
[2023-07-11 14:03:48.711] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:03:54.029] [info]  eerr Request failed with status code 401
[2023-07-11 14:03:54.029] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:03:58.950] [info]  eerr Request failed with status code 401
[2023-07-11 14:03:58.950] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:04:03.661] [info]  eerr Request failed with status code 401
[2023-07-11 14:04:03.662] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:04:08.478] [info]  eerr Request failed with status code 401
[2023-07-11 14:04:08.478] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:04:13.592] [info]  eerr Request failed with status code 401
[2023-07-11 14:04:13.592] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:04:18.814] [info]  eerr Request failed with status code 401
[2023-07-11 14:04:18.815] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:04:23.731] [info]  eerr Request failed with status code 401
[2023-07-11 14:04:23.731] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:04:28.748] [info]  eerr Request failed with status code 401
[2023-07-11 14:04:28.749] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:04:33.863] [info]  eerr Request failed with status code 401
[2023-07-11 14:04:33.863] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:04:38.783] [info]  eerr Request failed with status code 401
[2023-07-11 14:04:38.784] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:04:43.698] [info]  eerr Request failed with status code 401
[2023-07-11 14:04:43.698] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:04:48.585] [info]  eerr Request failed with status code 401
[2023-07-11 14:04:48.585] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:04:53.935] [info]  eerr Request failed with status code 401
[2023-07-11 14:04:53.936] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:04:58.848] [info]  eerr Request failed with status code 401
[2023-07-11 14:04:58.849] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:05:03.564] [info]  eerr Request failed with status code 401
[2023-07-11 14:05:03.564] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:05:08.583] [info]  eerr Request failed with status code 401
[2023-07-11 14:05:08.583] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:05:13.704] [info]  eerr Request failed with status code 401
[2023-07-11 14:05:13.704] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:05:18.543] [info]  eerr Request failed with status code 401
[2023-07-11 14:05:18.544] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:05:23.559] [info]  eerr Request failed with status code 401
[2023-07-11 14:05:23.559] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:05:28.529] [info]  eerr Request failed with status code 401
[2023-07-11 14:05:28.529] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:05:33.677] [info]  eerr Request failed with status code 401
[2023-07-11 14:05:33.677] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:05:38.720] [info]  eerr Request failed with status code 401
[2023-07-11 14:05:38.721] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:05:43.630] [info]  eerr Request failed with status code 401
[2023-07-11 14:05:43.630] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:05:48.759] [info]  eerr Request failed with status code 401
[2023-07-11 14:05:48.759] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:05:54.046] [info]  eerr Request failed with status code 401
[2023-07-11 14:05:54.047] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:05:58.960] [info]  eerr Request failed with status code 401
[2023-07-11 14:05:58.961] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:06:03.769] [info]  eerr Request failed with status code 401
[2023-07-11 14:06:03.769] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:06:08.685] [info]  eerr Request failed with status code 401
[2023-07-11 14:06:08.685] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:06:13.707] [info]  eerr Request failed with status code 401
[2023-07-11 14:06:13.707] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:06:18.828] [info]  eerr Request failed with status code 401
[2023-07-11 14:06:18.828] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:06:23.853] [info]  eerr Request failed with status code 401
[2023-07-11 14:06:23.853] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:06:28.861] [info]  eerr Request failed with status code 401
[2023-07-11 14:06:28.864] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:06:33.779] [info]  eerr Request failed with status code 401
[2023-07-11 14:06:33.779] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:06:38.689] [info]  eerr Request failed with status code 401
[2023-07-11 14:06:38.690] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:06:43.817] [info]  eerr Request failed with status code 401
[2023-07-11 14:06:43.818] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:06:48.831] [info]  eerr Request failed with status code 401
[2023-07-11 14:06:48.832] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:06:54.209] [info]  eerr Request failed with status code 401
[2023-07-11 14:06:54.209] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:06:59.177] [info]  eerr Request failed with status code 401
[2023-07-11 14:06:59.177] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:07:03.980] [info]  eerr Request failed with status code 401
[2023-07-11 14:07:03.981] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:07:08.801] [info]  eerr Request failed with status code 401
[2023-07-11 14:07:08.802] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:07:13.827] [info]  eerr Request failed with status code 401
[2023-07-11 14:07:13.828] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:07:18.834] [info]  eerr Request failed with status code 401
[2023-07-11 14:07:18.835] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:07:23.853] [info]  eerr Request failed with status code 401
[2023-07-11 14:07:23.853] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:07:28.870] [info]  eerr Request failed with status code 401
[2023-07-11 14:07:28.870] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:07:33.786] [info]  eerr Request failed with status code 401
[2023-07-11 14:07:33.786] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:07:39.002] [info]  eerr Request failed with status code 401
[2023-07-11 14:07:39.003] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:07:43.922] [info]  eerr Request failed with status code 401
[2023-07-11 14:07:43.922] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:07:48.837] [info]  eerr Request failed with status code 401
[2023-07-11 14:07:48.838] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:07:54.265] [info]  eerr Request failed with status code 401
[2023-07-11 14:07:54.265] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:07:58.970] [info]  eerr Request failed with status code 401
[2023-07-11 14:07:58.970] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:08:03.887] [info]  eerr Request failed with status code 401
[2023-07-11 14:08:03.887] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:08:08.911] [info]  eerr Request failed with status code 401
[2023-07-11 14:08:08.911] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:08:13.820] [info]  eerr Request failed with status code 401
[2023-07-11 14:08:13.821] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:08:18.949] [info]  eerr Request failed with status code 401
[2023-07-11 14:08:18.950] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:08:23.752] [info]  eerr Request failed with status code 401
[2023-07-11 14:08:23.753] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:08:28.873] [info]  eerr Request failed with status code 401
[2023-07-11 14:08:28.874] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:08:33.792] [info]  eerr Request failed with status code 401
[2023-07-11 14:08:33.793] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:08:38.906] [info]  eerr Request failed with status code 401
[2023-07-11 14:08:38.907] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:08:43.847] [info]  eerr Request failed with status code 401
[2023-07-11 14:08:43.848] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:08:48.944] [info]  eerr Request failed with status code 401
[2023-07-11 14:08:48.945] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:08:54.269] [info]  eerr Request failed with status code 401
[2023-07-11 14:08:54.270] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:08:59.189] [info]  eerr Request failed with status code 401
[2023-07-11 14:08:59.189] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:09:03.790] [info]  eerr Request failed with status code 401
[2023-07-11 14:09:03.791] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:09:08.912] [info]  eerr Request failed with status code 401
[2023-07-11 14:09:08.912] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:09:13.724] [info]  eerr Request failed with status code 401
[2023-07-11 14:09:13.725] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:09:18.842] [info]  eerr Request failed with status code 401
[2023-07-11 14:09:18.843] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:09:23.970] [info]  eerr Request failed with status code 401
[2023-07-11 14:09:23.970] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:09:28.833] [info]  eerr Request failed with status code 401
[2023-07-11 14:09:28.833] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:09:33.897] [info]  eerr Request failed with status code 401
[2023-07-11 14:09:33.897] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:09:38.919] [info]  eerr Request failed with status code 401
[2023-07-11 14:09:38.919] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:09:43.936] [info]  eerr Request failed with status code 401
[2023-07-11 14:09:43.937] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:09:48.958] [info]  eerr Request failed with status code 401
[2023-07-11 14:09:48.959] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:09:54.068] [info]  eerr Request failed with status code 401
[2023-07-11 14:09:54.068] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:09:59.295] [info]  eerr Request failed with status code 401
[2023-07-11 14:09:59.296] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:10:03.899] [info]  eerr Request failed with status code 401
[2023-07-11 14:10:03.899] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:10:09.023] [info]  eerr Request failed with status code 401
[2023-07-11 14:10:09.023] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:10:13.741] [info]  eerr Request failed with status code 401
[2023-07-11 14:10:13.742] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:10:18.989] [info]  eerr Request failed with status code 401
[2023-07-11 14:10:18.990] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:10:23.974] [info]  eerr Request failed with status code 401
[2023-07-11 14:10:23.974] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:10:28.995] [info]  eerr Request failed with status code 401
[2023-07-11 14:10:28.995] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:10:34.006] [info]  eerr Request failed with status code 401
[2023-07-11 14:10:34.007] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:10:39.028] [info]  eerr Request failed with status code 401
[2023-07-11 14:10:39.029] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:10:44.045] [info]  eerr Request failed with status code 401
[2023-07-11 14:10:44.045] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:10:48.886] [info]  eerr Request failed with status code 401
[2023-07-11 14:10:48.886] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:10:54.284] [info]  eerr Request failed with status code 401
[2023-07-11 14:10:54.285] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:10:59.200] [info]  eerr Request failed with status code 401
[2023-07-11 14:10:59.200] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:11:04.008] [info]  eerr Request failed with status code 401
[2023-07-11 14:11:04.008] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:11:09.030] [info]  eerr Request failed with status code 401
[2023-07-11 14:11:09.030] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:11:14.052] [info]  eerr Request failed with status code 401
[2023-07-11 14:11:14.052] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:11:18.960] [info]  eerr Request failed with status code 401
[2023-07-11 14:11:18.960] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:11:23.982] [info]  eerr Request failed with status code 401
[2023-07-11 14:11:23.983] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:11:28.895] [info]  eerr Request failed with status code 401
[2023-07-11 14:11:28.895] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:11:33.836] [info]  eerr Request failed with status code 401
[2023-07-11 14:11:33.836] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:11:38.863] [info]  eerr Request failed with status code 401
[2023-07-11 14:11:38.864] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:11:44.000] [info]  eerr Request failed with status code 401
[2023-07-11 14:11:44.000] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:11:49.168] [info]  eerr Request failed with status code 401
[2023-07-11 14:11:49.168] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:11:54.083] [info]  eerr Request failed with status code 401
[2023-07-11 14:11:54.084] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:11:59.309] [info]  eerr Request failed with status code 401
[2023-07-11 14:11:59.309] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:12:04.324] [info]  eerr Request failed with status code 401
[2023-07-11 14:12:04.325] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:12:09.134] [info]  eerr Request failed with status code 401
[2023-07-11 14:12:09.134] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:12:13.948] [info]  eerr Request failed with status code 401
[2023-07-11 14:12:13.949] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:12:18.892] [info]  eerr Request failed with status code 401
[2023-07-11 14:12:18.893] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:12:24.086] [info]  eerr Request failed with status code 401
[2023-07-11 14:12:24.087] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:12:29.109] [info]  eerr Request failed with status code 401
[2023-07-11 14:12:29.110] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:12:34.120] [info]  eerr Request failed with status code 401
[2023-07-11 14:12:34.121] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:12:38.940] [info]  eerr Request failed with status code 401
[2023-07-11 14:12:38.941] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:12:44.059] [info]  eerr Request failed with status code 401
[2023-07-11 14:12:44.060] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:12:49.178] [info]  eerr Request failed with status code 401
[2023-07-11 14:12:49.178] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:12:54.193] [info]  eerr Request failed with status code 401
[2023-07-11 14:12:54.193] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:12:59.153] [info]  eerr Request failed with status code 401
[2023-07-11 14:12:59.154] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:13:04.540] [info]  eerr Request failed with status code 401
[2023-07-11 14:13:04.540] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:13:09.148] [info]  eerr Request failed with status code 401
[2023-07-11 14:13:09.148] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:13:14.162] [info]  eerr Request failed with status code 401
[2023-07-11 14:13:14.163] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:13:18.972] [info]  eerr Request failed with status code 401
[2023-07-11 14:13:18.973] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:13:24.097] [info]  eerr Request failed with status code 401
[2023-07-11 14:13:24.098] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:13:29.110] [info]  eerr Request failed with status code 401
[2023-07-11 14:13:29.111] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:13:34.063] [info]  eerr Request failed with status code 401
[2023-07-11 14:13:34.063] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:13:39.050] [info]  eerr Request failed with status code 401
[2023-07-11 14:13:39.051] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:13:44.167] [info]  eerr Request failed with status code 401
[2023-07-11 14:13:44.168] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:13:49.186] [info]  eerr Request failed with status code 401
[2023-07-11 14:13:49.186] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:13:54.104] [info]  eerr Request failed with status code 401
[2023-07-11 14:13:54.104] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:13:59.428] [info]  eerr Request failed with status code 401
[2023-07-11 14:13:59.428] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:14:04.336] [info]  eerr Request failed with status code 401
[2023-07-11 14:14:04.337] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:14:09.154] [info]  eerr Request failed with status code 401
[2023-07-11 14:14:09.155] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:14:14.173] [info]  eerr Request failed with status code 401
[2023-07-11 14:14:14.174] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:14:19.159] [info]  eerr Request failed with status code 401
[2023-07-11 14:14:19.159] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:14:24.205] [info]  eerr Request failed with status code 401
[2023-07-11 14:14:24.206] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:14:29.040] [info]  eerr Request failed with status code 401
[2023-07-11 14:14:29.041] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:14:34.238] [info]  eerr Request failed with status code 401
[2023-07-11 14:14:34.239] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:14:39.099] [info]  eerr Request failed with status code 401
[2023-07-11 14:14:39.100] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:14:44.097] [info]  eerr Request failed with status code 401
[2023-07-11 14:14:44.097] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:14:49.187] [info]  eerr Request failed with status code 401
[2023-07-11 14:14:49.188] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:14:54.108] [info]  eerr Request failed with status code 401
[2023-07-11 14:14:54.108] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:14:59.123] [info]  eerr Request failed with status code 401
[2023-07-11 14:14:59.124] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:15:04.657] [info]  eerr Request failed with status code 401
[2023-07-11 14:15:04.658] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:15:09.364] [info]  eerr Request failed with status code 401
[2023-07-11 14:15:09.365] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:15:14.129] [info]  eerr Request failed with status code 401
[2023-07-11 14:15:14.130] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:15:19.118] [info]  eerr Request failed with status code 401
[2023-07-11 14:15:19.118] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:15:23.989] [info]  eerr Request failed with status code 401
[2023-07-11 14:15:23.990] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:15:29.165] [info]  eerr Request failed with status code 401
[2023-07-11 14:15:29.166] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:15:34.044] [info]  eerr Request failed with status code 401
[2023-07-11 14:15:34.044] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:15:39.267] [info]  eerr Request failed with status code 401
[2023-07-11 14:15:39.268] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:15:44.184] [info]  eerr Request failed with status code 401
[2023-07-11 14:15:44.185] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:15:49.201] [info]  eerr Request failed with status code 401
[2023-07-11 14:15:49.201] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:15:54.148] [info]  eerr Request failed with status code 401
[2023-07-11 14:15:54.149] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:15:59.234] [info]  eerr Request failed with status code 401
[2023-07-11 14:15:59.234] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:16:04.354] [info]  eerr Request failed with status code 401
[2023-07-11 14:16:04.355] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:16:09.810] [info]  eerr Request failed with status code 401
[2023-07-11 14:16:09.811] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:16:14.496] [info]  eerr Request failed with status code 401
[2023-07-11 14:16:14.496] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:16:19.203] [info]  eerr Request failed with status code 401
[2023-07-11 14:16:19.203] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:16:24.145] [info]  eerr Request failed with status code 401
[2023-07-11 14:16:24.145] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:16:29.238] [info]  eerr Request failed with status code 401
[2023-07-11 14:16:29.238] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:16:34.153] [info]  eerr Request failed with status code 401
[2023-07-11 14:16:34.153] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:16:39.580] [info]  eerr Request failed with status code 401
[2023-07-11 14:16:39.580] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:16:44.286] [info]  eerr Request failed with status code 401
[2023-07-11 14:16:44.287] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:16:49.207] [info]  eerr Request failed with status code 401
[2023-07-11 14:16:49.207] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:16:54.125] [info]  eerr Request failed with status code 401
[2023-07-11 14:16:54.126] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:16:59.140] [info]  eerr Request failed with status code 401
[2023-07-11 14:16:59.140] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:17:04.260] [info]  eerr Request failed with status code 401
[2023-07-11 14:17:04.260] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:17:09.385] [info]  eerr Request failed with status code 401
[2023-07-11 14:17:09.385] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:17:14.600] [info]  eerr Request failed with status code 401
[2023-07-11 14:17:14.600] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:17:19.620] [info]  eerr Request failed with status code 401
[2023-07-11 14:17:19.621] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:17:24.261] [info]  eerr Request failed with status code 401
[2023-07-11 14:17:24.262] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:17:29.446] [info]  eerr Request failed with status code 401
[2023-07-11 14:17:29.447] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:17:34.265] [info]  eerr Request failed with status code 401
[2023-07-11 14:17:34.266] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:17:39.284] [info]  eerr Request failed with status code 401
[2023-07-11 14:17:39.285] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NDE5MiwiZXhwIjoxNjg5NjY4OTkyfQ.qGTvUmQw6jIN3UPnM7497y_MdlMG0DJnRh1_C8W53Z0
[2023-07-11 14:18:51.792] [info]  Started /home/lnv-75/Documents/insiteFlow/desktop-app-container/test/out AES-128
[2023-07-11 14:18:52.947] [info]  eerr Request failed with status code 401
[2023-07-11 14:18:52.949] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NTMzMSwiZXhwIjoxNjg5NjcwMTMxfQ.uhlGBhpgQSqV1aXKnb0wFKS-OGqdqjQ7kd0JW_2Ycsk
[2023-07-11 14:21:05.553] [info]  Started /home/lnv-75/Documents/insiteFlow/desktop-app-container/test/out AES-128
[2023-07-11 14:21:06.756] [info]  eerr Request failed with status code 401
[2023-07-11 14:21:06.756] [info]  IN the reetch token fun eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NTQ2NSwiZXhwIjoxNjg5NjcwMjY1fQ.d170oDBTHXEUpwAkypG3Vztx5dNIM9V5TAj0ozcTHwU
[2023-07-11 14:22:01.459] [info]  Started /home/lnv-75/Documents/insiteFlow/desktop-app-container/test/out AES-128
[2023-07-11 14:22:02.660] [info]  eerr Request failed with status code 401
[2023-07-11 14:22:02.661] [info]  IN the reetch token fun {
  token: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NTUyMSwiZXhwIjoxNjg5NjcwMzIxfQ.-dTw3NYGDk3dl712ZiSzBsasD6NNGyyp3kaXg6tuOo0',
  url: 'https://ayu3wdzaxg.execute-api.us-east-1.amazonaws.com/dev/v1/admins/auth/refreshToken'
}
[2023-07-11 14:25:10.087] [info]  Started /home/lnv-75/Documents/insiteFlow/desktop-app-container/test/out AES-128
[2023-07-11 14:25:11.177] [info]  eerr Request failed with status code 401
[2023-07-11 14:25:11.178] [info]  IN the reetch token fun {
  url: 'https://ayu3wdzaxg.execute-api.us-east-1.amazonaws.com/dev/v1/admins/auth/refreshToken',
  data: {
    refreshToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NTcwOSwiZXhwIjoxNjg5NjcwNTA5fQ.VC3TthEg2iH6GT_ZuW4Z_9gyZZfQrY6Vvlmo9MeWQks'
  }
}
[2023-07-11 14:25:13.935] [info]  THE RESP IS  {
  status: true,
  data: {
    body: {
      accessToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NTcxMywiZXhwIjoxNjg5MTUyMTEzfQ.pKcLTpvAgg6AbZTK5r0H6W942jKWDfbu6yAq2f122AA',
      refreshToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NTcxMywiZXhwIjoxNjg5NjcwNTEzfQ.V1dg2TAE68SYIk-YroUElRYa2PNnN6anrmqnY-YIbGE'
    },
    message: 'Success'
  },
  error: null
}
[2023-07-11 14:33:06.020] [info]  Started /home/lnv-75/Documents/insiteFlow/desktop-app-container/test/out AES-128
[2023-07-11 14:33:07.220] [info]  IN the reetch token fun {
  url: 'https://ayu3wdzaxg.execute-api.us-east-1.amazonaws.com/dev/v1/admins/auth/refreshToken',
  data: {
    refreshToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjE4NSwiZXhwIjoxNjg5NjcwOTg1fQ.7pWItyTrNGjQ4xoap3S2p8aj5XXDWPb5_dPNWzqq-T8'
  }
}
[2023-07-11 14:33:07.569] [info]  THE RESP IS  {
  status: true,
  data: {
    body: {
      accessToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjE4NywiZXhwIjoxNjg5MTUyNTg3fQ.Sp4nPQoNFytTioxy9OvvmmBRXsp-_S7FHxPgVi0Qa5g',
      refreshToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjE4NywiZXhwIjoxNjg5NjcwOTg3fQ.njIfNhcawdI2UmNJalgzpgCwuvEv2NlC4npcDrcRwtU'
    },
    message: 'Success'
  },
  error: null
}
[2023-07-11 14:33:12.140] [info]  IN the reetch token fun {
  url: 'https://ayu3wdzaxg.execute-api.us-east-1.amazonaws.com/dev/v1/admins/auth/refreshToken',
  data: {
    refreshToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjE4NywiZXhwIjoxNjg5NjcwOTg3fQ.njIfNhcawdI2UmNJalgzpgCwuvEv2NlC4npcDrcRwtU'
  }
}
[2023-07-11 14:33:12.954] [info]  THE RESP IS  {
  status: true,
  data: {
    body: {
      accessToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjE5MiwiZXhwIjoxNjg5MTUyNTkyfQ._stZNT8aSha8L-k4cEjoz8FTm5c1IIeHJvDXowGMTkI',
      refreshToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjE5MiwiZXhwIjoxNjg5NjcwOTkyfQ.f1jxYEMtl8EP5Yc2jknaRrZrOpixETzrlnGkzCg0YxU'
    },
    message: 'Success'
  },
  error: null
}
[2023-07-11 14:33:17.070] [info]  IN the reetch token fun {
  url: 'https://ayu3wdzaxg.execute-api.us-east-1.amazonaws.com/dev/v1/admins/auth/refreshToken',
  data: {
    refreshToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjE5MiwiZXhwIjoxNjg5NjcwOTkyfQ.f1jxYEMtl8EP5Yc2jknaRrZrOpixETzrlnGkzCg0YxU'
  }
}
[2023-07-11 14:33:17.364] [info]  THE RESP IS  {
  status: true,
  data: {
    body: {
      accessToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjE5NywiZXhwIjoxNjg5MTUyNTk3fQ.Ogk74Xc298Fim-4pbk38OhiO9D-uEy0CiZS1dTmaIow',
      refreshToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjE5NywiZXhwIjoxNjg5NjcwOTk3fQ.19426K_HrVNU4skiY5U4DnDBr3ZBRhuSED9mSqrHsdM'
    },
    message: 'Success'
  },
  error: null
}
[2023-07-11 14:33:22.087] [info]  IN the reetch token fun {
  url: 'https://ayu3wdzaxg.execute-api.us-east-1.amazonaws.com/dev/v1/admins/auth/refreshToken',
  data: {
    refreshToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjE5NywiZXhwIjoxNjg5NjcwOTk3fQ.19426K_HrVNU4skiY5U4DnDBr3ZBRhuSED9mSqrHsdM'
  }
}
[2023-07-11 14:33:22.382] [info]  THE RESP IS  {
  status: true,
  data: {
    body: {
      accessToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjIwMiwiZXhwIjoxNjg5MTUyNjAyfQ.eAcXYwDIH3ZUsNXM718tUO0hEGRxYtrECnQV3P87QXQ',
      refreshToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjIwMiwiZXhwIjoxNjg5NjcxMDAyfQ._9g6Riiiav9lHpBka3HCalCjSTlXQOBmiA3N-SXGBEg'
    },
    message: 'Success'
  },
  error: null
}
[2023-07-11 14:33:26.881] [info]  IN the reetch token fun {
  url: 'https://ayu3wdzaxg.execute-api.us-east-1.amazonaws.com/dev/v1/admins/auth/refreshToken',
  data: {
    refreshToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjIwMiwiZXhwIjoxNjg5NjcxMDAyfQ._9g6Riiiav9lHpBka3HCalCjSTlXQOBmiA3N-SXGBEg'
  }
}
[2023-07-11 14:33:27.169] [info]  THE RESP IS  {
  status: true,
  data: {
    body: {
      accessToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjIwNywiZXhwIjoxNjg5MTUyNjA3fQ.DG7JAelmLrrxDbfbrxG3b7iVNLNIsbLpuj29GTIbEuI',
      refreshToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjIwNywiZXhwIjoxNjg5NjcxMDA3fQ.8hfVR7ce478Z9bNSdHL3GhFyNlDjBd9GmzO70Nmoutc'
    },
    message: 'Success'
  },
  error: null
}
[2023-07-11 14:33:32.001] [info]  IN the reetch token fun {
  url: 'https://ayu3wdzaxg.execute-api.us-east-1.amazonaws.com/dev/v1/admins/auth/refreshToken',
  data: {
    refreshToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjIwNywiZXhwIjoxNjg5NjcxMDA3fQ.8hfVR7ce478Z9bNSdHL3GhFyNlDjBd9GmzO70Nmoutc'
  }
}
[2023-07-11 14:33:32.312] [info]  THE RESP IS  {
  status: true,
  data: {
    body: {
      accessToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjIxMiwiZXhwIjoxNjg5MTUyNjEyfQ.oVZ4BElORqBQc-jNQIDhDEZqAz0R8Cm0Rdxhn6IBqYs',
      refreshToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjIxMiwiZXhwIjoxNjg5NjcxMDEyfQ.Rg58saOppFioKfNqVxcSpUsoAXmBjmktdhzqypU-GoA'
    },
    message: 'Success'
  },
  error: null
}
[2023-07-11 14:33:36.924] [info]  IN the reetch token fun {
  url: 'https://ayu3wdzaxg.execute-api.us-east-1.amazonaws.com/dev/v1/admins/auth/refreshToken',
  data: {
    refreshToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjIxMiwiZXhwIjoxNjg5NjcxMDEyfQ.Rg58saOppFioKfNqVxcSpUsoAXmBjmktdhzqypU-GoA'
  }
}
[2023-07-11 14:33:37.329] [info]  THE RESP IS  {
  status: true,
  data: {
    body: {
      accessToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjIxNywiZXhwIjoxNjg5MTUyNjE3fQ.oi4xV6ScggaUY0XlIMC8GyFL3hX_Eqi3uTKFFySSaaM',
      refreshToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjIxNywiZXhwIjoxNjg5NjcxMDE3fQ.EEnEj0b8bo7ThgiuWdV2XPgf2rlg1Yj2cCXAx_xoYlQ'
    },
    message: 'Success'
  },
  error: null
}
[2023-07-11 14:33:42.034] [info]  IN the reetch token fun {
  url: 'https://ayu3wdzaxg.execute-api.us-east-1.amazonaws.com/dev/v1/admins/auth/refreshToken',
  data: {
    refreshToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjIxNywiZXhwIjoxNjg5NjcxMDE3fQ.EEnEj0b8bo7ThgiuWdV2XPgf2rlg1Yj2cCXAx_xoYlQ'
  }
}
[2023-07-11 14:33:42.328] [info]  THE RESP IS  {
  status: true,
  data: {
    body: {
      accessToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjIyMiwiZXhwIjoxNjg5MTUyNjIyfQ.A1Z9APTnG6MGrNAAHbk8ev3Bn-bQ1N3LrKEM_Xjt3sI',
      refreshToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjIyMiwiZXhwIjoxNjg5NjcxMDIyfQ.Acl0HfwNfokl-aIF03tO6aMzOeJFpflGn9PqRVqKf2E'
    },
    message: 'Success'
  },
  error: null
}
[2023-07-11 14:33:46.758] [info]  IN the reetch token fun {
  url: 'https://ayu3wdzaxg.execute-api.us-east-1.amazonaws.com/dev/v1/admins/auth/refreshToken',
  data: {
    refreshToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjIyMiwiZXhwIjoxNjg5NjcxMDIyfQ.Acl0HfwNfokl-aIF03tO6aMzOeJFpflGn9PqRVqKf2E'
  }
}
[2023-07-11 14:33:47.084] [info]  THE RESP IS  {
  status: true,
  data: {
    body: {
      accessToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjIyNiwiZXhwIjoxNjg5MTUyNjI2fQ.IVAUbTeYfnSWIJZ4AqS1BudWRttVc1IdLPrPFhW4rWE',
      refreshToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjIyNiwiZXhwIjoxNjg5NjcxMDI2fQ.SLehWw2uS51WJk9CGX0GXl-w18_vaJQ6msPK1WASHfA'
    },
    message: 'Success'
  },
  error: null
}
[2023-07-11 14:33:51.968] [info]  IN the reetch token fun {
  url: 'https://ayu3wdzaxg.execute-api.us-east-1.amazonaws.com/dev/v1/admins/auth/refreshToken',
  data: {
    refreshToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjIyNiwiZXhwIjoxNjg5NjcxMDI2fQ.SLehWw2uS51WJk9CGX0GXl-w18_vaJQ6msPK1WASHfA'
  }
}
[2023-07-11 14:33:52.792] [info]  THE RESP IS  {
  status: true,
  data: {
    body: {
      accessToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjIzMiwiZXhwIjoxNjg5MTUyNjMyfQ.P85gjq_JHJb_mJQotgDIj7do7hn8xIh7WtqIlpGSm3w',
      refreshToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjIzMiwiZXhwIjoxNjg5NjcxMDMyfQ.lOaRpk3Uz1jr0L4Ks4sw8eHcPxkC37mQlgqxpA2ALno'
    },
    message: 'Success'
  },
  error: null
}
[2023-07-11 14:33:56.996] [info]  IN the reetch token fun {
  url: 'https://ayu3wdzaxg.execute-api.us-east-1.amazonaws.com/dev/v1/admins/auth/refreshToken',
  data: {
    refreshToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjIzMiwiZXhwIjoxNjg5NjcxMDMyfQ.lOaRpk3Uz1jr0L4Ks4sw8eHcPxkC37mQlgqxpA2ALno'
  }
}
[2023-07-11 14:33:57.339] [info]  THE RESP IS  {
  status: true,
  data: {
    body: {
      accessToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjIzNywiZXhwIjoxNjg5MTUyNjM3fQ.QV070yqBgaplfFuEMlOeg0SoLxli13HWvhm6xj3WrTQ',
      refreshToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjIzNywiZXhwIjoxNjg5NjcxMDM3fQ.EIclf3VcDfFF3OZOBauQz62rLE_tHyI9SaUQYSCF-l4'
    },
    message: 'Success'
  },
  error: null
}
[2023-07-11 14:34:02.003] [info]  IN the reetch token fun {
  url: 'https://ayu3wdzaxg.execute-api.us-east-1.amazonaws.com/dev/v1/admins/auth/refreshToken',
  data: {
    refreshToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjIzNywiZXhwIjoxNjg5NjcxMDM3fQ.EIclf3VcDfFF3OZOBauQz62rLE_tHyI9SaUQYSCF-l4'
  }
}
[2023-07-11 14:34:02.417] [info]  THE RESP IS  {
  status: true,
  data: {
    body: {
      accessToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjI0MiwiZXhwIjoxNjg5MTUyNjQyfQ.Poy3qymD46xG24g81348dluZrlSE8YwL9jDLu6Y9gRY',
      refreshToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjI0MiwiZXhwIjoxNjg5NjcxMDQyfQ.lq8XVMEJWtcj1pU_bD_R3-WEvhCEB3OuQIPQZxhes_E'
    },
    message: 'Success'
  },
  error: null
}
[2023-07-11 14:34:07.235] [info]  IN the reetch token fun {
  url: 'https://ayu3wdzaxg.execute-api.us-east-1.amazonaws.com/dev/v1/admins/auth/refreshToken',
  data: {
    refreshToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjI0MiwiZXhwIjoxNjg5NjcxMDQyfQ.lq8XVMEJWtcj1pU_bD_R3-WEvhCEB3OuQIPQZxhes_E'
  }
}
[2023-07-11 14:34:07.941] [info]  THE RESP IS  {
  status: true,
  data: {
    body: {
      accessToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjI0NywiZXhwIjoxNjg5MTUyNjQ3fQ.YlKV9eIGqRqJ55j3ctw3iihKZnSghtDF-2V8-kewWw4',
      refreshToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjI0NywiZXhwIjoxNjg5NjcxMDQ3fQ.ceXs-fuqIHmnAzc4s12WxN_W7VTiGbf9L73HHT-Jdms'
    },
    message: 'Success'
  },
  error: null
}
[2023-07-11 14:34:12.245] [info]  IN the reetch token fun {
  url: 'https://ayu3wdzaxg.execute-api.us-east-1.amazonaws.com/dev/v1/admins/auth/refreshToken',
  data: {
    refreshToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjI0NywiZXhwIjoxNjg5NjcxMDQ3fQ.ceXs-fuqIHmnAzc4s12WxN_W7VTiGbf9L73HHT-Jdms'
  }
}
[2023-07-11 14:34:12.959] [info]  THE RESP IS  {
  status: true,
  data: {
    body: {
      accessToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjI1MiwiZXhwIjoxNjg5MTUyNjUyfQ.mM5nEeAB1C-rTvYE7Z8hHAoT27PhjJVr1qnTuqa9Ies',
      refreshToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjI1MiwiZXhwIjoxNjg5NjcxMDUyfQ.tVPAYzEK08VBxaNmkuhS3wPImOTA1QPR16kC3BqeYp4'
    },
    message: 'Success'
  },
  error: null
}
[2023-07-11 14:34:16.858] [info]  IN the reetch token fun {
  url: 'https://ayu3wdzaxg.execute-api.us-east-1.amazonaws.com/dev/v1/admins/auth/refreshToken',
  data: {
    refreshToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjI1MiwiZXhwIjoxNjg5NjcxMDUyfQ.tVPAYzEK08VBxaNmkuhS3wPImOTA1QPR16kC3BqeYp4'
  }
}
[2023-07-11 14:34:17.573] [info]  THE RESP IS  {
  status: true,
  data: {
    body: {
      accessToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjI1NywiZXhwIjoxNjg5MTUyNjU3fQ.sCXXx0bk2WX1hRYZZcvxyLJtweippX-OZFZw-je4RuY',
      refreshToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjI1NywiZXhwIjoxNjg5NjcxMDU3fQ.bbfNpnsi3z5qcEXRnAr6FOTLvqtdJFpWk1g9K-BRwUE'
    },
    message: 'Success'
  },
  error: null
}
[2023-07-11 14:34:21.971] [info]  IN the reetch token fun {
  url: 'https://ayu3wdzaxg.execute-api.us-east-1.amazonaws.com/dev/v1/admins/auth/refreshToken',
  data: {
    refreshToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjI1NywiZXhwIjoxNjg5NjcxMDU3fQ.bbfNpnsi3z5qcEXRnAr6FOTLvqtdJFpWk1g9K-BRwUE'
  }
}
[2023-07-11 14:34:22.277] [info]  THE RESP IS  {
  status: true,
  data: {
    body: {
      accessToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjI2MiwiZXhwIjoxNjg5MTUyNjYyfQ.S8oqXvB_G0yW0b8bcZ5dE8nZ43jMPWneFB_M9QyeDa8',
      refreshToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjI2MiwiZXhwIjoxNjg5NjcxMDYyfQ.ZuvPwRmC6V-01SPLLp5OM5-yazExKIXmtMo4zoHm1fg'
    },
    message: 'Success'
  },
  error: null
}
[2023-07-11 14:34:26.995] [info]  IN the reetch token fun {
  url: 'https://ayu3wdzaxg.execute-api.us-east-1.amazonaws.com/dev/v1/admins/auth/refreshToken',
  data: {
    refreshToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjI2MiwiZXhwIjoxNjg5NjcxMDYyfQ.ZuvPwRmC6V-01SPLLp5OM5-yazExKIXmtMo4zoHm1fg'
  }
}
[2023-07-11 14:34:27.298] [info]  THE RESP IS  {
  status: true,
  data: {
    body: {
      accessToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjI2NywiZXhwIjoxNjg5MTUyNjY3fQ.H4BGZ3zcpoA7eDnUrNwL6NwRYWQpg7DpMG6MvN8AH58',
      refreshToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjI2NywiZXhwIjoxNjg5NjcxMDY3fQ.Fyk4jO7CiQWNPXQOePlVXdhNaayKjfU1MdJQswW7aXc'
    },
    message: 'Success'
  },
  error: null
}
[2023-07-11 14:34:31.908] [info]  IN the reetch token fun {
  url: 'https://ayu3wdzaxg.execute-api.us-east-1.amazonaws.com/dev/v1/admins/auth/refreshToken',
  data: {
    refreshToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjI2NywiZXhwIjoxNjg5NjcxMDY3fQ.Fyk4jO7CiQWNPXQOePlVXdhNaayKjfU1MdJQswW7aXc'
  }
}
[2023-07-11 14:34:32.186] [info]  THE RESP IS  {
  status: true,
  data: {
    body: {
      accessToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjI3MiwiZXhwIjoxNjg5MTUyNjcyfQ._Z2NFzvEGievW-Z1bt4K2Lkm8Cr4squhjCqZNIOHpEA',
      refreshToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjI3MiwiZXhwIjoxNjg5NjcxMDcyfQ.y8CeEKZrdqkF___mVl9-yJatTFNdnCxyNl664xIrZ6Q'
    },
    message: 'Success'
  },
  error: null
}
[2023-07-11 14:34:37.126] [info]  IN the reetch token fun {
  url: 'https://ayu3wdzaxg.execute-api.us-east-1.amazonaws.com/dev/v1/admins/auth/refreshToken',
  data: {
    refreshToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjI3MiwiZXhwIjoxNjg5NjcxMDcyfQ.y8CeEKZrdqkF___mVl9-yJatTFNdnCxyNl664xIrZ6Q'
  }
}
[2023-07-11 14:34:37.439] [info]  THE RESP IS  {
  status: true,
  data: {
    body: {
      accessToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjI3NywiZXhwIjoxNjg5MTUyNjc3fQ.vFgqr2lxDIlAccAhlsY17gOFSMnewjNqKkBt4kRPPwE',
      refreshToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjI3NywiZXhwIjoxNjg5NjcxMDc3fQ.zmxvFtOwSQJ976cxF7JRd4LIKpPXkw2-B0jydSgnftA'
    },
    message: 'Success'
  },
  error: null
}
[2023-07-11 14:34:41.938] [info]  IN the reetch token fun {
  url: 'https://ayu3wdzaxg.execute-api.us-east-1.amazonaws.com/dev/v1/admins/auth/refreshToken',
  data: {
    refreshToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjI3NywiZXhwIjoxNjg5NjcxMDc3fQ.zmxvFtOwSQJ976cxF7JRd4LIKpPXkw2-B0jydSgnftA'
  }
}
[2023-07-11 14:34:42.599] [info]  THE RESP IS  {
  status: true,
  data: {
    body: {
      accessToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjI4MiwiZXhwIjoxNjg5MTUyNjgyfQ.oRnPQ5FxHxB4hR0alIZKKwxr3Jza3SDZUzqCKG9HYeg',
      refreshToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjI4MiwiZXhwIjoxNjg5NjcxMDgyfQ.ywnBD7Peb12TkNdCLBvVR2w8UOOgUTItXt91sXzMT4s'
    },
    message: 'Success'
  },
  error: null
}
[2023-07-11 14:34:46.769] [info]  IN the reetch token fun {
  url: 'https://ayu3wdzaxg.execute-api.us-east-1.amazonaws.com/dev/v1/admins/auth/refreshToken',
  data: {
    refreshToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjI4MiwiZXhwIjoxNjg5NjcxMDgyfQ.ywnBD7Peb12TkNdCLBvVR2w8UOOgUTItXt91sXzMT4s'
  }
}
[2023-07-11 14:34:47.035] [info]  THE RESP IS  {
  status: true,
  data: {
    body: {
      accessToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjI4NiwiZXhwIjoxNjg5MTUyNjg2fQ.qaFTYfhrgAwWz3hGmObzBA054gcD-2NDDr1HW-2HSVA',
      refreshToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjI4NiwiZXhwIjoxNjg5NjcxMDg2fQ.u8zH6pP48BZLLzkdD0oVXwWpASe6wUdYbXB8CqDnSXo'
    },
    message: 'Success'
  },
  error: null
}
[2023-07-11 14:35:19.780] [info]  Started /home/lnv-75/Documents/insiteFlow/desktop-app-container/test/out AES-128
[2023-07-11 14:35:21.485] [info]  THE RESP IS  {
  status: true,
  data: {
    body: {
      accessToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjMyMSwiZXhwIjoxNjg5MTUyNzIxfQ.CgfBtoayeZv8DaaKCebDMjWDczGOHCzh35VSLhQfsfE',
      refreshToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjMyMSwiZXhwIjoxNjg5NjcxMTIxfQ.U59yofBdR05UBlOKLx9xBtkRPa-667r7eGNfr_ZG6K8'
    },
    message: 'Success'
  },
  error: null
}
[2023-07-11 14:35:25.847] [info]  THE RESP IS  {
  status: true,
  data: {
    body: {
      accessToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjMyNSwiZXhwIjoxNjg5MTUyNzI1fQ.vSxQL0-WgY2aduBtShZT4ghsg0HZB5Nu0j2PPgnhgKE',
      refreshToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjMyNSwiZXhwIjoxNjg5NjcxMTI1fQ.Dzfl9pJgmBMKnMzAZXgq6lmJOE5K1rvy5hCKlahXlkI'
    },
    message: 'Success'
  },
  error: null
}
[2023-07-11 14:35:30.856] [info]  THE RESP IS  {
  status: true,
  data: {
    body: {
      accessToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjMzMCwiZXhwIjoxNjg5MTUyNzMwfQ.TbIXOSQR7o4knZk4hnYApWov0EM4t_anOImSSZ2O8I0',
      refreshToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjMzMCwiZXhwIjoxNjg5NjcxMTMwfQ.yq0qt07U6PaDImMjsZ0fJyNu5NIEWvyuS5seFPJTp10'
    },
    message: 'Success'
  },
  error: null
}
[2023-07-11 14:35:36.004] [info]  THE RESP IS  {
  status: true,
  data: {
    body: {
      accessToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjMzNSwiZXhwIjoxNjg5MTUyNzM1fQ.mDZ0yt6AHqgO_3l5a71H0PsQLznecbY9URpwUjm81Ew',
      refreshToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjMzNSwiZXhwIjoxNjg5NjcxMTM1fQ.xo0aOhRgSDKT_Zb9JtotRgUsN0pYKciPqdsV1rt8o6A'
    },
    message: 'Success'
  },
  error: null
}
[2023-07-11 14:35:40.977] [info]  THE RESP IS  {
  status: true,
  data: {
    body: {
      accessToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjM0MCwiZXhwIjoxNjg5MTUyNzQwfQ.mr9MYNSQRBQOfj7vOdGRmJaFqgMKL70SpuPf4TuLqKI',
      refreshToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjM0MCwiZXhwIjoxNjg5NjcxMTQwfQ.rerQHjzbolmO9i9y2-t0i2Q7DU8LCpCC-bpp5Qc3-Mw'
    },
    message: 'Success'
  },
  error: null
}
[2023-07-11 14:35:46.461] [info]  THE RESP IS  {
  status: true,
  data: {
    body: {
      accessToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjM0NiwiZXhwIjoxNjg5MTUyNzQ2fQ.nPqi1CLg-zwgCK-Ttt2YmvT8KVpQ78P2SmbD_10qLMI',
      refreshToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjM0NiwiZXhwIjoxNjg5NjcxMTQ2fQ.GcudqhvLffxGntjj-VbnZrOFWIOv6Rd7OXIdXbtKNjE'
    },
    message: 'Success'
  },
  error: null
}
[2023-07-11 14:35:51.063] [info]  THE RESP IS  {
  status: true,
  data: {
    body: {
      accessToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjM1MCwiZXhwIjoxNjg5MTUyNzUwfQ.Qqsx1T8ReRUNR4qHIULTzhzus8WTzw4Dmym9zPBmVLc',
      refreshToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjM1MCwiZXhwIjoxNjg5NjcxMTUwfQ.5k6a1Ewfyd9_PhKihMtH39cr0k3-dgSTCSav0iSgn80'
    },
    message: 'Success'
  },
  error: null
}
[2023-07-11 14:35:55.838] [info]  THE RESP IS  {
  status: true,
  data: {
    body: {
      accessToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjM1NSwiZXhwIjoxNjg5MTUyNzU1fQ.Xw4Ufdi5CHM2HzRqHjIbBLImClC10TUXjkKlXc5I4Cc',
      refreshToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjM1NSwiZXhwIjoxNjg5NjcxMTU1fQ.317fq-MoxL5kw8XyocrlLD9_Gtgw84iqwqAMb1_tDGo'
    },
    message: 'Success'
  },
  error: null
}
[2023-07-11 14:36:00.954] [info]  THE RESP IS  {
  status: true,
  data: {
    body: {
      accessToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjM2MCwiZXhwIjoxNjg5MTUyNzYwfQ.zB5ORm_wTTtbKvMuXqNC4TTvVpg7Ac3fje4XwjigFcA',
      refreshToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjM2MCwiZXhwIjoxNjg5NjcxMTYwfQ._XXLL3TDLQVML4QEk3DpxOEadwvDF6-NYQI-NPeVQ-M'
    },
    message: 'Success'
  },
  error: null
}
[2023-07-11 14:36:05.974] [info]  THE RESP IS  {
  status: true,
  data: {
    body: {
      accessToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjM2NSwiZXhwIjoxNjg5MTUyNzY1fQ.wJ69q7TrX-ZoZfGIkbUziLkG3EywFTUQfmRKgP8sRRQ',
      refreshToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjM2NSwiZXhwIjoxNjg5NjcxMTY1fQ.8eRcyzXrpBp_ti8rSIWm3TFEiPujjiwRd23_ckuyoBk'
    },
    message: 'Success'
  },
  error: null
}
[2023-07-11 14:36:11.334] [info]  THE RESP IS  {
  status: true,
  data: {
    body: {
      accessToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjM3MSwiZXhwIjoxNjg5MTUyNzcxfQ.JphfZ8nzcF-eDjXTurJtvz_qMb02KA-oF2Vhf7pLzXU',
      refreshToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjM3MSwiZXhwIjoxNjg5NjcxMTcxfQ.nNi2wBhVqy6E-rErQV0_yL27QsCxtV7AdjXN5HpFwLU'
    },
    message: 'Success'
  },
  error: null
}
[2023-07-11 14:36:15.918] [info]  THE RESP IS  {
  status: true,
  data: {
    body: {
      accessToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjM3NSwiZXhwIjoxNjg5MTUyNzc1fQ.w1EtUSVUYc_wCwHgaX1hBcCe3-x_t86uldE8JocXK3A',
      refreshToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjM3NSwiZXhwIjoxNjg5NjcxMTc1fQ.lYIOjtD4og4B4gSx0o0yDVjtpjs2s28YBp1-9UDcNrQ'
    },
    message: 'Success'
  },
  error: null
}
[2023-07-11 14:36:20.938] [info]  THE RESP IS  {
  status: true,
  data: {
    body: {
      accessToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjM4MCwiZXhwIjoxNjg5MTUyNzgwfQ.EKuukUok0HxE-8809qlLBgdsI69SuXdtn6dHZqPs4Do',
      refreshToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjM4MCwiZXhwIjoxNjg5NjcxMTgwfQ.IaOafPmi91Ezv0CDO_o3Rb2_TnqreCn9HaU_cRiEHZQ'
    },
    message: 'Success'
  },
  error: null
}
[2023-07-11 14:36:26.490] [info]  THE RESP IS  {
  status: true,
  data: {
    body: {
      accessToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjM4NiwiZXhwIjoxNjg5MTUyNzg2fQ.yrFA9FBdKZaR37iw2lBrBq1qE6HfO4a4H3XYqRHofuo',
      refreshToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjM4NiwiZXhwIjoxNjg5NjcxMTg2fQ.QakWDw7eXvWReMbHnvjTQxZtP9nQx0_jAknzJHKTfQA'
    },
    message: 'Success'
  },
  error: null
}
[2023-07-11 14:36:31.087] [info]  THE RESP IS  {
  status: true,
  data: {
    body: {
      accessToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjM5MCwiZXhwIjoxNjg5MTUyNzkwfQ.-svr8QuUCTL8PfZm6HIoqjkXWM12LxikhnwtGE0z4FE',
      refreshToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjM5MCwiZXhwIjoxNjg5NjcxMTkwfQ.iycYx4X_hUBB8s3Dj0Uc5ulimRmNt1dGxTxqyNa7gXk'
    },
    message: 'Success'
  },
  error: null
}
[2023-07-11 14:36:35.993] [info]  THE RESP IS  {
  status: true,
  data: {
    body: {
      accessToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjM5NSwiZXhwIjoxNjg5MTUyNzk1fQ.xBN89fiJ7HSLRChxMYANpW7cONl8BZTrqimNSq8jDaY',
      refreshToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjM5NSwiZXhwIjoxNjg5NjcxMTk1fQ.rhMvJREbI9MGPG0DpzIVJiujDdjMOC-sKBwRZYdCVAI'
    },
    message: 'Success'
  },
  error: null
}
[2023-07-11 14:36:41.444] [info]  THE RESP IS  {
  status: true,
  data: {
    body: {
      accessToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjQwMSwiZXhwIjoxNjg5MTUyODAxfQ.DYtk3VN_ehTsB_Q1JovTcsZvRxtuU3RVTr_OL-Q44GA',
      refreshToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjQwMSwiZXhwIjoxNjg5NjcxMjAxfQ.47dtn3YIg2UPokZeuCBVUzGhEj96WWxcy95cUUMI_h8'
    },
    message: 'Success'
  },
  error: null
}
[2023-07-11 14:36:46.038] [info]  THE RESP IS  {
  status: true,
  data: {
    body: {
      accessToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjQwNSwiZXhwIjoxNjg5MTUyODA1fQ.BHjed0ARJA0cIt1xTVnL_yXgyAexg5EErGuaWufQiAk',
      refreshToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjQwNSwiZXhwIjoxNjg5NjcxMjA1fQ.enVo1Tl6CXmivU9snU-Udp05diM0CyF7pojnxG4asoA'
    },
    message: 'Success'
  },
  error: null
}
[2023-07-11 14:36:50.865] [info]  THE RESP IS  {
  status: true,
  data: {
    body: {
      accessToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjQxMCwiZXhwIjoxNjg5MTUyODEwfQ.7dMFhLa6BA8Y_4XXhA5aEIGUkBGC1ljZdV24k82F-GY',
      refreshToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjQxMCwiZXhwIjoxNjg5NjcxMjEwfQ.Ni0KNH0Vb-klGKndL0icOAMpQEroSECWgrf1zah1a-E'
    },
    message: 'Success'
  },
  error: null
}
[2023-07-11 14:36:56.080] [info]  THE RESP IS  {
  status: true,
  data: {
    body: {
      accessToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjQxNSwiZXhwIjoxNjg5MTUyODE1fQ.wmZ1ei_A-JOCDUYn2MGa61rYZliCVJ9Zi-d3oz9tc-E',
      refreshToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjQxNSwiZXhwIjoxNjg5NjcxMjE1fQ.rSVKGO-OvSzMLBie48K6pfsRe4w0MWpRl6sBvVkuE8Y'
    },
    message: 'Success'
  },
  error: null
}
[2023-07-11 14:37:00.895] [info]  THE RESP IS  {
  status: true,
  data: {
    body: {
      accessToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjQyMCwiZXhwIjoxNjg5MTUyODIwfQ.ZBDWsKWfV6pDO5yNNWfbR7EI_Wqs4l-WRFsEsQa4nGw',
      refreshToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjQyMCwiZXhwIjoxNjg5NjcxMjIwfQ.nSK3OvkJLkiyRO7C25xlKIPTcDsisPlFhJs5Isam-5k'
    },
    message: 'Success'
  },
  error: null
}
[2023-07-11 14:37:05.897] [info]  THE RESP IS  {
  status: true,
  data: {
    body: {
      accessToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjQyNSwiZXhwIjoxNjg5MTUyODI1fQ.HkKsyxoff4YdcGazMFtHwe5ZspDolO5uxlKZZNU2YW4',
      refreshToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjQyNSwiZXhwIjoxNjg5NjcxMjI1fQ.nm2NN3Ca5smIIzgB7vTw1L0dEGe1vdkhs0PoJaBEAyU'
    },
    message: 'Success'
  },
  error: null
}
[2023-07-11 14:37:11.033] [info]  THE RESP IS  {
  status: true,
  data: {
    body: {
      accessToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjQzMCwiZXhwIjoxNjg5MTUyODMwfQ.hrp9E6waFLlEMX9Rvvq-TjsVVqJ5teO9AyXhEjy_BcY',
      refreshToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjQzMCwiZXhwIjoxNjg5NjcxMjMwfQ.JtzNx-bZBOLSizE5-8Um-asnAyHtdDK6boAQCRabwoI'
    },
    message: 'Success'
  },
  error: null
}
[2023-07-11 14:37:15.924] [info]  THE RESP IS  {
  status: true,
  data: {
    body: {
      accessToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjQzNSwiZXhwIjoxNjg5MTUyODM1fQ.8wcl1x29wH6FHnhsr3GnzJwUoOrS3baCKMx92AehS0M',
      refreshToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJiYTJjMjNlZS02MTMxLTRhNmItOTA1OS1hODk4ZDliYjNmYmUiLCJlbWFpbCI6IjVhYjVkMTk1LWI3ZDQtNGFjNC1iYTA5LWM2N2M3ZTMyMWMyMSIsInR5cGUiOiJzeXN0ZW0iLCJvcmdhbml6YXRpb25JZCI6IjcxMTcyOWE4LWE0NzMtNDdiZi1iMjdmLThhYmMxZWU1MjI4MSIsIm5ldHdvcmtJZCI6IjRiYmY3YWYxLTRjY2ItNDUyMC05NmE0LWY0NWIyYTYxNDhkYSIsImlhdCI6MTY4OTA2NjQzNSwiZXhwIjoxNjg5NjcxMjM1fQ.AhrSQvAPRxj3Mx4G04ky1z3hE0UnVrv5DeEbHJ2sEQA'
    },
    message: 'Success'
  },
  error: null
}
